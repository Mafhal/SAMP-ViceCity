#pragma dynamic 95000

//Includes Pawno
#include <a_samp>
#include <a_mysql>
#include <foreach>
#include <easyDialog>
#include <eSelection>
#include <progress2>
#include <sscanf2>
#include <streamer>
#include <zcmd>
#include <removebuilding>
#include <mapandreas>
#include <DOF2>
#include <json>

//Configurações SQL
#define SQL_HOSTNAME "localhost"
#define SQL_USERNAME "root"
#define SQL_DATABASE "databaserj"
#define SQL_PASSWORD ""

//Configurações GameMode
#define SERVER_NAME 	 "Max Miami Rolepay"
#define SERVER_URL 		 "localhost"
#define SERVER_REVISION  "MM:RP"
#undef MAX_PLAYERS
#define MAX_PLAYERS      (100)

//>>>>>>> Configurações Designers
#pragma 			tabsize 					(0)
#define COLOR_CLIENT      (0xAAC4E5FF)
#define CinzaC  	      (0x828282AA)
#define COLOR_WHITE       (0xFFFFFFFF)
#define COLOR_RED         (0xFF0000FF)
#define COLOR_CYAN        (0x33CCFFFF)
#define COLOR_LIGHTRED    (0xFF6347FF)
#define COLOR_LIGHTGREEN  (0x9ACD32FF)
#define COLOR_YELLOW      (0xFFFF00FF)
#define COLOR_GREY        (0xAFAFAFFF)
#define COLOR_HOSPITAL    (0xFF8282FF)
#define COLOR_PURPLE      (0xD0AEEBFF)
#define COLOR_LIGHTYELLOW (0xF5DEB3FF)
#define COLOR_DARKBLUE    (0x1394BFFF)
#define COLOR_ORANGE      (0xFFA500FF)
#define COLOR_LIME        (0x00FF00FF)
#define COLOR_GREEN       (0x33CC33FF)
#define COLOR_BLUE        (0x2641FEFF)
#define COLOR_FACTION     (0xBDF38BFF)
#define COLOR_RADIO       (0x8D8DFFFF)
#define COLOR_LIGHTBLUE   (0x007FFFFF)
#define COLOR_SERVER      (0xFFFF90FF)
#define COLOR_DEPARTMENT  (0xFF6347FF)
#define COLOR_ADMINCHAT   (0x33EE33FF)
#define DEFAULT_COLOR     (0xFFFFFFFF)
///////////////////////////////////////////////////////////////
#define THREAD_CREATE_CHAR (1)
#define THREAD_CHECK_ACCOUNT (2)
#define THREAD_LOGIN (3)
#define THREAD_CHARACTERS (4)
#define THREAD_LOAD_CHARACTER (5)
#define THREAD_VERIFY_PASS (6)
#define THREAD_FIND_USERNAME (7)
#define THREAD_LOAD_INVENTORY (8)
#define THREAD_BAN_LOOKUP (9)
#define THREAD_LOAD_CONTACTS (10)
#define THREAD_LOAD_LOCATIONS (11)
#define THREAD_LOAD_TICKETS (12)
#define THREAD_SHOW_CHARACTER (13)
//////////////////////////////////////////////////////////////
#define MODEL_SELECTION_GLASSES (1)
#define MODEL_SELECTION_HATS (2)
#define MODEL_SELECTION_BANDANAS (3)
#define MODEL_SELECTION_SKIN (4)
#define MODEL_SELECTION_INVENTORY (5)
#define MODEL_SELECTION_CLOTHES (6)
#define MODEL_SELECTION_DEALER (7)
#define MODEL_SELECTION_DEALER_ADD (8)
#define MODEL_SELECTION_BUY_CAR (9)
#define MODEL_SELECTION_FURNITURE (10)
#define MODEL_SELECTION_COLOR (11)
#define MODEL_SELECTION_SKINS (12)
#define MODEL_SELECTION_ADD_SKIN (13)
#define MODEL_SELECTION_FACTION_SKIN (14)
#define MODEL_SELECTION_WHEELS (15)
#define MODEL_SELECTION_FRISK (16)

//>>>>>>> Configurações Facções
#define FACTION_GOV (1)
#define FACTION_PCESP (2)
#define FACTION_MEDICOS (3)
#define FACTION_JUDICIAL (4)
#define FACTION_GANG (5)

//>>>>>>> Configurações Empregos
#define JOB_COURIER (1)
#define JOB_MECHANIC (2)
#define JOB_TAXI (3)
#define JOB_MINER (4)
#define JOB_GARBAGE (5)
#define JOB_PROSEGUR (6)
#define JOB_UNLOADER (7)

////////////////////////////////]
#define semplaca "SemPlaca"

/////////////////////////////////////////////////////////////////////////////////////
#define SendServerMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_SERVER, ""%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GREY, ""%1) // COLOR_YELLOW

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_LIGHTRED, ""%1)

#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_CLIENT, ""%1) // COLOR_YELLOW
	
#define 			function%0(%1) 				forward %0(%1); public %0(%1)
	
#define SendRequest(%1,%2)  Dialog_Show(%1, PETITION_DIALOG, DIALOG_STYLE_MSGBOX, "Petição", %2, "Aceitar", "Recusar")

#define             Message 					SendClientMessage

#define 			GetVehicleName(%0) 			VehicleName[GetVehicleModel(%0)-400]

#define 			PlayerToPoint(%1,%2,%3,%4,%5)  			IsPlayerInRangeOfPoint(%2,%1,%3,%4,%5)
/////////////////////////////////////////////////////////
#define MAX_REPORTS (50)
#define MAX_INVENTORY (120)
#define MAX_HOUSES (750)
#define MAX_HOUSE_STORAGE (50)
#define MAX_BUSINESSES (500)
#define MAX_DROPPED_ITEMS (5000)
#define MAX_ENTRANCES (200)
#define MAX_DEALERSHIP_CARS (40)
#define MAX_DYNAMIC_CARS (1500)
#define MAX_GAS_PUMPS (120)
#define MAX_FURNITURE (2000)
#define MAX_HOUSE_FURNITURE (30)
#define MAX_DYNAMIC_JOBS (25)
#define MAX_CONTACTS (50)
#define MAX_GPS_LOCATIONS (50)
#define MAX_CAR_STORAGE (50)
#define MAX_CRATES (500)
#define MAX_DRUG_PLANTS (200)
#define MAX_FACTIONS (75)
#define MAX_CAIXAS (500)
#define MAX_CAIXAS_VEH (10)
#define MAX_PLAYER_TICKETS (50)
#define MAX_BARRICADES (90)
#define MAX_BOOTHS (8)
#define MAX_GATES (300)
#define MAX_ATM_MACHINES (50)
#define MAX_GARBAGE_BINS (50)
#define MAX_VENDORS (50)
#define MAX_WEAPON_RACKS (500)
#define MAX_LISTED_ITEMS (20)
#define MAX_GRAFFITI_POINTS (20)
#define MAX_METAL_DETECTORS (20)
#define MAX_OWNABLE_CARS (4)
#define MAX_OWNABLE_HOUSES (5)
#define MAX_OWNABLE_BUSINESSES (5)
#define PRISON_WORLD (10000)
#define INVALID_TIMER (-1)
///////////////////////////////////////////
#define EX_SPLITLENGTH 	(118)
#define SCRIPT_CARS 3001
#define flashtime 115
//////////////////////////
#define TYPE_SOLID 0
#define TYPE_BLINK 1
////////////////////////////////////////
#define MAXPLAYERSJFS 100
////////////////////////////////////////



// Enum
enum CDATA{
ActorID,
Text3D:LabelID,
Nome[MAX_PLAYER_NAME],
SkinID,
Soldi,
Interior,
World,
Float:Pos[4]
};

////ROUBO
new gTimerRouboATM[MAX_PLAYERS]; // Timer para cada jogador

//NEON

new NeonTimer[MAX_VEHICLES];
new NeonObject[MAX_VEHICLES];
new SolidNeon2[MAX_VEHICLES];
forward IsNeonActive2(vehicleid);
forward SetNeon(vehicleid, color, type);
forward RemoveNeon(vehicleid);

new firework;

///////////////////////COLDRE//////////////////////////////////////
new Tanoportamalas[MAX_PLAYERS];
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
new check_timer[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new SWATv5 [MAX_PLAYERS];
new ArmaAttached[MAX_PLAYERS] = 0;
new BlindFold[MAX_PLAYERS];
new Text:TDIntro[4];
///////////////////////////////////////////////
new Actors[MAX_PLAYERS];


new PoliceObjects[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS];
new GRPAe[24];
new taxiCars[6];
new mecCars[6];
new pickCars[5];
new garbageCars[4];
new deliveryCars[7];
new vendorCars[2];
new pWeaponHold[MAX_PLAYERS];
new rentCars[12];
new PlayerText:Localidade[MAX_PLAYERS];
//////////////////////////////////////////////////////////////
enum Mandato
{
	MContenido[512],
	MTipo
}
////////////////////////////////////////////////////////////////////
new bateria[MAX_VEHICLES];
new SemBateria[MAX_VEHICLES];
new Mandatos[250][Mandato];
///////////////////////////////////////////////////////////////////
#define BODY_PART_TORSO 3
#define BODY_PART_GROIN 4
#define BODY_PART_LEFT_ARM 5
#define BODY_PART_RIGHT_ARM 6
#define BODY_PART_LEFT_LEG 7
#define BODY_PART_RIGHT_LEG 8
#define BODY_PART_HEAD 9

enum ePlayerInfo
{
    bool:isCrouched,
    bool:isFiring,
         iCrouchTime,
         iLastFire,
         iLastFiring,
         iLastStrafeFire
};
new
    PlayerInfo[ MAX_PLAYERS ][ ePlayerInfo ]
;
new Text3D:deathlabel[MAX_PLAYERS];
//=======================================GPS======================================================================
new Text:Zones[MAX_PLAYERS];
#define MAX_ZONE_NAME 28
enum SAZONE_MAIN { //Betamaster
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]
};
//Defines
#define 	ClearPlayerChat(%0,%1) 		for(new iline = 0; iline != %1; iline++)SendClientMessage(%0, -1, " ")
//Callbacks
forward 	ShowPlayerOptionsTextDraws(playerid);
forward 	PlayerIntroCallback(playerid, type);
forward 	FadeIn( playerid, tip );
forward 	FadeOut( playerid, tip );

/////cameras
enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sVW,
	sPint,
	sLocal,
	sCam,
};
enum pInfo
{
	pMember
};
//new Unspec[MAX_PLAYERS][pSpec];
//Prancheta PMESP
enum Prancheta
{
	PContenido[356],
	PTipo
}
new Pranchetas[150][Prancheta];
//Leys Deputado
enum Leyes
{
	lContenido[256],
	lTipo
}
new Leys[30][Leyes];
enum Boletinho
{
	BContenido[256],
	BTipo
}
new Boletim[100][Boletinho];
new Petition_ID[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new Atacando[MAX_PLAYERS];
new Juzgando[MAX_PLAYERS];
new Defensor[MAX_PLAYERS];
new Defendiendo[MAX_PLAYERS];
new MuteoJ[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new bool:HiddenAdmin[MAX_PLAYERS];
new TruckingCheck[MAX_PLAYERS];
new Text3D:vehicle3Dtext[MAX_VEHICLES];
new vehiclecallsign[MAX_VEHICLES];

enum playerData {
	pID,
	pAccount,
	pLogged,
	pIP[16],
	pLoginDate[36],
	PlayerText:pTextdraws[87],
	pUsername[MAX_PLAYER_NAME + 1],
	pLoginAttempts,
	pCreated,
	pGender,
	pBirthdate[24],
	pOrigin[32],
	pAPRCash,
	pSkin,
	pEditType,
	pGlasses,
	pHat,
	pBandana,
	Float:pPos[4],
	Float:pHealth,
	pInterior,
	pWorld,
	pCharacter,
	pHospital,
	pAlcoholPerk,
	pHospitalInt,
	pHospitalTime,
	pMorteTime,
	pRepairTime,
	pKilled,
	pMoney,
	pCarryingCadaver,
	pBankMoney,
	pOwnsBillboard,
	pSavings,
	pAdmin,
	pShowFooter,
	pFooterTimer,
	pReportTime,
	pHelpTime,
	pSpectator,
	pJailTime,
	pKicked,
	pMuted,
	pDisplayStats,
	pCharacterMenu,
	pToggleGlasses,
	pToggleHat,
	pToggleBandana,
	pToggleArmor,
	pLastShot,
	pShotTime,
	pInventoryItem,
	pStorageItem,
	pStorageSelect,
	pProductModify,
 	pTester,
	pGuns[13],
	pAmmo[13],
	pTutorial,
	pTutorialTime,
	pTutorialStage,
	pTutorialObject,
	pHouse,
	pBusiness,
	pEntrance,
	pDealership,
	pContact,
	pGasPump,
	pGasStation,
	pEditPump,
	pEditFurniture,
	pEditGate,
	pEditRack,
	pSelectFurniture,
	pRefill,
	pRefillPrice,
	pDealerCar,
	pEditingItem[32 char],
	pHouseSeller,
	pHouseOffered,
	pHouseValue,
	pBusinessSeller,
	pBusinessOffered,
	pBusinessValue,
	pCarSeller,
	pCarOffered,
	pCarValue,
	pShakeOffer,
	pShakeType,
	pFriskOffer,
	pFoodSeller,
	pFoodType,
	pFoodPrice,
	pFactionOffer,
	pFactionOffered,
	pHouseLights,
	pPhone,
	pPhoneOff,
	pLottery,
	pLotteryB,
	pHunger,
	pThirst,
	pHungerTime,
	pThirstTime,
	pCooking,
	pCookingTime,
	pCookingHouse,
	pPlayingHours,
	pMinutes,
	Float:pArmorStatus,
	pArmorShown,
	pClothesType,
	pDrivingTest,
	pTestStage,
	pTestCar,
	pTestWarns,
	pFurnitureType,
	pJob,
	pTaxiFee,
	pTaxiTime,
	pTaxiPlayer,
	pTaxiDuty,
	pFirstAid,
	pAidTimer,
	pIncomingCall,
	pCallLine,
	pMining,
	pMineTime,
	pMineCount,
	pMinedRock,
	pCarryTrash,
	pCarryCrate,
	pCrateVehicle,
	pCaixaVehicle,
	pCrafting,
	pOpeningCrate,
	pHarvesting,
	pFaction,
	pFactionID,
	pFactionRank,
	pFactionEdit,
	pSelectedSlot,
	pOnDuty,
	pTazer,
	pBeanBag,
	pStunned,
	pCuffed,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pWarrants,
	pMDCPlayer,
	pTrackTime,
	pCP,
	pPrisoned,
	pInjured,
	pBroadcast,
	pNewsGuest,
	pSpamCount,
	pCommandCount,
	pMuteTime,
	pTransfer,
	pWaypoint,
	pLocation[32],
	Float:pWaypointPos[3],
	pFuelCan,
	pDisableOOC,
	pDisablePM,
	pDisableFaction,
	pDisableTester,
	pDisableBC,
	pDisableSpeedo,
	pNameChange[32],
	pDrugUsed,
	pDrugTime,
	pFingerTime,
	pFingerItem,
	pHealthTime,
	pWeapon,
	pGiveItem,
	pChannel,
	pEmergency,
	pPlaceAd,
	pAdTime,
	pRangeBooth,
	pTargets,
	pTargetLevel,
	pVendorTime,
	pLoopAnim,
	pExecute,
	pBoombox,
	pTakeItems,
	PlayerBar:pDrinkBar,
	pDrinking,
	pDrinkTime,
	pAdvertise[128 char],
	pTaxiCalled,
	pSpeedTime,
	pRobATM,
	pMarker,
	pBleeding,
	pBleedTime,
	pLoadType,
	pLoadCrate,
	pLoading,
	pUnloading,
	pUnloadVehicle,
	pShipment,
	pDeliverShipment,
	pHoldWeapon,
	pUsedMagazine,
	pTask,
	pBankTask,
	pStoreTask,
	pTestTask,
	pWarnings,
 	pWarn1[32],
	pWarn2[32],
	pSorting,
	pSortCrate,
	pTesterDuty,
	pAdminDuty,
	pSeekHelp,
	pHUD,
	pMaskID,
	pMaskOn,
	pHideTags,
	pFactionMod,
	pCapacity,
	pPlayRadio,
	pLeaveTime,
	pLeaveIP[16],
	pNomeOOC[32],
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pAdminHide,
	pDetectorTime,
	pPicking,
	pPickCar,
	pPickTime,
	pJetpack,
	pFreeze,
	pFreezeTimer,
	Text3D:pNameTag,
	pIntimado,
	pCaixa,
	pCaixaID,
    pRentedCar,     // ID do carro alugado
    pRentalTime,    // Tempo restante do aluguel em segundos
 	pSpawnPoint
};

enum inventoryData {
	invExists,
	invID,
	invItem[32 char],
	invModel,
	invQuantity
};

enum cadaverData {
    cadaverExists,
    cadaverActorID,
    Float:cadaverPos[3]
};

enum houseData {
	houseID,
	houseExists,
	houseOwner,
	housePrice,
	houseAddress[32],
	Float:housePos[4],
	Float:houseInt[4],
	houseInterior,
	houseExterior,
	houseExteriorVW,
	houseLocked,
	houseMoney,
	houseMapIcon,
	Text3D:houseText3D,
	housePickup,
	houseLights,
	houseWeapons[10],
	houseAmmo[10]
};
enum houseStorage {
	hItemID,
	hItemExists,
	hItemName[32 char],
	hItemModel,
	hItemQuantity
};

enum businessData {
	bizID,
	bizExists,
 	bizName[32],
	bizMessage[128],
	bizOwner,
	bizType,
	bizPrice,
	Float:bizPos[4],
	Float:bizInt[4],
	Float:bizSpawn[4],
	Float:bizDeliver[3],
	bizInterior,
	bizExterior,
	bizExteriorVW,
	bizLocked,
	bizVault,
	bizProducts,
	bizPickup,
	bizShipment,
	bizPrices[20],
	Text3D:bizText3D,
	Text3D:bizDeliverText3D,
	bizDeliverPickup
};

enum droppedItems {
	droppedID,
	droppedItem[32],
	droppedPlayer[24],
	droppedModel,
	droppedQuantity,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedWorld,
	droppedObject
};

enum entranceData {
	entranceID,
	entranceExists,
	entranceName[32],
	entrancePass[32],
	entranceIcon,
	entranceLocked,
	Float:entrancePos[4],
	Float:entranceInt[4],
	entranceInterior,
	entranceExterior,
	entranceExteriorVW,
	entranceType,
	entranceCustom,
	entranceWorld,
	entranceForklift[7],
	entrancePickup,
	entranceMapIcon,
	Text3D:entranceText3D
};

enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};

enum carData {
	carID,
	carExists,
	carModel,
	carOwner,
	Float:carPos[4],
	carColor1,
	carColor2,
	carPaintjob,
	carLocked,
	carMods[14],
	carImpounded,
	carImpoundPrice,
	carFaction,
	carWeapons[5],
	carAmmo[5],
	carParked,
	Float:carHealth,
	carVehicle
};

enum carStorage {
	cItemID,
	cItemExists,
	cItemName[32 char],
	cItemModel,
	cItemQuantity
};

enum pumpData {
	pumpID,
	pumpExists,
	pumpBusiness,
	Float:pumpPos[4],
	pumpFuel,
	pumpObject,
	Text3D:pumpText3D
};

enum furnitureData {
	furnitureID,
	furnitureHouse,
	furnitureExists,
	furnitureModel,
	furnitureName[32],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furnitureObject
};

enum jobData {
	jobID,
	jobExists,
	jobType,
	Float:jobPos[3],
	Float:jobPoint[3],
	Float:jobDeliver[3],
	jobInterior,
	jobWorld,
	jobPointInt,
	jobPointWorld,
	jobPickups[3],
	Text3D:jobText3D[3]
};

enum contactData {
	contactID,
	contactExists,
	contactName[32],
	contactNumber
};

enum locationData {
	locationID,
	locationExists,
	locationName[32],
	Float:locationPos[3],
};

enum crateData {
	crateID,
	crateExists,
	crateType,
 	Float:cratePos[4],
	crateInterior,
	crateWorld,
	crateObject,
	crateVehicle,
	Text3D:crateText3D
};

enum plantData {
	plantID,
	plantExists,
	plantType,
	plantDrugs,
	Float:plantPos[4],
	plantInterior,
	plantWorld,
	plantObject,
	Text3D:plantText3D
};

enum factionData {
	factionID,
	factionExists,
	factionName[32],
	factionColor,
	factionType,
	factionRanks,
	Float:factionLockerPos[3],
	factionLockerInt,
	factionLockerWorld,
	factionSkins[8],
	factionWeapons[10],
	factionAmmo[10],
	Text3D:factionText3D,
	factionPickup,
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	SpawnInterior,
	SpawnVW
};

enum prisonData {
	prisonDoors[3],
	prisonCells[24],
	prisonDoorOpened[3],
	prisonCellOpened[24]
};

enum ticketData {
	ticketID,
	ticketExists,
	ticketFee,
	ticketDate[36],
	ticketReason[64]
};

enum barricadeData {
	cadeExists,
	cadeType,
	Float:cadePos[3],
	cadeObject
};

enum caixaData {
	caixaExists,
	caixaType,
	Float:caixaPos[3],
	caixaVehicle,
	caixaObject
};

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};

enum atmData {
	atmID,
	atmExists,
	Float:atmPos[4],
	atmInterior,
	atmDinheiro,
	atmWorld,
	atmObject,
	atmDinamiteObject,
	atmDanificado,
	Text3D:atmText3D
};

enum caixaVeiculoData {
    veiculoID,
    caixasCarregadas[MAX_CAIXAS_VEH]
};

enum garbageData {
	garbageID,
	garbageExists,
 	garbageModel,
	garbageCapacity,
	Float:garbagePos[4],
	garbageInterior,
	garbageWorld,
	Text3D:garbageText3D,
	garbageObject
};

enum vendorData {
    vendorID,
    vendorExists,
    vendorType,
    vendorOwner[24],
    vendorMoney,
    Float:vendorPos[4],
    vendorInterior,
    vendorWorld,
    Text3D:vendorText3D,
    vendorObject
};

enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};

enum rackData {
	rackID,
	rackExists,
	rackHouse,
	Float:rackPos[4],
	rackInterior,
	rackWorld,
	rackWeapons[4],
	rackAmmo[4],
	rackObjects[5],
	Text3D:rackText3D
};

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};

enum detectorData {
	detectorID,
	detectorExists,
	Float:detectorPos[4],
	detectorInterior,
	detectorWorld,
	detectorObject[2]
};

new g_iHandle;
new g_StatusOOC;
new g_TaxVault;
new g_ServerLocked;
new Text:gServerTextdraws[4];

new BancoCentral_Dinheiro;

new g_ServerRestart;
new g_RestartTime;
new g_BoothUsed[MAX_BOOTHS];
new g_BoothObject[MAX_BOOTHS] = {-1, ...};

new g_aFireObjects[36] = {INVALID_OBJECT_ID, ...};
new g_aFireExtinguished[36];

new PrisonData[prisonData];
new Float:PrisonCells[24][3];

new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
new MetalDetectors[MAX_METAL_DETECTORS][detectorData];
new BarricadeData[MAX_BARRICADES][barricadeData];

new CaixaData[MAX_CAIXAS][caixaData];

new VendorData[MAX_VENDORS][vendorData];

new BoomboxData[MAX_PLAYERS][boomboxData];
new RackData[MAX_WEAPON_RACKS][rackData];

new ATMData[MAX_ATM_MACHINES][atmData];

new CaixaVeiculoData[MAX_VEHICLES][caixaVeiculoData];

new GarbageData[MAX_GARBAGE_BINS][garbageData];

new PlayerData[MAX_PLAYERS][playerData];
new Float:AccessoryData[MAX_PLAYERS][3][9];
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS];

new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];
new ContactData[MAX_PLAYERS][MAX_CONTACTS][contactData];
new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];

new ListedFurniture[MAX_PLAYERS][MAX_HOUSE_FURNITURE];
new NearestItems[MAX_PLAYERS][MAX_LISTED_ITEMS];
new ListedContacts[MAX_PLAYERS][MAX_CONTACTS];

new BusinessData[MAX_BUSINESSES][businessData];
new PumpData[MAX_GAS_PUMPS][pumpData];
new DealershipCars[MAX_BUSINESSES][MAX_DEALERSHIP_CARS][dealershipCars];

new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];
new EntranceData[MAX_ENTRANCES][entranceData];

new CarData[MAX_DYNAMIC_CARS][carData];
new CarStorage[MAX_DYNAMIC_CARS][MAX_CAR_STORAGE][carStorage];

new HouseData[MAX_HOUSES][houseData];
new HouseStorage[MAX_HOUSES][MAX_HOUSE_STORAGE][houseStorage];
new FurnitureData[MAX_FURNITURE][furnitureData];

new JobData[MAX_DYNAMIC_JOBS][jobData];
new CrateData[MAX_CRATES][crateData];
new PlantData[MAX_DRUG_PLANTS][plantData];

new FactionData[MAX_FACTIONS][factionData];
new FactionRanks[MAX_FACTIONS][20][32];
new GateData[MAX_GATES][gateData];


new PlayerCharacters[MAX_PLAYERS][3][MAX_PLAYER_NAME + 1];// MUDAR PARA 3 O PRIMEIRO

enum E_SHOT_INFO
{
	 Chest,
	 Crotch,
	 LArm,
	 RArm,
	 LLeg,
	 RLeg,
	 Head,
	 Misc
}

new sInfo[MAX_PLAYERS][E_SHOT_INFO];

enum coreVehicles {
	vehFuel,
	vehWindowsDown,
	vehTemporary,
	vehLoads,
	vehLoadType,
	vehCrate,
	vehTrash,
	vehRepairing,
	vehSirenOn,
	vehSirenObject,
	vehRadio,
	vehURL[128 char],
	Float:vehLoadHealth,
 	Float:vehLoadPos[3]
};/// alerta re
/////////////////////////// SIRENE AUDIO ///////////////////
stock SoundInRange(soundid, Float:range, Float:x, Float:y, Float:z)
{
	foreach(Player, p)
	{
	    if(IsPlayerInRangeOfPoint(p, range, x, y, z))
	        PlayerPlaySound(p, soundid, x, y, z);
	}
}
stock IsVehicleDrivingBackwards(vehicleid)
{
    new
        Float:Float[3]
    ;
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90)
        {
            if(Float[1] > 0 && Float[2] < 0) return true;
        }
        else if(Float[0] < 180)
        {
            if(Float[1] > 0 && Float[2] > 0) return true;
        }
        else if(Float[0] < 270)
        {
            if(Float[1] < 0 && Float[2] > 0) return true;
        }
        else if(Float[1] < 0 && Float[2] < 0) return true;
    }
    return false;
}
stock IsAAlerta(vehicleid)
{
    new result;
    new model = GetVehicleModel(vehicleid);
    switch(model)
    {
        case 403, 406, 408, 414 ,428 ,431 ,433 ,437 ,443 ,455 ,456 ,499 ,508 ,514 ,515 ,524 ,525 ,531 ,544 ,552 ,578 ,601: result = model;
        default: result = 0;
    }
    return result;
}
AlertaRe(playerid)
{
    new bool:engine, bool:lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;
    new vehicleid = GetPlayerVehicleID(playerid);
    if(GetPlayerVehicleSeat(playerid) == 0)
    {
        if(IsAAlerta(vehicleid))
        {
            GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
            if(IsVehicleDrivingBackwards(vehicleid))
            {
                SetVehicleParamsEx(vehicleid, engine, lights, true, doors, bonnet, boot, objective);
            }
            else
            {
                SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
            }
        }
    }
    return 1;
}
stock getVehicleName(vehicleid)
{
        new vehmodel = GetVehicleModel(vehicleid);
        new nameVeh[75];

        if (vehmodel < 400 || vehmodel > 611) {
                strcat(nameVeh, "Sem Marca");
                return nameVeh;
        }
        strcat(nameVeh, VehicleNames[vehmodel - 400]);
        return nameVeh;
}


stock GetNameEx(playerid)
{
	new pName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, pName, sizeof(pName));
	strreplace(pName, '_', ' ');
	return pName;
}
stock strreplace(string[], find, replace)
{
    for(new i=0; string[i]; i++)
	{
        if(string[i] == find)
		{
            string[i] = replace;
        }
    }
}
////////////////////////////////////////////////////////////////////
stock IsPlayerNearTrunk(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleTrunk(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock GetVehicleTrunk(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] - pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] - pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

new CoreVehicles[MAX_VEHICLES][coreVehicles];

stock const g_aWeatherRotations[] = {
	14, 1, 7, 3, 5, 12, 9, 8, 15
};

enum e_InventoryItems {
	e_InventoryItem[32],
	e_InventoryModel
};

static const g_aInventoryItems[][e_InventoryItems] = {
	{"Maconha", 1578},
	{"Cocaina", 1575},
	{"Maconha Seeds", 1578},
	{"Cocaina Seeds", 1575},
	{"Golf Club", 333},
	{"Faca", 335},
	{"Pa", 337},
	{"Katana", 339},
	{"Colt 45", 346},
	{"Desert Eagle", 348},
	{"Micro SMG", 352},
	{"Tec-9", 372},
	{"MP5", 353},
	{"Shotgun", 349},
	{"AK-47", 355},
	{"M4", 356},
	{"Rifle", 357},
	{"Kit Desmanche", 19627},
	{"Pneus", 1080},
	{"Hamburguer Cozido", 2703},
	{"Pizza Cozida", 2702},
	{"Carta de Conducao", 1581},
	{"Porte de Armas", 1581},
	{"Telefone", 330},
	{"Sistema de GPS", 18875},
	{"Spray", 365},
	{"Guarrafa de Agua", 2958},
	{"Guarrafa de Refrigerante", 1543},
    {"Lata de Gasolina", 1650},
	{"Pe de Cabra", 18634},
	{"Boombox", 2226},
	{"Mascara", 19036},
	{"Primeiros Socorros", 11738},
	{"Ferramentas", 19624},
	{"Nitrogenio", 1010},
	{"Pizza Congelada", 2814},
	{"Hamburguer Congelado", 2768},
	{"Municao", 2358},
	{"Colete", 19142},
	{"Garrafa Vazia", 1484},
	{"Cartao", 928},
	{"Hamburguer de Frango", 2663},
	{"Bateria", 1252},
	{"Mochila De Grana", 1550},
	{"Mixa", 19627},
	{"Radio Portatil", 18868},
	{"Escritura", 1581},
	{"Bateria", 1252},
	{"Docempresa", 1581},
	{"CRLV", 1581},
	{"Prancheta", 19894},
	{"Escudo", 18637},
	{"Funcional", 19347},
	{"Distintivo", 19347},
	{"Barra de Ouro", 1577},
	{"Licenca Aerea", 1581},
	{"TeleCartao", 19792},
	{"Dinamite", 1654},
	{"Cerveja", 19822},
	{"pinga", 2958},
	{"whisky", 1667},
	{"vodka", 1668},
	{"Absinto", 1544},
	{"Mandato", 1581},
	{"sementecafe", 1578},
	{"sementemilho", 1575},
	{"sementesoja", 1575},
	{"porteilegal", 1581},
	{"carsystem", 18875},
	{"RG", 1581},
	{"Contrato", 1581}
};

new const Float:arrHospitalDeliver[8][5] = {
    {-2692.6580, 635.4608, 14.4531},
    {-334.9757, 1063.0171, 19.7392},
	{1579.9666, 1767.1462, 10.8203},
	{2038.7500, -1382.6254, 49.1526},//
    {1162.5162, -1360.9196, 27.2702},//
	{1177.8599, -1308.3982, 13.8301},
	{2024.4246, -1404.1580, 17.2020},
	{1243.9304, 331.4186, 19.5547}
};

new const Float:arrHospitalSpawns[][] = {
	{1175.9951, -1331.0658, 2424.1016, 1.7260},
	{1183.3309, -1330.8960, 2424.1016, 1.5640}
};

new const Float:g_arrWeaponDamage[] = {
	1.32, 1.32, 4.62, 4.62, 2.64, 4.62, 4.62, 4.62, 2.64, 13.53,
	4.62, 2.64, 4.62, 2.64, 4.62, 2.64, 0.00, 0.00, 0.00, 0.00,
	0.00, 0.00, 8.25, 13.2, 46.2, 49.5, 49.5, 39.6, 6.60, 8.25,
	9.90, 9.90, 6.60, 24.75, 41.25, 0.00, 0.00, 0.00, 46.2, 0.00,
	0.00, 2.64, 2.64, 0.00, 0.00, 0.00, 1.32
};

new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

new const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

enum houseInteriors {
	eHouseInterior,
	Float:eHouseX,
	Float:eHouseY,
	Float:eHouseZ,
	Float:eHouseAngle
};

new const Float:arrHouseInteriors[20][houseInteriors] = {
	{10, 2269.8772, -1210.3240, 1047.5625, 90.0000},
    {2, 2468.2576, -1698.2361, 1013.5078, 90.0000},
	{3, 2495.8711, -1693.0996, 1014.7422, 180.0000},
	{5, 2233.7888, -1114.2689, 1050.8828, 0.0000},
	{9, 2317.8015, -1026.2113, 1050.2178, 0.0000},
	{3, 235.2923, 1187.3684, 1080.2578, 0.0000},
	{2, 226.2912, 1240.0554, 1082.1406, 90.0000},
	{1, 223.1618, 1287.5175, 1082.1406, 0.0000},
	{5, 226.9281, 1114.2813, 1080.9962, 270.0000},
	{15, 295.1485, 1473.1080, 1080.2578, 0.0000},
	{10, 23.9584, 1340.6075, 1084.3750, 0.0000},
	{4, 222.0425, 1140.7565, 1082.6094, 0.0000},
	{12, 2324.4209, -1148.9365, 1050.7101, 0.0000},
	{4, -261.1430, 1456.6396, 1084.3672, 90.0000},
	{5, 22.9676, 1403.8368, 1084.4297, 0.0000},
	{5, 140.3088, 1366.8196, 1083.8594, 0.0000},
	{6, 234.3149, 1064.2772, 1084.2114, 0.0000},
	{7, 225.7000, 1022.0012, 1084.0161, 0.0000},
	{5, 1298.9750, -796.4567, 1084.0078, 0.0000},
	{15, -283.8687, 1471.1174, 1084.3750, 90.0000}
};

new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
	{300.5000, -137.0286, 1004.0625},
	{300.5000, -135.5336, 1004.0625},
	{300.5000, -134.0436, 1004.0625},
	{300.5000, -132.5637, 1004.0625},
	{300.5000, -131.0782, 1004.0625},
	{300.5000, -129.5582, 1004.0625},
	{300.5000, -128.0786, 1004.0625}
};

new stock g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

enum e_InteriorData {
	e_InteriorName[32],
	e_InteriorID,
	Float:e_InteriorX,
	Float:e_InteriorY,
	Float:e_InteriorZ
};

new const g_arrInteriorData[][e_InteriorData] = {
	{"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Airport Ticket", 14, -1827.147338, 7.207417, 1061.143554},
    {"Airport Baggage", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Ammunation Booths", 7, 302.292877, -143.139099, 1004.062500},
    {"Ammunation Range", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Budget Inn Motel Room", 12, 444.646911, 508.239044, 1001.419494},
    {"Jefferson Motel", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Off Track Betting Shop", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Meat Factory", 1, 963.418762, 2108.292480, 1011.030273},
    {"Zero RC shop", 6, -2240.468505, 137.060440, 1035.414062},
    {"Dillimore Gas", 0, 663.836242, -575.605407, 16.343263},
    {"Catigula Basement", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Woozie Office", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Denise Room", 1, 244.411987, 305.032989, 999.148437},
    {"Katie Room", 2, 271.884979, 306.631988, 999.148437},
    {"Helena Room", 3, 291.282989, 310.031982, 999.148437},
    {"Michelle Room", 4, 302.180999, 300.722991, 999.148437},
    {"Barbara Room", 5, 322.197998, 302.497985, 999.148437},
    {"Millie Room", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"Driving School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"Complexo", 18, 74.1605, 1697.4565, 7.9},
    {"Apartamentos", 18, 168.3851, 2490.5510, -88.9141},
    {"Policia Militar", 18, 351.9300, 91.7900, 1013.9200},
    {"Policia Civil", 18, 1474.0437,-1751.1372,3285.2859},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};

new const Float:g_arrPrisonSpawns[][] = {
	{6382.0161,544.7939,993.4363,232.5136},
    {6384.5996,547.8517,993.4363,234.0957},
    {6387.0718,551.0646,993.4437,232.6020},
    {6387.8613,539.5229,993.4363,310.9126}
};

new g_aMaleSkins[185] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new g_aFemaleSkins[81] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298, 306, 307, 308, 309
};

enum e_FurnitureData {
	e_FurnitureType,
	e_FurnitureName[32],
	e_FurnitureModel
};

static const g_aFurnitureTypes[][] = {
	{"Quadros"},
	{"Mesas"},
	{"Cadeiras"},
	{"Camas"},
	{"Estantes"},
	{"Eletrodoméstico"},
	{"Cozinha"},
	{"Banheiro"},
	{"Adornos"}
};

static const g_aFurnitureData[][e_FurnitureData] = {
	{1, "Quadro 1", 2289}, {1, "Quadro 2", 2288}, {1, "Quadro 3", 2287}, {1, "Quadro 4", 2286},
	{1, "Quadro 5", 2285}, {1, "Quadro 6", 2284}, {1, "Quadro 7", 2283}, {1, "Quadro 8", 2282},
    {1, "Quadro 9", 2281}, {1, "Quadro 10", 2280}, {1, "Quadro 11", 2279}, {1, "Quadro 12", 2278},
	{1, "Quadro 13", 2277}, {1, "Quadro 14", 2276}, {1, "Quadro 15", 2275}, {1, "Quadro 16", 2274},
    {1, "Quadro 17", 2273}, {1, "Quadro 18", 2272}, {1, "Quadro 19", 2271}, {1, "Quadro 20", 2270},
    {2, "Mesa 1", 1433}, {2, "Mesa 2", 1998}, {2, "Mesa 3", 2008}, {2, "Mesa 4", 2180},
	{2, "Mesa 5", 2185}, {2, "Mesa 6", 2205}, {2, "Mesa 7", 2314}, {2, "Mesa 8", 2635},
    {2, "Mesa 9", 2637}, {2, "Mesa 10", 2644}, {2, "Mesa 11", 2747}, {2, "Mesa 12", 2764},
	{2, "Mesa 13", 2763},
	{2, "Mesa 14", 2762},
	{2, "Mesa 15", 936},
	{2, "Mesa 16", 937},
	{2, "Mesa 17", 941},
	{2, "Mesa 18", 2115},
	{2, "Mesa 19", 2116},
	{2, "Mesa 20", 2112},
	{2, "Mesa 21", 2111},
	{2, "Mesa 22", 2110},
	{2, "Mesa 23", 2109},
	{2, "Mesa 24", 2085},
	{2, "Mesa 25", 2032},
	{2, "Mesa 26", 2031},
	{2, "Mesa 27", 2030},
	{2, "Mesa 28", 2029},
    {3, "Cadeira 1", 1671},
    {3, "Cadeira 2", 1704},
    {3, "Cadeira 3", 1705},
    {3, "Cadeira 4", 1708},
    {3, "Cadeira 5", 1711},
    {3, "Cadeira 6", 1715},
    {3, "Cadeira 7", 1721},
    {3, "Cadeira 8", 1724},
    {3, "Cadeira 9", 1727},
    {3, "Cadeira 10", 1729},
    {3, "Cadeira 11", 1735},
    {3, "Cadeira 12", 1739},
    {3, "Cadeira 13", 1805},
    {3, "Cadeira 14", 1806},
    {3, "Cadeira 15", 1810},
    {3, "Cadeira 16", 1811},
    {3, "Cadeira 17", 2079},
    {3, "Cadeira 18", 2120},
    {3, "Cadeira 19", 2124},
    {3, "Cadeira 20", 2356},
    {3, "Cadeira 21", 1768},
    {3, "Cadeira 22", 1766},
    {3, "Cadeira 23", 1764},
    {3, "Cadeira 24", 1763},
    {3, "Cadeira 25", 1761},
    {3, "Cadeira 26", 1760},
    {3, "Cadeira 27", 1757},
    {3, "Cadeira 28", 1756},
    {3, "Cadeira 29", 1753},
    {3, "Cadeira 30", 1713},
    {3, "Cadeira 31", 1712},
    {3, "Cadeira 32", 1706},
    {3, "Cadeira 33", 1703},
    {3, "Cadeira 34", 1702},
    {3, "Cadeira 35", 1754},
    {3, "Cadeira 36", 1755},
    {3, "Cadeira 37", 1758},
    {3, "Cadeira 38", 1759},
    {3, "Cadeira 39", 1762},
    {3, "Cadeira 40", 1765},
    {3, "Cadeira 41", 1767},
    {3, "Cadeira 42", 1769},
	{4, "Cama 1", 1700},
	{4, "Cama 2", 1701},
	{4, "Cama 3", 1725},
	{4, "Cama 4", 1745},
	{4, "Cama 5", 1793},
	{4, "Cama 6", 1794},
	{4, "Cama 7", 1795},
	{4, "Cama 8", 1796},
	{4, "Cama 9", 1797},
	{4, "Cama 10", 1771},
	{4, "Cama 11", 1798},
	{4, "Cama 12", 1799},
    {4, "Cama 13", 1800},
    {4, "Cama 14", 1801},
    {4, "Cama 15", 1802},
    {4, "Cama 16", 1812},
    {4, "Cama 17", 2090},
    {4, "Cama 18", 2299},
    {5, "Estante 1", 1416},
	{5, "Estante 2", 1417},
	{5, "Estante 3", 1741},
	{5, "Estante 4", 1742},
	{5, "Estante 5", 1743},
	{5, "Estante 6", 2025},
	{5, "Estante 7", 2065},
	{5, "Estante 8", 2066},
	{5, "Estante 9", 2067},
	{5, "Estante 10", 2087},
    {5, "Estante 11", 2088},
    {5, "Estante 12", 2094},
    {5, "Estante 13", 2095},
    {5, "Estante 14", 2306},
    {5, "Estante 15", 2307},
	{5, "Estante 16", 2323},
	{5, "Estante 17", 2328},
	{5, "Estante 18", 2329},
	{5, "Estante 19", 2330},
	{5, "Estante 20", 2708},
	{6, "Televisao 1", 1518},
	{6, "Televisao 2", 1717},
	{6, "Televisao 3", 1747},
	{6, "Televisao 4", 1748},
	{6, "Televisao 5", 1749},
	{6, "Televisao 6", 1750},
	{6, "Televisao 7", 1752},
	{6, "Televisao 8", 1781},
	{6, "Televisao 9", 1791},
	{6, "Televisao 10", 1792},
    {6, "Televisao 11", 2312},
	{6, "Televisao 12", 2316},
	{6, "Televisao 13", 2317},
	{6, "Televisao 14", 2318},
	{6, "Televisao 15", 2320},
	{6, "Televisao 16", 2595},
	{6, "Televisao 17", 16377},
	{7, "Cozinha 1", 2013},
	{7, "Cozinha 2", 2017},
	{7, "Cozinha 3", 2127},
	{7, "Cozinha 4", 2130},
	{7, "Cozinha 5", 2131},
	{7, "Cozinha 6", 2132},
	{7, "Cozinha 7", 2135},
	{7, "Cozinha 8", 2136},
	{7, "Cozinha 9", 2144},
	{7, "Cozinha 10", 2147},
    {7, "Cozinha 11", 2149},
    {7, "Cozinha 12", 2150},
    {7, "Cozinha 13", 2415},
    {7, "Cozinha 14", 2417},
    {7, "Cozinha 15", 2421},
    {7, "Cozinha 16", 2426},
    {7, "Cozinha 17", 2014},
    {7, "Cozinha 18", 2015},
    {7, "Cozinha 19", 2016},
    {7, "Cozinha 20", 2018},
    {7, "Cozinha 21", 2019},
    {7, "Cozinha 22", 2022},
    {7, "Cozinha 23", 2133},
    {7, "Cozinha 24", 2134},
	{7, "Cozinha 25", 2137},
	{7, "Cozinha 26", 2138},
	{7, "Cozinha 27", 2139},
	{7, "Cozinha 28", 2140},
	{7, "Cozinha 29", 2141},
	{7, "Cozinha 30", 2142},
	{7, "Cozinha 31", 2143},
	{7, "Cozinha 32", 2145},
	{7, "Cozinha 33", 2148},
	{7, "Cozinha 34", 2151},
	{7, "Cozinha 35", 2152},
	{7, "Cozinha 36", 2153},
	{7, "Cozinha 37", 2154},
	{7, "Cozinha 38", 2155},
	{7, "Cozinha 39", 2156},
	{7, "Cozinha 40", 2157},
	{7, "Cozinha 41", 2158},
	{7, "Cozinha 42", 2159},
	{7, "Cozinha 43", 2160},
	{7, "Cozinha 44", 2134},
	{7, "Cozinha 45", 2135},
	{7, "Cozinha 46", 2338},
	{7, "Cozinha 47", 2341},
	{8, "Banheiro 1", 2514},
	{8, "Banheiro 2", 2516},
	{8, "Banheiro 3", 2517},
	{8, "Banheiro 4", 2518},
	{8, "Banheiro 5", 2520},
	{8, "Banheiro 6", 2521},
	{8, "Banheiro 7", 2522},
	{8, "Banheiro 8", 2523},
	{8, "Banheiro 9", 2524},
	{8, "Banheiro 10", 2525},
    {8, "Banheiro 11", 2526},
    {8, "Banheiro 12", 2527},
    {8, "Banheiro 13", 2528},
    {8, "Banheiro 14", 2738},
    {8, "Banheiro 15", 2739},
	{9, "Lavanderia", 1208},
	{9, "Ventilador", 1661},
	{9, "Cabeca", 1736},
	{9, "Radiador", 1738},
	{9, "Limpeza", 1778},
	{9, "Enfriador", 1808},
	{9, "Enfriador 2", 2002},
	{9, "Cofre", 1829},
	{9, "Impresora", 2186},
	{9, "PC", 2190},
	{9, "Roda", 2627},
	{9, "Banco", 2629},
	{9, "Bicicleta *Estática*", 2630},
	{9, "Mat 1", 2631},
	{9, "Mat 2", 2632},
	{9, "Mat 3", 2817},
	{9, "Mat 4", 2818},
	{9, "Mat 5", 2833},
	{9, "Mat 6", 2834},
	{9, "Mat 7", 2835},
	{9, "Mat 8", 2836},
	{9, "Mat 9", 2841},
	{9, "Mat 10", 2842},
	{9, "Mat 11", 2847},
	{9, "Livro 1", 2824},
	{9, "Livro 2", 2826},
	{9, "Livro 3", 2827},
	{9, "Bola", 2114},
	{9, "Lámpara 1", 2108},
	{9, "Lámpara 2", 2106},
	{9, "Lámpara 3", 2069},
	{9, "Vestidor 1", 2569},
	{9, "Vestidor 2", 2570},
	{9, "Vestidor 3", 2573},
	{9, "Vestidor 4", 2574},
	{9, "Vestidor 5", 2576},
	{9, "Livro", 2894}
};

native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);

main() {
	print("Max Miami Roleplay");
}

SQL_Connect() {
	g_iHandle = mysql_connect(SQL_HOSTNAME, SQL_USERNAME, SQL_DATABASE, SQL_PASSWORD);

	if (mysql_errno(g_iHandle) != 0) {
	    printf("[SQL] Conexao para \"%s\" falhou! Verifique as configurações de conexão...\a", SQL_HOSTNAME);
	}
	else {
		printf("[SQL] Conexao para \"%s\" autorizada com sucesso!", SQL_HOSTNAME);
	}
}

SQL_CreateAccount(const username[], const password[])
{
	new
	    query[512],
	    buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "INSERT INTO `accounts` (`Username`, `Password`, `RegisterDate`, `LoginDate`) VALUES('%s', '%s', '%s', '%s')", username, buffer, ReturnDate(), ReturnDate());
	mysql_tquery(g_iHandle, query);
}

SQL_CheckAccount(playerid)
{
	new
	    query[128];

    format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", ReturnName(playerid));
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_FIND_USERNAME);
}

SQL_AttemptLogin(playerid, const password[])
{
	new
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
}

stock SQL_IsLogged(playerid) {
	return (PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] > 0);
}
stock Float:cache_get_field_float(row, const field_name[])
{
	new
	    str[16];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return floatstr(str);
}

stock ViewFactions(playerid)
{
	new string[1640];
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
 		format(string, sizeof(string), "%s{FFFFFF}Faccao ({FFBF00}%i{FFFFFF}) | %s\n", string, i, FactionData[i][factionName]);
	}
	Dialog_Show(playerid, FactionsList, DIALOG_STYLE_MSGBOX, "Lista de Faccoes", string, "Fechar", "");
	return 1;
}
stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, g_iHandle);
	return entry;
}

SQL_SaveCharacter(playerid)
{
	if (!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter])
		return 0;

	new
	    query[2048];

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	    GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

	    if (!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
	        PlayerData[playerid][pHealth] = 100.0;
		}
		if (PlayerData[playerid][pRangeBooth] == -1) {
			UpdateWeapons(playerid);
		}
	}
	format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Origin` = '%s', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `Savings` = '%d', `Admin` = '%d', `JailTime` = '%d', `Muted` = '%d', `Tester` = '%d', `EmTrabalho` = '%d'",
    	PlayerData[playerid][pCreated],
    	PlayerData[playerid][pGender],
    	PlayerData[playerid][pBirthdate],
    	PlayerData[playerid][pOrigin],
    	PlayerData[playerid][pSkin],
    	PlayerData[playerid][pPos][0],
    	PlayerData[playerid][pPos][1],
    	PlayerData[playerid][pPos][2],
    	PlayerData[playerid][pPos][3],
    	PlayerData[playerid][pHealth],
    	PlayerData[playerid][pInterior],
    	PlayerData[playerid][pWorld],
    	PlayerData[playerid][pHospital],
    	PlayerData[playerid][pHospitalInt],
    	PlayerData[playerid][pMoney],
    	PlayerData[playerid][pBankMoney],
    	PlayerData[playerid][pOwnsBillboard],
    	PlayerData[playerid][pSavings],
    	PlayerData[playerid][pAdmin],
    	PlayerData[playerid][pJailTime],
    	PlayerData[playerid][pMuted],
    	PlayerData[playerid][pTester],
    	PlayerData[playerid][pOnDuty]
	);
	
	
	for (new i = 0; i < 13; i ++) {
		format(query, sizeof(query), "%s, `Gun%d` = '%d', `Ammo%d` = '%d'", query, i + 1, PlayerData[playerid][pGuns][i], i + 1, PlayerData[playerid][pAmmo][i]);
	}
	format(query, sizeof(query), "%s, `House` = '%d', `Business` = '%d', `Entrance` = '%d', `Phone` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `Hunger` = '%d', `Thirst` = '%d', `PlayingHours` = '%d', `Minutes` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d', `Faction` = '%d', `FactionRank` = '%d', `Prisoned` = '%d', `Injured` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `AdminHide` = '%d', `SpawnPoint` = '%d'",
		query,
		PlayerData[playerid][pHouse],
		PlayerData[playerid][pBusiness],
		PlayerData[playerid][pEntrance],
		PlayerData[playerid][pPhone],
		PlayerData[playerid][pLottery],
		PlayerData[playerid][pLotteryB],
		PlayerData[playerid][pHunger],
		PlayerData[playerid][pThirst],
		PlayerData[playerid][pPlayingHours],
		PlayerData[playerid][pMinutes],
		PlayerData[playerid][pArmorStatus],
		PlayerData[playerid][pJob],
		PlayerData[playerid][pFactionID],
		PlayerData[playerid][pFactionRank],
		PlayerData[playerid][pPrisoned],
		PlayerData[playerid][pInjured],
		PlayerData[playerid][pWarrants],
		PlayerData[playerid][pChannel],
		PlayerData[playerid][pBleeding],
		PlayerData[playerid][pAdminHide],
		PlayerData[playerid][pSpawnPoint]
	);
	format(query, sizeof(query), "%s, `Warnings` = '%d', `Warn1` = '%s', `Warn2` = '%s', `MaskID` = '%d', `FactionMod` = '%d', `Capacity` = '%d' WHERE `ID` = '%d'",
	    query,
	    PlayerData[playerid][pWarnings],
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn1]),
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn2]),
	    PlayerData[playerid][pMaskID],
	    PlayerData[playerid][pFactionMod],
	    PlayerData[playerid][pCapacity],
	    PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);

	SQL_SaveAccessories(playerid);
	return 1;
}

SQL_SaveAccessories(playerid)
{
    if (!PlayerData[playerid][pLogged])
		return 0;

	new
	    query[768];

    format(query, sizeof(query), "UPDATE `characters` SET `Glasses` = '%d', `Hat` = '%d', `Bandana` = '%d', `GlassesPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    PlayerData[playerid][pGlasses],
	    PlayerData[playerid][pHat],
	    PlayerData[playerid][pBandana],
		AccessoryData[playerid][0][0],
        AccessoryData[playerid][0][1],
        AccessoryData[playerid][0][2],
        AccessoryData[playerid][0][3],
        AccessoryData[playerid][0][4],
        AccessoryData[playerid][0][5],
        AccessoryData[playerid][0][6],
        AccessoryData[playerid][0][7],
        AccessoryData[playerid][0][8]
	);
    format(query, sizeof(query), "%s, `HatPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
        query,
		AccessoryData[playerid][1][0],
        AccessoryData[playerid][1][1],
        AccessoryData[playerid][1][2],
        AccessoryData[playerid][1][3],
        AccessoryData[playerid][1][4],
        AccessoryData[playerid][1][5],
        AccessoryData[playerid][1][6],
        AccessoryData[playerid][1][7],
        AccessoryData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `BandanaPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	    query,
		AccessoryData[playerid][2][0],
        AccessoryData[playerid][2][1],
        AccessoryData[playerid][2][2],
        AccessoryData[playerid][2][3],
        AccessoryData[playerid][2][4],
        AccessoryData[playerid][2][5],
        AccessoryData[playerid][2][6],
        AccessoryData[playerid][2][7],
        AccessoryData[playerid][2][8],
        PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);
	return 1;
}


stock GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
     if(!success)
     {
     	SendClientMessage(playerid, COLOR_RED, "Você digitou um comando inválido. /ajuda");
        return 1;
     }
     return 1;
}
forward OnJailAccount(index);
public OnJailAccount(index)
{
	new
		string[128],
		name[24],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	GetPVarString(index, "OnJailAccount", name, 24);

	if(cache_affected_rows(g_iHandle)) {
		format(string, sizeof(string), "Você prendeu com sucesso %s.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

	}
	else {
		format(string, sizeof(string), "Houve um problema com Detenção de %s.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");

	return 1;
}
GetModelHold(playerid) {
    new weapon;
    switch(pWeaponHold[playerid])
    {
        case 22: weapon = 346;
        case 23: weapon = 347;
        case 24: weapon = 348;
        case 25: weapon = 349;
        case 27: weapon = 351;
        case 29: weapon = 353;
        case 30: weapon = 355;
        case 31: weapon = 356;
    }
    return weapon;
}
forward CheckArmaC();
public CheckArmaC()
{
    foreach(new i: Player)
    {
        if(pWeaponHold[i] && GetPlayerWeapon(i) != pWeaponHold[i])
        {
            switch(pWeaponHold[i])
            {
                case 25: SetPlayerAttachedObject(i, 4, GetModelHold(i), 1, 0.2049, 0.2430, -0.1359, -176.0000, 160.1999, 6.5998);
                case 27, 29, 30, 31, 33, 34: SetPlayerAttachedObject(i, 4, GetModelHold(i), 1, 0.1298, 0.2230, -0.1500, 5.0998, 23.8999, -177.4998);
            }
        }
        //else RemovePlayerAttachedObject(i, 4);
    }
    return 1;
}
forward TextDrawUpdate(playerid);
public TextDrawUpdate(playerid)
{
    new i = playerid,
    Str[138];
	format(Str, sizeof(Str), "~w~GPS: %s", GetPlayerLocation(i));
	PlayerTextDrawSetString(i, Localidade[i], Str);
	return 1;
}

#define DIALOG_MAIN 1000
#define DIALOG_CARS 1001
#define DIALOG_PREVIEW 1003
#define DIALOG_CONFIRM 1002
#define DIALOG_COLOR_SELECT 1005
#define BUFFALO_MODEL_ID 402
#define ALPHA_MODEL_ID 602
#define PRICE_BUFFALO 5000
#define PRICE_ALPHA 50000

new previewVehicleID[MAX_PLAYERS];
new const VehicleColorIDs[] = {0, 1, 2, 3, 6, 30, 35, 128, 136, 222};
new CurrentColorIndex[MAX_PLAYERS];



///////////////////////////////
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
        if (response) { // Se o jogador selecionou "Selecionar"
        switch (dialogid) {
            case DIALOG_MAIN: {
                if (listitem == 0) { // Motos e bikes selecionado
                    // Mostrar dialog de motos e bikes (implementação pendente)
                } else if (listitem == 1) { // Carros selecionado
                    ShowPlayerDialog(playerid, DIALOG_CARS, DIALOG_STYLE_LIST, "Carros", "Buffalo - $5,000\nAlpha - $50,000", "Selecionar", "Voltar");
                } else if (listitem == 2) { // Barcos selecionado
                    // Mostrar dialog de barcos (implementação pendente)
                }
                return 1;
            }
            case DIALOG_CARS: {
                new string[128], modelid;
                new Float:previewPosX = 4986.4019, Float:previewPosY = 186.5675, Float:previewPosZ = 12.4172, Float:previewAngle = 10.5389;
                new Float:cameraPosX = 4978.4771, Float:cameraPosY = 184.5469, Float:cameraPosZ = 13.5710;

                // Define o modelo baseado na seleção do jogador
                if (listitem == 0) { // Buffalo selecionado
                    modelid = BUFFALO_MODEL_ID;
                    format(string, sizeof(string), "Você selecionou Buffalo por $5,000. Visualizar veículo?");
                } else if (listitem == 1) { // Alpha selecionado
                    modelid = ALPHA_MODEL_ID;
                    format(string, sizeof(string), "Você selecionou Alpha por $50,000. Visualizar veículo?");
                } else {
                    return 1; // Caso não seja uma seleção válida, simplesmente retorne
                }

                // Armazena o ID do modelo do veículo selecionado para uso posterior
                SetPVarInt(playerid, "SelectedCar", modelid);

                // Cria o veículo de pré-visualização no mundo virtual 1000
                new previewVehicleID = CreateVehicle(modelid, previewPosX, previewPosY, previewPosZ, previewAngle, -1, -1, 0, 1000);

                // Ajusta a câmera do jogador para focar no veículo
                SetPlayerVirtualWorld(playerid, 1000);
                SetVehicleVirtualWorld(previewVehicleID, 1000);
                SetPlayerCameraPos(playerid, cameraPosX, cameraPosY, cameraPosZ);
                SetPlayerCameraLookAt(playerid, previewPosX, previewPosY, previewPosZ);

                // Armazena o ID do veículo de pré-visualização para possível remoção posterior
                SetPVarInt(playerid, "previewVehicleID", previewVehicleID);

                // Mostra diálogo de pré-visualização/confirmação de compra
                ShowPlayerDialog(playerid, DIALOG_PREVIEW, DIALOG_STYLE_MSGBOX, "Opções de Veículo", "Visualizar\nSelecionar Cor\nConfirmar Compra", "Selecionar", "Cancelar");
                return 1;
            }
            case DIALOG_PREVIEW: {
                DestroyVehicle(previewVehicleID[playerid]); // Remover veículo de pré-visualização
                SetPVarInt(playerid, "previewVehicleID", 0);
                SetCameraBehindPlayer(playerid);
                SetPlayerVirtualWorld(playerid, 0);

                if (!response) {
                    ShowPlayerDialog(playerid, DIALOG_CARS, DIALOG_STYLE_LIST, "Carros", "Buffalo - $5,000\nAlpha - $50,000", "Selecionar", "Voltar");
                } else {
                    switch (listitem) {
                        case 0: { // Visualizar novamente (caso queira implementar algum loop ou lógica adicional)
                            return 1;
                        }
                        case 1: { // Selecionar Cor
                            ShowPlayerDialog(playerid, DIALOG_COLOR_SELECT, DIALOG_STYLE_MSGBOX, "Selecionar Cor", "< >", "Esquerda", "Direita");
                            return 1;
                        }
                        case 2: { // Confirmar Compra
					        new string[128];
					        new modelid = GetPVarInt(playerid, "SelectedCar");
					        if (modelid == BUFFALO_MODEL_ID) {
					            format(string, sizeof(string), "Confirmar compra do Buffalo por $5,000?");
					        } else if (modelid == ALPHA_MODEL_ID) {
					            format(string, sizeof(string), "Confirmar compra do Alpha por $50,000?");
					        }
					        ShowPlayerDialog(playerid, DIALOG_CONFIRM, DIALOG_STYLE_MSGBOX, "Confirmar Compra", string, "Sim", "Não");
                            return 1;
                        }
                    }
                }
                return 1;
            }
   			case DIALOG_COLOR_SELECT: {
                if (response) {
                    // Navegação pelas cores
                    if (listitem == 0) { // Escolha "Esquerda"
                        CurrentColorIndex[playerid] = (CurrentColorIndex[playerid] - 1 + sizeof(VehicleColorIDs)) % sizeof(VehicleColorIDs);
                    } else { // Escolha "Direita"
                        CurrentColorIndex[playerid] = (CurrentColorIndex[playerid] + 1) % sizeof(VehicleColorIDs);
                    }

                    // Atualiza a cor do veículo de pré-visualização
                    previewVehicleID[playerid] = GetPVarInt(playerid, "previewVehicleID");
                    new color = VehicleColorIDs[CurrentColorIndex[playerid]];
                    ChangeVehicleColor(previewVehicleID[playerid], color, color); // Use sua função de mudança de cor

                    // Reexibe o diálogo para permitir mais navegação de cores
                    ShowPlayerDialog(playerid, DIALOG_COLOR_SELECT, DIALOG_STYLE_MSGBOX, "Selecionar Cor", "< >", "Esquerda", "Direita");
                } else {
                    // Se o jogador pressionar "Cancelar", mostre o diálogo de pré-visualização novamente
                    ShowPlayerDialog(playerid, DIALOG_PREVIEW, DIALOG_STYLE_MSGBOX, "Opções de Veículo", "Visualizar\nSelecionar Cor\nConfirmar Compra", "Selecionar", "Cancelar");
                }
                return 1;
            }
            case DIALOG_CONFIRM: {
                new modelid = GetPVarInt(playerid, "SelectedCar");
                new previewVehicleID = GetPVarInt(playerid, "previewVehicleID");

                // Remover o veículo de pré-visualização e resetar a câmera para o padrão do jogador
                DestroyVehicle(previewVehicleID);
                SetPVarInt(playerid, "previewVehicleID", 0);
                SetCameraBehindPlayer(playerid);
                SetPlayerVirtualWorld(playerid, 0); // Mover o jogador de volta ao mundo virtual 0

                if (response) { // Jogador confirmou a compra
                    // Verifica se o jogador tem dinheiro suficiente
                    if ((modelid == BUFFALO_MODEL_ID && GetPlayerMoney(playerid) >= PRICE_BUFFALO) || (modelid == ALPHA_MODEL_ID && GetPlayerMoney(playerid) >= PRICE_ALPHA)) {
                        // Debitar o dinheiro do jogador
                        if (modelid == BUFFALO_MODEL_ID) {
                            GivePlayerMoney(playerid, -PRICE_BUFFALO);
                        } else if (modelid == ALPHA_MODEL_ID) {
                            GivePlayerMoney(playerid, -PRICE_ALPHA);
                        }

                        // Definir a posição de spawn do carro comprado
                        new Float:purchasePosX = 5028.4136, Float:purchasePosY = 219.3142, Float:purchasePosZ = 7.6281, Float:purchaseAngle = 172.8449;

                        // Criar o carro comprado para o jogador no mundo virtual 0
                        Car_Create(PlayerData[playerid][pID], modelid, purchasePosX, purchasePosY, purchasePosZ, purchaseAngle, 1, 1);
                        SendClientMessage(playerid, -1, "Compra realizada com sucesso!");
                    } else {
                        // Mensagem de erro se o jogador não tiver dinheiro suficiente
                        SendClientMessage(playerid, -1, "Você não tem dinheiro suficiente para essa compra.");
                    }
                }
                // Limpar variáveis PVar
                SetPVarInt(playerid, "SelectedCar", 0);
                return 1;
            }
        }
    }

	//placa
	if(dialogid == 10101)
	{
		new string[128], Float:angle, Float:X, Float:Y, Float:Z;
		if(strlen(inputtext) < 1 || strlen(inputtext) > 8) return SendClientMessage(playerid, 0xAFAFAFAA, "{3cff00}[DETRAN] {FFFFFF}Placa invalida.");
		else
		{
			format(string, sizeof(string), "{3cff00}[DETRAN] {FFFFFF}Você mudou o emplacamento para {00fffc}%s.", inputtext);
			SendClientMessage(playerid, 0x33CCFFAA, string);
			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, angle);
			SetVehicleNumberPlate(GetPlayerVehicleID(playerid), inputtext);
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			GetPlayerPos(playerid, X, Y, Z);
			SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);
			SetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
			SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z+2);
			PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
		}
		return 1;
	}
	////////////////////////////////////////////////////// SISTEMA MERCADO NEGRO
	if(dialogid == 0 && response)
	{
	    switch(listitem)
	    {
	    	case 0:
	    	{
    		ShowPlayerDialog(playerid, 01, DIALOG_STYLE_LIST, "{FF0000}Mercado Negro", "Semente de Maconha\nSemente de Cocaina\nFaca\nColt-45\nDesert Eagle\nTec-9\nAk-47\nShotgun", "Comprar", "Fechar");
	        }
		}
	}
	
	if(dialogid == 01 && response)
	{
		for (new i = 0; i != MAX_CAIXAS; i ++) if (!CaixaData[i][caixaExists])
		{
			PlayerData[playerid][pCaixaID] = i;
		}
	    switch(listitem)
	    {
	        case 0:
	        {
				//Semente: Maconha
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar semente de maconha.");
	            {

    				PlayerData[playerid][pCaixa] = 1;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa com semente de maconha");
    				return 1;

	           	}
          	}
          	case 1:
	        {
	        	//Semente: Cocaina
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar semente de cocaina.");
	            {

    				PlayerData[playerid][pCaixa] = 2;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa com semente de cocaina");
    				return 1;
	           	}
          	}
          	case 2:
	        {
	            //Armamento: Faca
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar uma caixa de facas.");
	            {

    				PlayerData[playerid][pCaixa] = 3;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa de facas");
    				return 1;
	           	}
          	}
          	case 3:
	        {
	        	//Armamento: Colt-45
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar uma caixa de Colt-45.");
	            {

    				PlayerData[playerid][pCaixa] = 4;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa de Colt-45.");
    				return 1;
	           	}
          	}
			case 4:
	        {
	        	//Armamento: Desert Eagle
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar uma caixa de Desert Eagle.");
	            {

    				PlayerData[playerid][pCaixa] = 5;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa de Desert Eagle.");
    				return 1;
	           	}
          	}
          	case 5:
	        {
	            //Armamento: Tec-9
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar uma caixa de Tec-9.");
	            {

    				PlayerData[playerid][pCaixa] = 6;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa de Tec-9.");
    				return 1;
	           	}
          	}
          	case 6:
	        {
	        	//Armamento: Ak-47
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar uma caixa de Ak-47.");
	            {

    				PlayerData[playerid][pCaixa] = 7;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa de Ak-47.");
    				return 1;
	           	}
          	}
          	case 7:
	        {
	            //Armamento: Shotgun
    			if (PlayerData[playerid][pCaixa] != 0)
        			return SendClientMessage(playerid, COLOR_RED, "Você já está segurando uma caixa!");

				if (PlayerData[playerid][pMoney] < 100)
             	    return SendErrorMessage(playerid, "Voce não tem $100 para comprar uma caixa de Shotgun.");
	            {

    				PlayerData[playerid][pCaixa] = 8;

    				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

    				SendClientMessage(playerid, COLOR_GREEN, "Você comprou uma caixa de Shotgun.");
    				return 1;
	           	}
          	}
		}
	}
	return 0;
}

forward OnTimerCheckTime();
public OnTimerCheckTime()
{
    return 1;
}


forward StopChatting(playerid);
public StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}

forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{
	if (PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Pe de Cabra") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
	    return 1;

	if (random(2))
	{
	    ShowPlayerFooter(playerid, "Voce ~r~nao conseguiu~w~ quebrar as algemas.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s não conseguiu quebrar as algemas.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pCuffed] = 0;
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    ShowPlayerFooter(playerid, "Voce ~g~quebrou~w~ as algemas.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s quebrou as algemas e libertou as mãos de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

forward ProxDetectorEx(Float:radi, playerid, string[], col1);
public ProxDetectorEx(Float:radi, playerid, string[], col1)
{
	if(IsPlayerConnected(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        new VW = GetPlayerVirtualWorld(playerid);

		//radi = 2.0; //Trigger Radius
		foreach(new i: Player)
		{
			if(!BigEar[i])
			{
                if(GetPlayerVirtualWorld(i) != VW)
                    continue;

				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessage(i, col1, string);
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return true;
}
forward UpdateServer();
public UpdateServer()
{
    foreach(Player, pid)
    {
        if(GetPlayerGP(pid) > 1000000) BanEx(pid, "Dinheiro excessivo");
	}
	return 1;
}
forward GetPlayerGP(playerid);
public GetPlayerGP(playerid)
{
	return PlayerData[playerid][pMoney];
}
forward Tontura(playerid);
public Tontura(playerid)
{
    SetPlayerDrunkLevel(playerid, 0);
    return 1;
}
forward PassarEfeitoBebida(playerid);
public PassarEfeitoBebida(playerid)
{
    if(PlayerDrunk[playerid] >= 1)
	{
		PlayerDrunk[playerid] = 0;
		PlayerDrunkTime[playerid] = 0;
		PlayerData[playerid][pAlcoholPerk] = 0;
	}
	return 1;
}
///////////////
forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot)
{
	if (IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
	    RemovePlayerAttachedObject(playerid, slot);
	}
	return 1;
}
forward MineTime(playerid);
public MineTime(playerid)
{
	PlayerData[playerid][pMineTime] = 0;
}

forward DestroyBlood(objectid);
public DestroyBlood(objectid)
{
	DestroyDynamicObject(objectid);
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid) || !SQL_IsLogged(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

forward Advertise(playerid);
public Advertise(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
	    return 0;

	new
	    text[128];

	strunpack(text, PlayerData[playerid][pAdvertise]);

	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	    SendClientMessageEx(i, 0x00AA00FF, "Anuncios: %s (Telefone: %d)", text, PlayerData[playerid][pPhone]);
	}
	PlayerData[playerid][pAdvertise][0] = 0;
	return 1;
}

forward KickHouse(playerid, id);
public KickHouse(playerid, id)
{

	if (GetFactionType(playerid) != FACTION_PCESP || House_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "Voce ~r~nao conseguiu~w~ derrubar a porta.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s não derrubou a porta.", ReturnName(playerid, 0));
		}
		default:
		{
		    HouseData[id][houseLocked] = 0;
		    House_Save(id);

			Inventory_Remove(playerid, "Mandato");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s derrubou a porta.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Pressione ~y~'F'~w~ para entrar.");
		}
	}
	return 1;
}

forward KickBusiness(playerid, id);
public KickBusiness(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_PCESP || Business_Nearest(playerid) != id)
 		return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "Voce ~r~nao conseguiu~w~ derrubar a porta.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s não derrubou a porta.", ReturnName(playerid, 0));
		}
		default:
		{
		    BusinessData[id][bizLocked] = 0;
		    Business_Save(id);
		    
            Inventory_Remove(playerid, "Mandato");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s derrubou a porta.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Pressione ~y~'F'~w~ para entrar.");
		}
	}
	return 1;
}
forward UpdateBooth(playerid, id);
public UpdateBooth(playerid, id)
{
	if (PlayerData[playerid][pRangeBooth] != id || !g_BoothUsed[id])
	    return 0;

	if (PlayerData[playerid][pTargets] == 10)
	{
	    PlayerData[playerid][pTargets] = 0;

	    switch (PlayerData[playerid][pTargetLevel]++)
	    {
	        case 0:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 25, 15000);
	            SendServerMessage(playerid, "Você ganhou um nível (1/5).");
	        }
	        case 1:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 28, 15000);
	            SendServerMessage(playerid, "Você ganhou um nível (2/5).");
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 29, 15000);
	            SendServerMessage(playerid, "Você ganhou um nível (3/5).");
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 30, 15000);
	            SendServerMessage(playerid, "Você ganhou um nível (4/5).");
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 27, 15000);
	            SendServerMessage(playerid, "Você ganhou um nível (5/5).");
	        }
	        case 5:
	        {
	            Booth_Leave(playerid);
	            SendServerMessage(playerid, "Você concluiu o desafio de tiro!");
	        }
	    }
	}
	Booth_Refresh(playerid);
	return 1;
}

stock PlayerHasTazer(playerid)
{
	return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:x[2],
	    Float:y[2],
	    Float:z[2],
	    Float:angle;

	GetPlayerPos(targetid, x[0], y[0], z[0]);
	GetPlayerPos(playerid, x[1], y[1], z[1]);

	angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
	SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock DisableWaypoint(playerid)
{
    if (PlayerData[playerid][pWaypoint])
	{
 		PlayerData[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	return 1;
}

stock TerminateConnection(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);

	if (PlayerData[playerid][pRangeBooth] != -1)
		Booth_Leave(playerid);

	if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if (PlayerData[playerid][pDragged])
	    KillTimer(PlayerData[playerid][pDragTimer]);

	if (PlayerData[playerid][pFreeze])
	    KillTimer(PlayerData[playerid][pFreezeTimer]);
///////////////////////////////// SISTEMA ////////////////////////////
    Delete3DTextLabel(deathlabel[playerid]);

	sInfo[playerid][Misc] = 0;
	sInfo[playerid][Head] = 0;
	sInfo[playerid][Chest] = 0;
	sInfo[playerid][Crotch] = 0;
	sInfo[playerid][LArm] = 0;
	sInfo[playerid][RArm] = 0;
	sInfo[playerid][LLeg] = 0;
	sInfo[playerid][RLeg] = 0;
//////////////////////////////////////////////////////////////////////////////////
	foreach (new i : Player)
	{
	    if (PlayerData[i][pLastShot] == playerid) {
	        PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pHouseSeller] == playerid) {
		    PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pHouseOffered] = -1;
		}
		if (PlayerData[i][pBusinessSeller] == playerid) {
		    PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pBusinessOffered] = -1;
		}
		if (PlayerData[i][pCarSeller] == playerid) {
		    PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pCarOffered] = -1;
		}
		if (PlayerData[i][pShakeOffer] == playerid) {
		    PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pShakeType] = 0;
		}
		if (PlayerData[i][pFriskOffer] == playerid) {
		    PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pFoodSeller] == playerid) {
		    PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pFoodType] = 0;
		}
		if (PlayerData[i][pFactionOffer] == playerid) {
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pFactionOffered] = -1;
		}
		if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pMDCPlayer] == playerid) {
		    PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
		    PlayerData[i][pTrackTime] = 0;
		}
		if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pGiveItem] == playerid) {
		    PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pTakeItems] == playerid) {
		    PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}
	}
	SQL_SaveCharacter(playerid);
	ResetNameTag(playerid);
	ResetStatistics(playerid);
	return 1;
}

stock HoldWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, 4);

	PlayerData[playerid][pHoldWeapon] = weaponid;
    PlayerData[playerid][pUsedMagazine] = 0;

	if (weaponid != 0)
	{
		SetPlayerAttachedObject(playerid, 4, GetWeaponModel(weaponid), 6);
  		SetPlayerArmedWeapon(playerid, 0);
	}
	return 1;
}////////////////////// ANT SPEED /////////////////////////////////////////////
stock IsPlayerInWater(playerid)
{
new Float:x,Float:y,Float:pz;
GetPlayerPos(playerid,x,y,pz);
if (
(IsPlayerInArea(playerid, 2032.1371, 1841.2656, 1703.1653, 1467.1099) && pz <= 9.0484) //lv piratenschiff
|| (IsPlayerInArea(playerid, 2109.0725, 2065.8232, 1962.5355, 10.8547) && pz <= 10.0792) //lv visage
|| (IsPlayerInArea(playerid, -492.5810, -1424.7122, 2836.8284, 2001.8235) && pz <= 41.06) //lv staucamm
|| (IsPlayerInArea(playerid, -2675.1492, -2762.1792, -413.3973, -514.3894) && pz <= 4.24) //sf südwesten kleiner teich
|| (IsPlayerInArea(playerid, -453.9256, -825.7167, -1869.9600, -2072.8215) && pz <= 5.72) //sf gammel teich
|| (IsPlayerInArea(playerid, 1281.0251, 1202.2368, -2346.7451, -2414.4492) && pz <= 9.3145) //ls neben dem airport
|| (IsPlayerInArea(playerid, 2012.6154, 1928.9028, -1178.6207, -1221.4043) && pz <= 18.45) //ls mitte teich
|| (IsPlayerInArea(playerid, 2326.4858, 2295.7471, -1400.2797, -1431.1266) && pz <= 22.615) //ls weiter südöstlich
|| (IsPlayerInArea(playerid, 2550.0454, 2513.7588, 1583.3751, 1553.0753) && pz <= 9.4171) //lv pool östlich
|| (IsPlayerInArea(playerid, 1102.3634, 1087.3705, -663.1653, -682.5446) && pz <= 112.45) //ls pool nordwestlich
|| (IsPlayerInArea(playerid, 1287.7906, 1270.4369, -801.3882, -810.0527) && pz <= 87.123) //pool bei maddog's haus oben
|| (pz < 1.5)
)
{
return 1;
}
return 0;
}
stock
	GetSpeedKM(playerid)
{
	new
		Float:PosX,
		Float:PosY,
		Float:PosZ,
		Float:PlayerSpeedDistance;

 	GetVehicleVelocity(GetPlayerVehicleID(playerid), PosX, PosY, PosZ);
	PlayerSpeedDistance = floatmul(floatsqroot(floatadd(floatadd(floatpower(PosX, 2), floatpower(PosY, 2)),  floatpower(PosZ, 2))), 170.0);
	new
 		spe = floatround(PlayerSpeedDistance * 1);
	return spe;
}
stock IsPlayerInArea(playerid, Float:minx, Float:maxx, Float:miny, Float:maxy)
{
new Float:x, Float:y, Float:z;
GetPlayerPos(playerid, x, y, z);
if (x > minx && x < maxx && y > miny && y < maxy) return 1;
return 0;
}

//////////////////////////////////////////
stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}

stock IsBleedableWeapon(weaponid)
{
	switch (weaponid) {
	    case 4, 8, 9, 22..39: return 1;
	}
	return 0;
}

stock CreateBlood(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

        GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(g_iHandle, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock IsPlayerOnPhone(playerid)
{
	if (PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pPlaceAd] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	    return 1;

	return 0;
}

stock FlipVehicle(vehicleid)
{
	new
	    Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock StopVehicleRadio(vehicleid)
{
	if ((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
	{
	    CoreVehicles[vehicleid][vehRadio] = 0;

	    foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    StopAudioStreamForPlayer(i);
			    PlayerData[i][pPlayRadio] = 0;
			}
	    }
	}
	return 1;
}

stock SetVehicleRadio(vehicleid, url[])
{
	if (IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
	{
        CoreVehicles[vehicleid][vehRadio] = 1;
        strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

        foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    PlayerData[i][pPlayRadio] = 1;

			    StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
            }
        }
	}
	return 1;
}

stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
	    if (CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
	        DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);

	    CoreVehicles[vehicleid][vehFuel] = 100;
		CoreVehicles[vehicleid][vehWindowsDown] = false;
		CoreVehicles[vehicleid][vehTemporary] = 0;
  		CoreVehicles[vehicleid][vehLoads] = 0;
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		CoreVehicles[vehicleid][vehTrash] = 0;
		CoreVehicles[vehicleid][vehRepairing] = 0;
		CoreVehicles[vehicleid][vehSirenOn] = 0;
		CoreVehicles[vehicleid][vehRadio] = 0;
	}
	return 1;
}

stock RespawnVehicle(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	    Car_Spawn(id);

	else SetVehicleToRespawn(vehicleid);

	ResetVehicle(vehicleid);
	return 1;
}

stock GetWeaponCount(playerid)
{
	new
		count,
	    weapon,
	    ammo;

	for (new i = 0; i < 12; i ++)
	{
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel("[Boombox]\n{FFFFFF}/boombox", COLOR_DARKBLUE, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

	    foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 120.0, 1);
		}
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}

stock Taxi_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pTaxiCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Nao há corridas para aceitar.");
	}
	else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Taxi chamadas", string, "Aceitar", "Cancelar");
	return 1;
}

stock IsShipmentAccepted(businessid)
{
	foreach (new i : Player) if (PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
	    return 1;
	}
	return 0;
}

stock CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;

    if (PlayerData[playerid][pDeliverShipment])
    {
		PlayerData[playerid][pDeliverShipment] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}
//////////////////////////////////////////////////////
stock ShowShipments(playerid)
{
    static
	    string[2048],
		type[24];

	string[0] = 0;

	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i))
	{
	    switch (BusinessData[i][bizType]) {
	       case 1: type = "Suprimentos 24/7";
	        case 2: type = "Armas e Municao";
	        case 3: type = "Roupa";
	        case 4: type = "Comida";
			case 6: type = "Gasolina";
			case 7: type = "Moveis";
		}
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, BusinessData[i][bizName], type);
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "Não há encomendas para aceitar.");
	}
	else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_LIST, "Encomendas", string, "Aceitar", "Cancelar");
	return 1;
}

stock GetWheelName(componentid)
{
	new
		name[12];

	enum g_eWheelData {
	    g_eWheelModel,
	    g_eWheelName[12 char]
	};

	new const g_aWheelData[][g_eWheelData] = {
	    {1025, !"Offroad"},
	    {1073, !"Shadow"},
	    {1074, !"Mega"},
	    {1075, !"Rimshine"},
	    {1076, !"Wires"},
	    {1077, !"Classic"},
	    {1078, !"Twist"},
	    {1079, !"Cutter"},
	    {1080, !"Switch"},
	    {1081, !"Grove"},
	    {1082, !"Import"},
	    {1083, !"Dollar"},
	    {1084, !"Trance"},
	    {1085, !"Atomic"},
	    {1096, !"Ahab"},
	    {1097, !"Virtual"},
	    {1098, !"Access"}
	};
	for (new i = 0; i < sizeof(g_aWheelData); i ++) if (g_aWheelData[i][g_eWheelModel] == componentid) {
	    strunpack(name, g_aWheelData[i][g_eWheelName]);

	    return name;
	}
	strunpack(name, !"Unknown");
	return name;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	    Car_Save(id);
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

stock SetVehiclePaintjob(vehicleid, paintjobid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carPaintjob] = paintjobid;
	    Car_Save(id);
	}
	return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock RemoveComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = 0;
	    Car_Save(id);
	}
	return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
	    Car_Save(id);
	}
	return AddVehicleComponent(vehicleid, componentid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;

	return 1;
}

stock AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] && !PlayerData[playerid][pCuffed] && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && PlayerData[playerid][pGraffiti] == -1);
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock Garbage_Create(playerid, type)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (!GarbageData[i][garbageExists])
	{
	    switch (type) {
	        case 1: GarbageData[i][garbageModel] = 1236;
	        case 2: GarbageData[i][garbageModel] = 1300;
	    }
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageCapacity] = 0;

	    GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
	    GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

		switch (type) {
		    case 1: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
			case 2: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
		}
		GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
		GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

		Garbage_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
		return i;
	}
	return -1;
}

stock Garbage_Delete(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

	    GarbageData[garbageid][garbageExists] = false;
	    GarbageData[garbageid][garbageCapacity] = 0;
	    GarbageData[garbageid][garbageID] = 0;
	}
	return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
	{
		if (GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
			return i;
	}
	return -1;
}

stock Garbage_Refresh(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
	}
	return 1;
}

stock Garbage_Save(garbageid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
        GarbageData[garbageid][garbageModel],
        GarbageData[garbageid][garbageCapacity],
        GarbageData[garbageid][garbagePos][0],
        GarbageData[garbageid][garbagePos][1],
        GarbageData[garbageid][garbagePos][2],
        GarbageData[garbageid][garbagePos][3],
        GarbageData[garbageid][garbageInterior],
        GarbageData[garbageid][garbageWorld],
        GarbageData[garbageid][garbageID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Booth_GetPlayer(id)
{
	foreach (new i : Player) if (PlayerData[i][pRangeBooth] == id) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock Booth_Leave(playerid)
{
	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    if (IsValidObject(g_BoothObject[PlayerData[playerid][pRangeBooth]])) {
	        DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

	        g_BoothObject[PlayerData[playerid][pRangeBooth]] = -1;
	    }
    	ResetPlayerWeapons(playerid);
   		SetWeapons(playerid);

		g_BoothUsed[PlayerData[playerid][pRangeBooth]] = false;
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][81]);

		PlayerData[playerid][pRangeBooth] = -1;
  		PlayerData[playerid][pTargets] = 0;
  		PlayerData[playerid][pTargetLevel] = 0;
	}
	return 1;
}

stock Booth_Refresh(playerid)
{
	new id = PlayerData[playerid][pRangeBooth];

	if (id == -1)
	    return 0;

	if (IsValidObject(g_BoothObject[id])) {
	    DestroyObject(g_BoothObject[id]);
	}
	g_BoothObject[id] = CreateObject(1583, arrBoothPositions[id][0] - 15.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], 0.0, 0.0, 90.0);

	return MoveObject(g_BoothObject[id], arrBoothPositions[id][0] - 1.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], (!PlayerData[playerid][pTargetLevel]) ? (2.0) : (2.0 + (PlayerData[playerid][pTargetLevel] * 1.2)));
}

stock UpdateWeapons(playerid)
{
	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i])
    {
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]))
		    continue;

        GetPlayerWeaponData(playerid, i, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

        if (PlayerData[playerid][pGuns][i] != 0 && !PlayerData[playerid][pAmmo][i]) {
            PlayerData[playerid][pGuns][i] = 0;
		}
	}
	return 1;
}

stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	    ATMData[atmid][atmExists] = false;
	    ATMData[atmid][atmID] = 0;
	}
	return 1;
}

ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}

stock ATM_Create(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++) if (!ATMData[i][atmExists])
		{
		    ATMData[i][atmExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;
            
            ATMData[i][atmDinheiro] = 50000;
            ATMData[i][atmDanificado] = 0;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES('0.0')", "OnATMCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	        
		if (ATMData[atmid][atmDanificado] == 0){
		
			ATMData[atmid][atmObject] = CreateDynamicObject(2942, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2] - 0.4, 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
		}
		else{
		
			ATMData[atmid][atmObject] = CreateDynamicObject(2943, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2] - 0.4, 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
		
		}


		return 1;
	}
	return 0;
}

stock ATM_Save(atmid)
{
	new
	    query[300];

 format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d', `atmDinheiro` = '%d', `atmDanificado` = '%d' WHERE `atmID` = '%d'",
	    ATMData[atmid][atmPos][0],
	    ATMData[atmid][atmPos][1],
	    ATMData[atmid][atmPos][2],
	    ATMData[atmid][atmPos][3],
	    ATMData[atmid][atmInterior],
	    ATMData[atmid][atmWorld],
	    ATMData[atmid][atmDinheiro],
	    ATMData[atmid][atmDanificado],
	    ATMData[atmid][atmID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock IsVehicleImpounded(vehicleid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1 && CarData[id][carImpounded] != -1 && CarData[id][carImpoundPrice] > 0)
	    return 1;

	return 0;
}

stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 19880, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}
forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = 0;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Gate_Create(playerid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(g_iHandle, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		static
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(g_iHandle, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Gate_Save(gateid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock ChangeName(playerid, name[], bool:logging = true)
{
	new
	    id = PlayerData[playerid][pCharacter] - 1,
		query[160],
		oldname[24];

	GetPlayerName(playerid, oldname, sizeof(oldname));

	if (logging)
	{
	    format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", oldname, name, ReturnDate());
		mysql_tquery(g_iHandle, query);
	}
    format(PlayerCharacters[playerid][id], MAX_PLAYER_NAME + 1, name);
	SetPlayerName(playerid, name);

	format(query, sizeof(query), "UPDATE `characters` SET `Character` = '%s' WHERE `Character` = '%s'", name, oldname);
	mysql_tquery(g_iHandle, query);

	return 1;
}

stock Tax_Percent(price)
{
	return floatround((float(price) / 200) * 95);
}

stock Tax_AddMoney(amount)
{
	g_TaxVault = g_TaxVault + amount;

	Server_Save();

	return 0;
}

stock Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	g_TaxVault = g_TaxVault + money;

	Server_Save();
	return 1;
}

stock file_parse_int(File:handle, const field[])
{
	new
	    str[16];

	return (file_parse(handle, field, str), strval(str));
}

stock file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
	if (!handle)
	    return 0;

	new
	    str[128],
		pos = strlen(field);

	fseek(handle, 0, seek_start);

	while (fread(handle, str)) if (strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
	{
	    strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

		if ((pos = strfind(dest, "\r")) != -1)
			dest[pos] = '\0';
   		else if ((pos = strfind(dest, "\n")) != -1)
     		dest[pos] = '\0';

		return 1;
	}
	return 0;
}

cache_get_field_int(row, const field_name[])
{
	new
	    str[12];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return strval(str);
}

Ticket_Add(suspectid, price, reason[])
{
	new
	    string[160];

	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if (!TicketData[suspectid][i][ticketExists])
	{
	    TicketData[suspectid][i][ticketExists] = true;
	    TicketData[suspectid][i][ticketFee] = price;

	    format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
	    format(TicketData[suspectid][i][ticketReason], 64, reason);

		format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`) VALUES('%d', '%d', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason));
		mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);

		return i;
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_tquery(g_iHandle, string);

	    TicketData[playerid][ticketid][ticketExists] = false;
	    TicketData[playerid][ticketid][ticketID] = 0;
	    TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerData[playerid][pLocation], 32, name);

    PlayerData[playerid][pWaypoint] = 1;
   	PlayerData[playerid][pWaypointPos][0] = x;
    PlayerData[playerid][pWaypointPos][1] = y;
   	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][69]);

	return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	new
	    query[192];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (!LocationData[playerid][i][locationExists])
	{
	    LocationData[playerid][i][locationExists] = true;
	    format(LocationData[playerid][i][locationName], 32, name);

	    LocationData[playerid][i][locationPos][0] = x;
	    LocationData[playerid][i][locationPos][1] = y;
	    LocationData[playerid][i][locationPos][2] = z;

		format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
		mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	new
		query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
	{
	    LocationData[playerid][i][locationExists] = false;

	    LocationData[playerid][i][locationPos][0] = 0.0;
	    LocationData[playerid][i][locationPos][1] = 0.0;
	    LocationData[playerid][i][locationPos][2] = 0.0;

	    format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
	    mysql_tquery(g_iHandle, query);
		return 1;
	}
	return 0;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 2000)
{
	if (PlayerData[playerid][pFreeze])
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	    PlayerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);

	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}

forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
	    return 0;

	PlayerData[playerid][pFreeze] = 0;

	SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
	if (!PlayerData[playerid][pFuelCan] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15 >= 100) ? (100) : (CoreVehicles[vehicleid][vehFuel] + 15);

	PlayerData[playerid][pFuelCan] = 0;
	SendServerMessage(playerid, "Veiculo abastecido com 15 litros de combustivel.");
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new idx = random(sizeof(g_arrPrisonSpawns));

	SetPlayerPosEx(playerid, g_arrPrisonSpawns[idx][0], g_arrPrisonSpawns[idx][1], g_arrPrisonSpawns[idx][2] + 0.3);
	SetPlayerFacingAngle(playerid, g_arrPrisonSpawns[idx][3]);

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	ShowHungerTextdraw(playerid, 0);
	SetCameraBehindPlayer(playerid);

}

stock ViewCharges(playerid, name[])
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
	mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
	return 1;
}

stock AddWarrant(targetid, playerid, const description[])
{
	new
	    string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
	mysql_tquery(g_iHandle, string);
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	new
	    id = -1;

    if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32],
		id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
        name[32] = "Shandai Gawa (Digao)";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

stock Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

stock Detector_Delete(id)
{
    if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    new
	        query[64];

	    DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
	    DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

		format(query, sizeof(query), "DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]);
		mysql_tquery(g_iHandle, query);

		MetalDetectors[id][detectorID] = 0;
		MetalDetectors[id][detectorExists] = 0;
	}
	return 1;
}

stock Detector_Refresh(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
	}
	return 1;
}

stock Detector_Nearest(playerid)
{
    for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (MetalDetectors[i][detectorExists])
	{
	    if (IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
	        return i;
	}
	return -1;
}

stock IsPlayerArmed(playerid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (ammo > 0) {
			switch (weapon) {
			    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	return 0;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock GetNearestPlayerInView(playerid, Float:distance = 2.0)
{
	new
	    Float:fAngle,
		Float:fPosX,
		Float:fPosY,
		Float:fPosZ;

	GetPlayerFacingAngle(playerid, fAngle);
	GetPlayerPos(playerid, fPosX, fPosY, fPosZ);

	fPosX += distance * floatsin(-fAngle, degrees);
	fPosY += distance * floatcos(-fAngle, degrees);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 2.0, fPosX, fPosY, fPosZ)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock CancelCall(playerid)
{
    if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
   		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[playerid][pIncomingCall] = 0;
	}
	return 1;
}


stock LeaveTaxi(playerid, driverid)
{
	if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
	    GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
   		GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou $%d para o taxista.", ReturnName(playerid, 0), PlayerData[playerid][pTaxiFee]);

	    PlayerData[playerid][pTaxiFee] = 0;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
	}
	return 0;
}

stock GetFurnitureNameByModel(model)
{
	new
	    name[32];

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureModel] == model) {
		strcat(name, g_aFurnitureData[i][e_FurnitureName]);

		break;
	}
	return name;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

stock IsPumpOccupied(pumpid)
{
	foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
	    if (PlayerData[i][pGasPump] == pumpid) return 1;
	}
	return 0;
}

stock IsWheelModel(modelid)
{
    switch (modelid) {
		case 1025, 1073..1085, 1096..1098: return 1;
	}
    return 0;
}

stock IsNOSCompatible(modelid)
{
	switch (modelid) {
	    case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 0;
	}
    return 1;
}


ShowHungerTextdraw(playerid, enable)
{
	if (!enable) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	else if (PlayerData[playerid][pHUD] && PlayerData[playerid][pJailTime] < 1) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if (IsPlayerInAnyVehicle(playerid))
	{
	    SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		SetPlayerPos(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
}

StopRefilling(playerid)
{
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
   	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
	}
	return 1;
}

SetAccessories(playerid)
{
    for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
	if (PlayerData[playerid][pToggleGlasses]) RemovePlayerAttachedObject(playerid, 0);
	else if (PlayerData[playerid][pGlasses] != 0) SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

	if (PlayerData[playerid][pToggleHat]) RemovePlayerAttachedObject(playerid, 1);
	else if (PlayerData[playerid][pHat] != 0) SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

    if (PlayerData[playerid][pToggleBandana]) RemovePlayerAttachedObject(playerid, 2);
	else if (PlayerData[playerid][pBandana] != 0) SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

	if (Inventory_HasItem(playerid, "Mochila")) SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	else RemovePlayerAttachedObject(playerid, 5);
}

SQL_LoadCharacter(playerid, characterid)
{
	if (characterid < 1 || characterid > 3) // MUDAR PARA 3 O ULTIMO
		return 0;

	new
		query[160];

	format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `Username` = '%s' AND `Character` = '%s'", gettime(), PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query);

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);

	return 1;
}

ShowCharacterMenu(playerid)
{
	new str[32];

	if (PlayerData[playerid][pCharacter] != 0)
	{
	    PlayerData[playerid][pCharacter] = 0;

		for (new i = 0; i < 8; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		for (new i = 71; i < 81; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	for (new i = 0; i < 8; i ++)
	{
	    if (i < 3) { // mudar para 3
	        format(str, sizeof(str), "%s", (!PlayerCharacters[playerid][i][0]) ? ("Slot Vazio") : (PlayerCharacters[playerid][i]));

			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][i + 5], str);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	SelectTextDraw(playerid, -1);
}

GetClosestGarbage(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] > 0 && GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizType] == type && GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestEntrance(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobPoint(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJob(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestHospital(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) {
        return 1;
	}
	return 0;
}

GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if (itemid == -1 || !InventoryData[playerid][itemid][invExists])
	    return 0;

    new
		Float:x,
  		Float:y,
    	Float:z,
		Float:angle,
		string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (InventoryData[playerid][itemid][invQuantity] < 2)
	{
		if (!strcmp(string, "Colt 45") && PlayerData[playerid][pHoldWeapon] == 22)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Desert Eagle") && PlayerData[playerid][pHoldWeapon] == 24)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Shotgun") && PlayerData[playerid][pHoldWeapon] == 25)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Micro SMG") && PlayerData[playerid][pHoldWeapon] == 28)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "MP5") && PlayerData[playerid][pHoldWeapon] == 29)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Tec-9") && PlayerData[playerid][pHoldWeapon] == 32)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "AK-47") && PlayerData[playerid][pHoldWeapon] == 30)
			HoldWeapon(playerid, 0);
			
		else if (!strcmp(string, "M4") && PlayerData[playerid][pHoldWeapon] == 31)
			HoldWeapon(playerid, 0);

	 	else if (!strcmp(string, "Rifle") && PlayerData[playerid][pHoldWeapon] == 33)
		 	HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Sniper") && PlayerData[playerid][pHoldWeapon] == 34)
			HoldWeapon(playerid, 0);
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
 	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s jogou no chão uma \"%s\".", ReturnName(playerid, 0), string);
	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	new
	    query[300];

	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (!DroppedItems[i][droppedModel])
	{
	    format(DroppedItems[i][droppedItem], 32, item);
	    format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
  		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if (IsWeaponModel(model)) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}
		
		if (strcmp(item, "Demo Soda") != 0)
		{
	 		format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
			mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
		}
		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
	    if (GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
	        return i;
	}
	return -1;
}

Item_Delete(itemid)
{
    static
	    query[64];

    if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
        DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
	    DroppedItems[itemid][droppedPos][0] = 0.0;
	    DroppedItems[itemid][droppedPos][1] = 0.0;
	    DroppedItems[itemid][droppedPos][2] = 0.0;
	    DroppedItems[itemid][droppedInt] = 0;
	    DroppedItems[itemid][droppedWorld] = 0;

	    DestroyDynamicObject(DroppedItems[itemid][droppedObject]);

	    format(query, sizeof(query), "DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
	    mysql_tquery(g_iHandle, query);
	}
	return 1;
}
PickupItem(playerid, itemid)
{
	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

	    if (id == -1)
	        return SendErrorMessage(playerid, "Você não tem espaço no inventário.");

	    Item_Delete(itemid);
	}
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "None";

 	if (factionid == -1)
	    return name;

	format(name, 32, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "None";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}
Rack_Save(rackid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
	    RackData[rackid][rackHouse],
	    RackData[rackid][rackPos][0],
	    RackData[rackid][rackPos][1],
	    RackData[rackid][rackPos][2],
	    RackData[rackid][rackPos][3],
	    RackData[rackid][rackInterior],
	    RackData[rackid][rackWorld],
	    RackData[rackid][rackWeapons][0],
	    RackData[rackid][rackWeapons][1],
	    RackData[rackid][rackWeapons][2],
	    RackData[rackid][rackWeapons][3],
	    RackData[rackid][rackAmmo][0],
	    RackData[rackid][rackAmmo][1],
	    RackData[rackid][rackAmmo][2],
	    RackData[rackid][rackAmmo][3],
	    RackData[rackid][rackID]
	);
	return mysql_tquery(g_iHandle, query);
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		    return i;
	}
	return -1;
}

Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
	    count++;
	}
	return count;
}

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    new
	        string[128];

		for (new i = 0; i < 4; i ++)
		{
		    if (!RackData[rackid][rackWeapons][i])
		        format(string, sizeof(string), "%s%d: Vazio\n", string, i + 1);

			else format(string, sizeof(string), "%s%d: %s - %d balas\n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
		}
		Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Armario", string, "Selecionar", "Cancelar");
	}
	return 1;
}

Rack_Delete(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        string[64];

	    format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
	    mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RackData[i][rackExists] = true;
		    RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

		    RackData[i][rackPos][0] = x;
		    RackData[i][rackPos][1] = y;
		    RackData[i][rackPos][2] = z;
		    RackData[i][rackPos][3] = angle;
		    RackData[i][rackInterior] = GetPlayerInterior(playerid);
		    RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

		    Rack_Refresh(i);
		    mysql_tquery(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

		    return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
    	new
			Float:x,
	        Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
		    if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

		        RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
			    RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}
Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "[Estante %d]\n{FFFFFF}/estante", rackid);
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_DARKBLUE, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
        RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Detector_Load();
public Detector_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_METAL_DETECTORS)
	{
    	MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorID] = cache_get_field_int(i, "detectorID");
	    MetalDetectors[i][detectorPos][0] = cache_get_field_float(i, "detectorX");
	    MetalDetectors[i][detectorPos][1] = cache_get_field_float(i, "detectorY");
	    MetalDetectors[i][detectorPos][2] = cache_get_field_float(i, "detectorZ");
	    MetalDetectors[i][detectorPos][3] = cache_get_field_float(i, "detectorAngle");
	    MetalDetectors[i][detectorInterior] = cache_get_field_int(i, "detectorInterior");
	    MetalDetectors[i][detectorWorld] = cache_get_field_int(i, "detectorWorld");

		Detector_Refresh(i);
	}
	return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], g_iHandle, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
    static
	    rows,
	    fields,
		str[24];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
	    RackData[i][rackExists] = true;
	    RackData[i][rackID] = cache_get_field_int(i, "rackID");
	    RackData[i][rackHouse] = cache_get_field_int(i, "rackHouse");
     	RackData[i][rackPos][0] = cache_get_field_float(i, "rackX");
        RackData[i][rackPos][1] = cache_get_field_float(i, "rackY");
        RackData[i][rackPos][2] = cache_get_field_float(i, "rackZ");
        RackData[i][rackPos][3] = cache_get_field_float(i, "rackA");
        RackData[i][rackInterior] = cache_get_field_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
		    format(str, 24, "rackWeapon%d", j + 1);
		    RackData[i][rackWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "rackAmmo%d", j + 1);
		    RackData[i][rackAmmo][j] = cache_get_field_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}

forward Vendor_Load();
public Vendor_Load()
{
    static
        rows,
        fields;

    cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i++) if (i < MAX_VENDORS)
    {
        VendorData[i][vendorExists] = true;
        VendorData[i][vendorID] = cache_get_field_int(i, "vendorID");
        VendorData[i][vendorType] = cache_get_field_int(i, "vendorType");
        VendorData[i][vendorMoney] = cache_get_field_int(i, "Dinheiro"); // Adiciona a leitura do Dinheiro
        VendorData[i][vendorPos][0] = cache_get_field_float(i, "vendorX");
        VendorData[i][vendorPos][1] = cache_get_field_float(i, "vendorY");
        VendorData[i][vendorPos][2] = cache_get_field_float(i, "vendorZ");
        VendorData[i][vendorPos][3] = cache_get_field_float(i, "vendorA");
        VendorData[i][vendorInterior] = cache_get_field_int(i, "vendorInterior");
        VendorData[i][vendorWorld] = cache_get_field_int(i, "vendorWorld");

        Vendor_Refresh(i);
    }
    return 1;
}


forward Garbage_Load();
public Garbage_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GARBAGE_BINS)
	{
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
	    GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
	    GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
	    GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
        GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
        GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
        GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageA");
        GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
		GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

		Garbage_Refresh(i);
	}
	return 1;
}

forward ATM_Load();
public ATM_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
	    ATMData[i][atmExists] = true;
	    ATMData[i][atmID] = cache_get_field_int(i, "atmID");
	    ATMData[i][atmPos][0] = cache_get_field_float(i, "atmX");
        ATMData[i][atmPos][1] = cache_get_field_float(i, "atmY");
        ATMData[i][atmPos][2] = cache_get_field_float(i, "atmZ");
        ATMData[i][atmPos][3] = cache_get_field_float(i, "atmA");
        ATMData[i][atmInterior] = cache_get_field_int(i, "atmInterior");
		ATMData[i][atmWorld] = cache_get_field_int(i, "atmWorld");
  		ATMData[i][atmDanificado] = cache_get_field_int(i, "atmDanificado");
		ATMData[i][atmDinheiro] = cache_get_field_int(i, "atmDinheiro");
		
		ATM_Refresh(i);
	}
	return 1;
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], g_iHandle, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
	    FactionData[i][factionID] = cache_get_field_int(i, "factionID");

	    cache_get_field_content(i, "factionName", FactionData[i][factionName], g_iHandle, 32);

	    FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
	    FactionData[i][factionType] = cache_get_field_int(i, "factionType");
	    FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
	    FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
	    FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
	    FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
	    FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
	    FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");

		//Spawning
		FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
	 	FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
   		FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
		FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
  		FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");

	    for (new j = 0; j < 8; j ++) {
	        format(str, sizeof(str), "factionSkin%d", j + 1);

	        FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
		}
        for (new j = 0; j < 10; j ++) {
	        format(str, sizeof(str), "factionWeapon%d", j + 1);

	        FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);

	        format(str, sizeof(str), "factionAmmo%d", j + 1);

			FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 15; j ++) {
		    format(str, sizeof(str), "factionRank%d", j + 1);

		    cache_get_field_content(i, str, FactionRanks[i][j], g_iHandle, 32);
		}
		Faction_Refresh(i);
	}
	return 1;
}

forward Plant_Load();
public Plant_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DRUG_PLANTS)
	{
	    PlantData[i][plantExists] = true;
	    PlantData[i][plantID] = cache_get_field_int(i, "plantID");
	    PlantData[i][plantType] = cache_get_field_int(i, "plantType");
	    PlantData[i][plantDrugs] = cache_get_field_int(i, "plantDrugs");
	    PlantData[i][plantPos][0] = cache_get_field_float(i, "plantX");
	    PlantData[i][plantPos][1] = cache_get_field_float(i, "plantY");
	    PlantData[i][plantPos][2] = cache_get_field_float(i, "plantZ");
	    PlantData[i][plantPos][3] = cache_get_field_float(i, "plantA");
	    PlantData[i][plantInterior] = cache_get_field_int(i, "plantInterior");
	    PlantData[i][plantWorld] = cache_get_field_int(i, "plantWorld");

		Plant_Refresh(i);
	}
	return 1;
}

forward Job_Load();
public Job_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_JOBS)
	{
	    JobData[i][jobExists] = true;
	    JobData[i][jobID] = cache_get_field_int(i, "jobID");
	    JobData[i][jobType] = cache_get_field_int(i, "jobType");
	    JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
	    JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
	    JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
	    JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
	    JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
        JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
	    JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
	    JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
	    JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
	    JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
	    JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
	    JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
	    JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");

 	    Job_Refresh(i);
	}
	return 1;
}

forward Entrance_Load();
public Entrance_Load()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
	    EntranceData[i][entranceExists] = true;
    	EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

		cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], g_iHandle, 32);
		cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], g_iHandle, 32);

	    EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
	    EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
	    EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
	    EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
	    EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
	    EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
	    EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
	    EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
	    EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
	    EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
	    EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
	    EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
	    EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
	    EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
	    EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
	    EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");

		if (EntranceData[i][entranceType] == 3)
		    CreateForklifts(i);

	    Entrance_Refresh(i);
	}
	return 1;
}

forward Dropped_Load();
public Dropped_Load()
{
	static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_ITEMS)
	{
	    DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

		cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], g_iHandle, 32);
		cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], g_iHandle, 24);

		DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
		DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
		DroppedItems[i][droppedWeapon] = cache_get_field_int(i, "itemWeapon");
		DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
		DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
		DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
		DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
		DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
		DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");

		if (IsWeaponModel(DroppedItems[i][droppedModel])) {
    	   	DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
	}
	return 1;
}

forward Business_Load();
public Business_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BUSINESSES)
	{
	    BusinessData[i][bizExists] = true;
	    BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

		cache_get_field_content(i, "bizName", BusinessData[i][bizName], g_iHandle, 32);
        cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], g_iHandle, 128);

		BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
		BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
		BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
		BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
		BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
		BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
		BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
		BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
		BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
		BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
		BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
		BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
		BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
		BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
		BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
		BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
		BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
		BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
		BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
		BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
		BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
		BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
		BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
		BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
		BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");

		for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "bizPrice%d", j + 1);
			BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
		}
		Business_Refresh(i);
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists])
	{
		if (BusinessData[i][bizType] == 5) {
			format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Business_LoadCars", "d", i);
		}
		else if (BusinessData[i][bizType] == 6) {
			format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Pump_Load", "d", i);
		}
	}
	return 1;
}

forward House_Load();
public House_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		HouseData[i][houseLights] = false;

		HouseData[i][houseID] = cache_get_field_int(i, "houseID");
		HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
		HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");

		cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], g_iHandle, 32);

		HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
		HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
		HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
		HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
		HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
		HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
		HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
		HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
		HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
		HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
		HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
        HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
        HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");

        for (new j = 0; j < 10; j ++)
		{
            format(str, 24, "houseWeapon%d", j + 1);
            HouseData[i][houseWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "houseAmmo%d", j + 1);
            HouseData[i][houseAmmo][j] = cache_get_field_int(i, str);
		}
  House_Refresh(i);
	}
	for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists]) {
		format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", i);

		format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", i);
	}
	return 1;
}

stock Car_GetRealID(carid)
{
	if (carid == -1 || !CarData[carid][carExists] || CarData[carid][carVehicle] == INVALID_VEHICLE_ID)
	    return INVALID_VEHICLE_ID;

	return CarData[carid][carVehicle];
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carVehicle] == vehicleid) {
	    return i;
	}
	return -1;
}

stock Car_Spawn(carid)
{
    if (carid != -1 && CarData[carid][carExists] && !CarData[carid][carParked]) // Verifica se o carro existe e não está estacionado
    {
        if (IsValidVehicle(CarData[carid][carVehicle]))
            DestroyVehicle(CarData[carid][carVehicle]);

        if (CarData[carid][carColor1] == -1)
            CarData[carid][carColor1] = random(127);

        if (CarData[carid][carColor2] == -1)
            CarData[carid][carColor2] = random(127);

        CarData[carid][carVehicle] = CreateVehicle(CarData[carid][carModel], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], CarData[carid][carPos][3], CarData[carid][carColor1], CarData[carid][carColor2], -1);

        if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
        {
            if (CarData[carid][carPaintjob] != -1)
            {
                ChangeVehiclePaintjob(CarData[carid][carVehicle], CarData[carid][carPaintjob]);
            }
            if (CarData[carid][carLocked])
            {
                new engine, lights, alarm, doors, bonnet, boot, objective;
                GetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
            }
            for (new i = 0; i < 14; i++)
            {
                if (CarData[carid][carMods][i]) AddVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);
            }
            ResetVehicle(CarData[carid][carVehicle]);
            return 1;
        }
    }
    return 0;
}

forward Car_Load();
public Car_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_CARS)
	{
	    CarData[i][carExists] = true;
	    CarData[i][carID] = cache_get_field_int(i, "carID");
	    CarData[i][carModel] = cache_get_field_int(i, "carModel");
	    CarData[i][carOwner] = cache_get_field_int(i, "carOwner");
	    CarData[i][carPos][0] = cache_get_field_float(i, "carPosX");
	    CarData[i][carPos][1] = cache_get_field_float(i, "carPosY");
	    CarData[i][carPos][2] = cache_get_field_float(i, "carPosZ");
	    CarData[i][carPos][3] = cache_get_field_float(i, "carPosR");
	    CarData[i][carColor1] = cache_get_field_int(i, "carColor1");
	    CarData[i][carColor2] = cache_get_field_int(i, "carColor2");
	    CarData[i][carPaintjob] = cache_get_field_int(i, "carPaintjob");
	    CarData[i][carLocked] = cache_get_field_int(i, "carLocked");
	    CarData[i][carImpounded] = cache_get_field_int(i, "carImpounded");
	    CarData[i][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
        CarData[i][carFaction] = cache_get_field_int(i, "carFaction");
        CarData[i][carParked] = cache_get_field_int(i, "carParked");

		for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "carWeapon%d", j + 1);
		        CarData[i][carWeapons][j] = cache_get_field_int(i, str);

		        format(str, sizeof(str), "carAmmo%d", j + 1);
		        CarData[i][carAmmo][j] = cache_get_field_int(i, str);
	        }
	        format(str, sizeof(str), "carMod%d", j + 1);
	        CarData[i][carMods][j] = cache_get_field_int(i, str);
	    }
	    Car_Spawn(i);
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_tquery(g_iHandle, str, "OnLoadCarStorage", "d", i);
	}
	return 1;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		static
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

stock GetVehicleFromBehind(vehicleid)
{
	static
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

forward HarvestPlant(playerid, plantid);
public HarvestPlant(playerid, plantid)
{
	PlayerData[playerid][pHarvesting] = 0;

	if (Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
	    return 0;

	switch (PlantData[plantid][plantType])
	{
	    case 1:
	    {
	        new id = Inventory_Add(playerid, "Maconha", 1578, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Você não tem qualquer espaço em seu inventário.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colheu %d gramas de Maconha.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
		case 2:
	    {
	        new id = Inventory_Add(playerid, "Cocaina", 1575, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Você não tem qualquer espaço em seu inventário.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou %d gramas de cocaina.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
        case 3:
	    {
	        new id = Inventory_Add(playerid, "Heroina", 1577, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "Você não tem qualquer espaço em seu inventário.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou %d gramas de heroina.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
	}
	Plant_Delete(plantid);
	return 1;
}

forward FirstAidUpdate(playerid);
public FirstAidUpdate(playerid)
{
	static
	    Float:health;

	GetPlayerHealth(playerid, health);

    if (!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
    	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

	if (health >= 95.0)
	{
	    SetPlayerHealth(playerid, 100.0);
	    SendServerMessage(playerid, "O seu kit de primeiros socorros foi usado.");

		if (!IsPlayerInAnyVehicle(playerid)) {
	        PlayerData[playerid][pLoopAnim] = true;
		}
        PlayerData[playerid][pBleeding] = 0;
		PlayerData[playerid][pBleedTime] = 0;

		PlayerData[playerid][pFirstAid] = false;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	else {
	    SetPlayerHealth(playerid, floatadd(health, 4.0));
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC || !IsPlayerNearHood(playerid, vehicleid)) {
		return 0;
	}
 	SetVehicleHealth(vehicleid, 1000.0);
	CoreVehicles[vehicleid][vehRepairing] = false;
	GameTextForPlayer(playerid, " ", 1, 3);

	PlayerData[playerid][pRepairTime] = gettime() + 60;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s consertou o veículo após um trabalho duro.", ReturnName(playerid, 0));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se sente cansado.", ReturnName(playerid, 0));
	
 	if (CarData[vehicleid][carFaction] == 12 || CarData[vehicleid][carFaction] == 13 || CarData[vehicleid][carFaction] == 14){

        GivePlayerMoney(playerid, 150);
    	SendClientMessage(playerid, -1, "Você reparou um carro público, o governo lhe pagou 150 dólares");
	}
	
	return 1;
}
forward RepairCarCompleto(playerid, vehicleid);
public RepairCarCompleto(playerid, vehicleid)
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC || !IsPlayerNearHood(playerid, vehicleid)) {
		return 0;
	}
	RepairVehicle(vehicleid);
	CoreVehicles[vehicleid][vehRepairing] = false;
	GameTextForPlayer(playerid, " ", 1, 3);

	PlayerData[playerid][pRepairTime] = gettime() + 60;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s consertou o veículo após um trabalho duro.", ReturnName(playerid, 0));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se sente cansado.", ReturnName(playerid, 0));

	return 1;
}
forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		DealershipCars[bizid][i][vehID] = cache_get_field_int(i, "vehID");
		DealershipCars[bizid][i][vehModel] = cache_get_field_int(i, "vehModel");
		DealershipCars[bizid][i][vehPrice] = cache_get_field_int(i, "vehPrice");
	}
	return 1;
}

forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((id = Furniture_GetFreeID()) != -1) {
	    FurnitureData[id][furnitureExists] = true;
	    FurnitureData[id][furnitureHouse] = houseid;

	    cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], g_iHandle, 32);

	    FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
	    FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
	    FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
	    FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
	    FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
	    FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
	    FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
	    FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");

	    Furniture_Refresh(id);
	}
	return 1;
}

Furniture_GetCount(houseid)
{
	new count;

	for (new i = 0; i < MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	    count++;
	}
	return count;
}

Furniture_GetFreeID()
{
	for (new i = 0; i != MAX_FURNITURE; i ++) if (!FurnitureData[i][furnitureExists]) {
	    return i;
	}
	return -1;
}

Furniture_Refresh(furnitureid)
{
	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    if (IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

	    FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[furnitureid][furnitureModel],
			FurnitureData[furnitureid][furniturePos][0],
			FurnitureData[furnitureid][furniturePos][1],
			FurnitureData[furnitureid][furniturePos][2],
			FurnitureData[furnitureid][furnitureRot][0],
			FurnitureData[furnitureid][furnitureRot][1],
			FurnitureData[furnitureid][furnitureRot][2],
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
		);
	}
	return 1;
}

Furniture_Save(furnitureid)
{
	static
	    string[300];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	    FurnitureData[furnitureid][furnitureModel],
	    FurnitureData[furnitureid][furnitureName],
	    FurnitureData[furnitureid][furniturePos][0],
	    FurnitureData[furnitureid][furniturePos][1],
	    FurnitureData[furnitureid][furniturePos][2],
	    FurnitureData[furnitureid][furnitureRot][0],
	    FurnitureData[furnitureid][furnitureRot][1],
	    FurnitureData[furnitureid][furnitureRot][2],
	    HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
	    FurnitureData[furnitureid][furnitureID]
	);
	return mysql_tquery(g_iHandle, string);
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0)
{
	static
	    string[64],
		id = -1;

 	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	if ((id = Furniture_GetFreeID()) != -1)
	{
	    FurnitureData[id][furnitureExists] = true;
	    format(FurnitureData[id][furnitureName], 32, name);

        FurnitureData[id][furnitureHouse] = houseid;
	    FurnitureData[id][furnitureModel] = modelid;
	    FurnitureData[id][furniturePos][0] = x;
	    FurnitureData[id][furniturePos][1] = y;
	    FurnitureData[id][furniturePos][2] = z;
	    FurnitureData[id][furnitureRot][0] = rx;
	    FurnitureData[id][furnitureRot][1] = ry;
	    FurnitureData[id][furnitureRot][2] = rz;

	    Furniture_Refresh(id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string, "OnFurnitureCreated", "d", id);

		return id;
	}
	return -1;
}

Furniture_Delete(furnitureid)
{
	static
	    string[72];

	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]);
		mysql_tquery(g_iHandle, string);

		FurnitureData[furnitureid][furnitureExists] = false;
		FurnitureData[furnitureid][furnitureModel] = 0;

		DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
	}
	return 1;
}

forward OnLoadCarStorage(carid);
public OnLoadCarStorage(carid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		CarStorage[carid][i][cItemExists] = true;
		CarStorage[carid][i][cItemID] = cache_get_field_int(i, "itemID");
		CarStorage[carid][i][cItemModel] = cache_get_field_int(i, "itemModel");
		CarStorage[carid][i][cItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(CarStorage[carid][i][cItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadStorage(houseid);
public OnLoadStorage(houseid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		HouseStorage[houseid][i][hItemExists] = true;
		HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
		HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
		HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
	}
	return 1;
}

House_Save(houseid)
{
	static
	    query[1536];

	format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
	    HouseData[houseid][houseOwner],
	    HouseData[houseid][housePrice],
	    SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
	    HouseData[houseid][housePos][0],
	    HouseData[houseid][housePos][1],
	    HouseData[houseid][housePos][2],
	    HouseData[houseid][housePos][3],
	    HouseData[houseid][houseInt][0],
	    HouseData[houseid][houseInt][1],
	    HouseData[houseid][houseInt][2],
	    HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
	);
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i + 1, HouseData[houseid][houseWeapons][i], i + 1, HouseData[houseid][houseAmmo][i]);
	}
	format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d' WHERE `houseID` = '%d'",
	    query,
	    HouseData[houseid][houseLocked],
	    HouseData[houseid][houseMoney],
        HouseData[houseid][houseID]
	);
	return mysql_tquery(g_iHandle, query);
}

House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Plant_Nearest(playerid)
{
    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
	{
		if (GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
			return i;
	}
	return -1;
}

House_Nearest(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
	{
		if (GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
			return i;
	}
	return -1;
}

House_Refresh(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		static
		    string[128];

  		if (!HouseData[houseid][houseOwner]) {
			format(string, sizeof(string), "Casa [%d]\nPreço: %s\nBairro: %s", houseid, FormatNumber(HouseData[houseid][housePrice]), HouseData[houseid][houseAddress]);
	        HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, 0x33CC33FF, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else {
			format(string, sizeof(string), "Casa [%d]\nBairro: %s", houseid, HouseData[houseid][houseAddress]);
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, 0x33CC33FF, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
        //HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
        //HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], (HouseData[houseid][houseOwner] != 0) ? (32) : (31), 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
	}
	return 1;
}

Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (CarData[i][carExists] && CarData[i][carOwner] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}

House_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists] && House_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Business_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_BUSINESSES; i ++)
	{
		if (BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Car_IsOwner(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((CarData[carid][carExists] && CarData[carid][carOwner] != 0) && CarData[carid][carOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Car_WeaponStorage(playerid, carid)
{
    if (!CarData[carid][carExists] || CarData[carid][carLocked])
	    return 0;

    static
	    string[164];

	string[0] = 0;

	for (new i = 0; i < 5; i ++)
	{
	    if (22 <= CarData[carid][carWeapons][i] <= 38)
	        format(string, sizeof(string), "%s%s - Municao: %d\n", string, ReturnWeaponName(CarData[carid][carWeapons][i]), CarData[carid][carAmmo][i]);

		else
		    format(string, sizeof(string), "%s%s\n", string, (CarData[carid][carWeapons][i]) ? (ReturnWeaponName(CarData[carid][carWeapons][i])) : ("Slot Vazio"));
	}
	Dialog_Show(playerid, Trunk, DIALOG_STYLE_LIST, "Porta Malas", string, "Selecionar", "Cancelar");
	return 1;
}

Car_ShowTrunk(playerid, carid)
{
	static
	    string[MAX_CAR_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        format(string, sizeof(string), "%sSlot Vazio\n", string);

		else {
			strunpack(name, CarStorage[carid][i][cItemName]);

			if (CarStorage[carid][i][cItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(string, "Armazenamento de Arma");

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Porta Malas", string, "Selecionar", "Cancelar");
	return 1;
}

stock IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
	    return 1;

	return 0;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Refresh(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    if (FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
	    {
		    static
		        string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
			    DestroyDynamicPickup(FactionData[factionid][factionPickup]);

			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
			    DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

			FactionData[factionid][factionPickup] = CreateDynamicPickup(1242, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

			format(string, sizeof(string), "[Armario %d]\n{FFFFFF}/armario", factionid);
	  		FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d'",
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		FactionData[factionid][factionLockerPos][0],
		FactionData[factionid][factionLockerPos][1],
		FactionData[factionid][factionLockerPos][2],
		FactionData[factionid][factionLockerInt],
		FactionData[factionid][factionLockerWorld],

		FactionData[factionid][SpawnX],
		FactionData[factionid][SpawnY],
		FactionData[factionid][SpawnZ],
		FactionData[factionid][SpawnInterior],
		FactionData[factionid][SpawnVW]
	);
	for (new i = 0; i < 10; i ++)
	{
	    if (i < 8)
			format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);

		else
			format(query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);
	}
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Faction_SaveRanks(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionID] = -1;
		    	PlayerData[i][pFactionRank] = -1;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
			    PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

		if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
  			DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

	    FactionData[factionid][factionExists] = false;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%s Cargo %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Mudar", "Cancelar");
	}
	return 1;
}

Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 32, name);

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;

        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;

        for (new j = 0; j < 8; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
	    }
	    for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
	    mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

Plant_Delete(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

	    PlantData[plantid][plantExists] = false;
		PlantData[plantid][plantID] = 0;
	    PlantData[plantid][plantDrugs] = 0;
	}
	return 1;
}

Plant_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (!PlantData[i][plantExists])
	    {
	        PlantData[i][plantExists] = true;
	        PlantData[i][plantType] = type;
	        PlantData[i][plantDrugs] = 0;

	        PlantData[i][plantPos][0] = x;
	        PlantData[i][plantPos][1] = y;
	        PlantData[i][plantPos][2] = z;
	        PlantData[i][plantPos][3] = angle;
	        PlantData[i][plantInterior] = GetPlayerInterior(playerid);
	        PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);

	        mysql_tquery(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", "OnPlantCreated", "d", i);
	        Plant_Refresh(i);
	        return i;
		}
	}
	return -1;
}

Plant_MaxGrams(type)
{
	new grams;

	switch (type)
	{
	    case 1: grams = 40; // Marijuana plant
	    case 2: grams = 30; // Cocaine plant
		case 3: grams = 25; // Heroin plant
		default: grams = 0;
	}
	return grams;
}

Plant_Save(plantid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d' WHERE `plantID` = '%d'",
        PlantData[plantid][plantType],
        PlantData[plantid][plantDrugs],
        PlantData[plantid][plantPos][0],
        PlantData[plantid][plantPos][1],
        PlantData[plantid][plantPos][2],
        PlantData[plantid][plantPos][3],
        PlantData[plantid][plantInterior],
        PlantData[plantid][plantWorld],
        PlantData[plantid][plantID]
	);
	return mysql_tquery(g_iHandle, query);
}

Plant_GetType(type)
{
	static
	    str[16];

    switch (type) {
    	case 1: str = "Maconha";
    	case 2: str = "Cocaina";
	    case 3: str = "Heroina";
	}
	return str;
}

Plant_Refresh(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);

		format(string, sizeof(string), "[Planta %d]\n{FFFFFF}%s - %d/%d Gramas", plantid, Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType]));
  		PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
	}
	return 1;
}

Caixa_GetType(type)
{
    static str[24];

    if (type == 1) {
        str = "Semente de Maconha";
    } else if (type == 2) {
        str = "Semente de Cocaina";
    } else if (type == 3) {
        str = "Faca";
    } else if (type == 4) {
        str = "Colt-45";
    } else if (type == 5) {
        str = "Desert Eagle";
    } else if (type == 7) {
        str = "Tec-9";
    } else if (type == 8) {
        str = "Ak-47";
    } else if (type == 9) {
        str = "Shotgun";
    } else {
        str = "Noneeee";
    }

    return str;
}


Job_Save(jobid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d' WHERE `jobID` = '%d'",
	    JobData[jobid][jobType],
	    JobData[jobid][jobPos][0],
	    JobData[jobid][jobPos][1],
	    JobData[jobid][jobPos][2],
	    JobData[jobid][jobInterior],
	    JobData[jobid][jobWorld],
	    JobData[jobid][jobPoint][0],
	    JobData[jobid][jobPoint][1],
	    JobData[jobid][jobPoint][2],
	    JobData[jobid][jobDeliver][0],
	    JobData[jobid][jobDeliver][1],
	    JobData[jobid][jobDeliver][2],
	    JobData[jobid][jobPointInt],
	    JobData[jobid][jobPointWorld],
	    JobData[jobid][jobID]
	);
	return mysql_tquery(g_iHandle, query);
}

Job_GetName(type)
{
	static
	    str[24];

	switch (type)
	{
	    case 1: str = "Caminhoneiro";
		case 2: str = "Mecanico";
		case 3: str = "Taxista";
		case 4: str = "Mineiro";
		case 5: str = "Lixeiro";
	    default: str = "Nenhum";
	}
	return str;
}

Job_Refresh(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		static
		    string[90];

		format(string, sizeof(string), "[%s]\n{FFFFFF}/trabalho para aceitar o trabalho!", Job_GetName(JobData[jobid][jobType]));

		if (JobData[jobid][jobType] == 1) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Entregador]\n{FFFFFF} /iniciarentrega", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 4) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Minerador]\n{FFFFFF} /minerar", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Mineração]\n{FFFFFF}Entregue suas rochas neste local.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 5) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Lixeiro]\n{FFFFFF} /despejar", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1264, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
	}
	return 1;
}

Job_Delete(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
		mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		JobData[jobid][jobExists] = false;
	    JobData[jobid][jobType] = 0;
	    JobData[jobid][jobID] = 0;
	}
	return 1;
}

Job_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
		{
	    	if (!JobData[i][jobExists])
	    	{
	        	JobData[i][jobExists] = true;
	        	JobData[i][jobType] = type;

				JobData[i][jobPos][0] = x;
	        	JobData[i][jobPos][1] = y;
	        	JobData[i][jobPos][2] = z;
	        	JobData[i][jobPoint][0] = 0.0;
	        	JobData[i][jobPoint][1] = 0.0;
	        	JobData[i][jobPoint][2] = 0.0;
	        	JobData[i][jobDeliver][0] = 0.0;
	        	JobData[i][jobDeliver][1] = 0.0;
	        	JobData[i][jobDeliver][2] = 0.0;

	        	JobData[i][jobInterior] = GetPlayerInterior(playerid);
	        	JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;

	        	Job_Refresh(i);
	        	mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);

	        	return i;
	        }
	    }
	}
	return -1;
}

Car_Create(ownerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, type = 0)
{
    for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (!CarData[i][carExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(127);

			if (color2 == -1)
			    color2 = random(127);

   		    CarData[i][carExists] = true;
            CarData[i][carModel] = modelid;
            CarData[i][carOwner] = ownerid;

            CarData[i][carPos][0] = x;
            CarData[i][carPos][1] = y;
            CarData[i][carPos][2] = z;
            CarData[i][carPos][3] = angle;

            CarData[i][carColor1] = color1;
            CarData[i][carColor2] = color2;
            CarData[i][carPaintjob] = -1;
            CarData[i][carLocked] = false;
            CarData[i][carImpounded] = -1;
            CarData[i][carImpoundPrice] = 0;
            CarData[i][carFaction] = type;

            for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    CarData[i][carWeapons][j] = 0;
                    CarData[i][carAmmo][j] = 0;
                }
                CarData[i][carMods][j] = 0;
            }
            CarData[i][carVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

            if (CarData[i][carVehicle] != INVALID_VEHICLE_ID) {
                ResetVehicle(CarData[i][carVehicle]);
            }
            mysql_tquery(g_iHandle, "INSERT INTO `cars` (`carModel`) VALUES(0)", "OnCarCreated", "d", i);
            return i;
		}
	}
	return -1;
}

Car_Delete(carid)
{
    if (carid != -1 && CarData[carid][carExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carID]);
		mysql_tquery(g_iHandle, string);

		if (IsValidVehicle(CarData[carid][carVehicle]))
			DestroyVehicle(CarData[carid][carVehicle]);
		Car_RemoveAllItems(carid);

        CarData[carid][carExists] = false;
	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;
	}
	return 1;
}

Car_Save(carid)
{
	static
	    query[900];

	if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
	{
	    for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
	}
    format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d', `carParked` = '%d'",
        CarData[carid][carModel],
        CarData[carid][carOwner],
        CarData[carid][carPos][0],
        CarData[carid][carPos][1],
        CarData[carid][carPos][2],
        CarData[carid][carPos][3],
        CarData[carid][carColor1],
        CarData[carid][carColor2],
        CarData[carid][carPaintjob],
        CarData[carid][carLocked],
        CarData[carid][carParked] // Novo estado de estacionado
    );
	format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
		query,
		CarData[carid][carMods][0],
		CarData[carid][carMods][1],
		CarData[carid][carMods][2],
		CarData[carid][carMods][3],
		CarData[carid][carMods][4],
		CarData[carid][carMods][5],
		CarData[carid][carMods][6],
		CarData[carid][carMods][7],
		CarData[carid][carMods][8],
		CarData[carid][carMods][9],
		CarData[carid][carMods][10],
		CarData[carid][carMods][11],
		CarData[carid][carMods][12],
		CarData[carid][carMods][13]
	);
	format(query, sizeof(query), "%s, `carImpounded` = '%d', `carImpoundPrice` = '%d', `carFaction` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carWeapon4` = '%d', `carWeapon5` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `carAmmo4` = '%d', `carAmmo5` = '%d' WHERE `carID` = '%d'",
		query,
		CarData[carid][carImpounded],
		CarData[carid][carImpoundPrice],
		CarData[carid][carFaction],
		CarData[carid][carWeapons][0],
		CarData[carid][carWeapons][1],
		CarData[carid][carWeapons][2],
		CarData[carid][carWeapons][3],
		CarData[carid][carWeapons][4],
		CarData[carid][carAmmo][0],
		CarData[carid][carAmmo][1],
		CarData[carid][carAmmo][2],
		CarData[carid][carAmmo][3],
		CarData[carid][carAmmo][4],
		CarData[carid][carID]
	);
	return mysql_tquery(g_iHandle, query);
}

Entrance_Delete(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		if (EntranceData[entranceid][entranceType] == 3)
		    DestroyForklifts(entranceid);

	    EntranceData[entranceid][entranceExists] = false;
	    EntranceData[entranceid][entranceID] = 0;
	}
	return 1;
}

Entrance_Save(entranceid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
	    SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
	    SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
	    EntranceData[entranceid][entranceIcon],
	    EntranceData[entranceid][entranceLocked],
	    EntranceData[entranceid][entrancePos][0],
	    EntranceData[entranceid][entrancePos][1],
	    EntranceData[entranceid][entrancePos][2],
	    EntranceData[entranceid][entrancePos][3],
	    EntranceData[entranceid][entranceInt][0],
	    EntranceData[entranceid][entranceInt][1],
	    EntranceData[entranceid][entranceInt][2],
	    EntranceData[entranceid][entranceInt][3],
	    EntranceData[entranceid][entranceInterior],
	    EntranceData[entranceid][entranceExterior],
	    EntranceData[entranceid][entranceExteriorVW],
	    EntranceData[entranceid][entranceType]
	);
	format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d' WHERE `entranceID` = '%d'",
	    query,
	    EntranceData[entranceid][entranceCustom],
	    EntranceData[entranceid][entranceWorld],
	    EntranceData[entranceid][entranceID]
	);
	return mysql_tquery(g_iHandle, query);
}

IsPlayerNearMine(playerid)
{
	new
	    id = -1;

	if ((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobType] == 5)
		return 1;

	return 0;
}

IsPlayerInWarehouse(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
	    return 1;

	return 0;
}

IsPlayerInBank(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 2)
	    return 1;

	return 0;
}

Entrance_Inside(playerid)
{
	if (PlayerData[playerid][pEntrance] != -1)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
	        return i;
	}
	return -1;
}

Entrance_GetLink(playerid)
{
	if (GetPlayerVirtualWorld(playerid) > 0)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
			return EntranceData[i][entranceID];
	}
	return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
			return i;
	}
	return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
		return i;
	}
	return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
	{
		if (GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
			return i;
	}
	return -1;
}

Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);
		    
		    
  		static
 			string[64];

		

		if (strcmp(EntranceData[entranceid][entranceName], "Apreensao") == 0)
		{
			format(string, sizeof(string), "/prender");
			EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		    EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(1247, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
		}
		else
		{
			EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(1239, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
		}
        
  if (EntranceData[entranceid][entranceIcon] != 0)
			EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
	}
	return 1;
}

DestroyForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);

        	EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
        }
        return 1;
	}
	return 0;
}

CreateForklifts(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
        EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
		EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
		EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
		EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
		EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
		EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
		EntranceData[entranceid][entranceForklift][6] = CreateVehicle(427, 2264.7024, -1216.4608, 1048.4707, -180.1799, -1, -1, 100); // forklift 7

		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
			LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);

			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehFuel] = 100;
			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehLoadType] = 0;
		}
	}
	return 1;
}

Entrance_Create(playerid, name[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!EntranceData[i][entranceExists])
		    {
    	        EntranceData[i][entranceExists] = true;
        	    EntranceData[i][entranceIcon] = 0;
        	    EntranceData[i][entranceType] = 0;
        	    EntranceData[i][entranceCustom] = 0;
        	    EntranceData[i][entranceLocked] = 0;

				format(EntranceData[i][entranceName], 32, name);
				EntranceData[i][entrancePass][0] = 0;

    	        EntranceData[i][entrancePos][0] = x;
    	        EntranceData[i][entrancePos][1] = y;
    	        EntranceData[i][entrancePos][2] = z;
    	        EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

				EntranceData[i][entranceInterior] = 0;
				EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
				EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

				Entrance_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Business_RemoveVehicle(bizid, modelid)
{
	static
	    query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
	    DealershipCars[bizid][i][vehModel] = 0;
	    DealershipCars[bizid][i][vehPrice] = 0;

	    format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
		mysql_tquery(g_iHandle, query);

		return 1;
	}
	return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
	static
	    query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
	    mysql_tquery(g_iHandle, query, "OnDealerCarCreated", "dd", bizid, i);

	    return 1;
	}
	return 0;
}

Business_CarMenu(playerid, bizid)
{
 	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Compra de Carro", MODEL_SELECTION_BUY_CAR, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

Business_EditCars(playerid, bizid)
{
	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Carros da concessionaria", MODEL_SELECTION_DEALER, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

forward Pump_Load(bizid);
public Pump_Load(bizid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if ((id = Pump_GetFreeID()) != -1)
	{
	    PumpData[id][pumpExists] = true;
	    PumpData[id][pumpBusiness] = bizid;
	    PumpData[id][pumpID] = cache_get_field_int(i, "pumpID");
	    PumpData[id][pumpPos][0] = cache_get_field_float(i, "pumpPosX");
	    PumpData[id][pumpPos][1] = cache_get_field_float(i, "pumpPosY");
	    PumpData[id][pumpPos][2] = cache_get_field_float(i, "pumpPosZ");
	    PumpData[id][pumpPos][3] = cache_get_field_float(i, "pumpPosA");
	    PumpData[id][pumpFuel] = cache_get_field_int(i, "pumpFuel");

	    PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
	    Pump_Refresh(id);
	}
	return 1;
}

Pump_GetFreeID()
{
	for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (!PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		foreach (new i : Player) if (PlayerData[i][pGasPump] == pumpid) {
		    StopRefilling(i);
		}
	    PumpData[pumpid][pumpExists] = false;
	    PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}

Pump_Create(playerid, bizid)
{
    static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle,
		string[64],
		id = -1;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if ((id = Pump_GetFreeID()) != -1)
  		{
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			PumpData[id][pumpExists] = true;
			PumpData[id][pumpBusiness] = bizid;
			PumpData[id][pumpPos][0] = x;
			PumpData[id][pumpPos][1] = y;
			PumpData[id][pumpPos][2] = z;
			PumpData[id][pumpPos][3] = angle;
            PumpData[id][pumpFuel] = 2000;
			PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

			format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
			mysql_tquery(g_iHandle, string, "OnPumpCreated", "d", id);
			return id;
		}
	}
	return -1;
}

Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    static
	        string[128];

		format(string, sizeof(string), "[Bomba de Combustivel: %d]\n{FFFFFF}Gasolina: %d litros", pumpid, PumpData[pumpid][pumpFuel]);
		//format(string, sizeof(string), "{FFFFFF}Combustivel: %d litros", PumpData[pumpid][pumpFuel]);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
        PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
	}
	return 1;
}

Pump_Save(pumpid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
	    PumpData[pumpid][pumpPos][0],
	    PumpData[pumpid][pumpPos][1],
	    PumpData[pumpid][pumpPos][2],
		PumpData[pumpid][pumpPos][3],
	    PumpData[pumpid][pumpFuel],
	    BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
	    PumpData[pumpid][pumpID]
	);
	return mysql_tquery(g_iHandle, query);
}
House_Create(playerid, address[], price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!HouseData[i][houseExists])
		    {
    	        HouseData[i][houseExists] = true;
        	    HouseData[i][houseOwner] = 0;
            	HouseData[i][housePrice] = price;
            	HouseData[i][houseMoney] = 0;

				format(HouseData[i][houseAddress], 32, address);

    	        HouseData[i][housePos][0] = x;
    	        HouseData[i][housePos][1] = y;
    	        HouseData[i][housePos][2] = z;
    	        HouseData[i][housePos][3] = angle;

                HouseData[i][houseInt][0] = 2269.8772;
                HouseData[i][houseInt][1] = -1210.3240;
                HouseData[i][houseInt][2] = 1047.5625;
                HouseData[i][houseInt][3] = 90.0000;

				HouseData[i][houseInterior] = 10;
				HouseData[i][houseExterior] = GetPlayerInterior(playerid);
				HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

				HouseData[i][houseLights] = false;
				HouseData[i][houseLocked] = false;

				House_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

House_RemoveFurniture(houseid)
{
	if (HouseData[houseid][houseExists])
	{
	    static
	        string[64];

	    for (new i = 0; i != MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	        FurnitureData[i][furnitureExists] = false;
	        FurnitureData[i][furnitureModel] = 0;
            FurnitureData[i][furnitureHouse] = -1;

	        DestroyDynamicObject(FurnitureData[i][furnitureObject]);
		}
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

House_Delete(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		House_RemoveFurniture(houseid);
		House_RemoveAllItems(houseid);

	    HouseData[houseid][houseExists] = false;
	    HouseData[houseid][houseOwner] = 0;
	    HouseData[houseid][houseID] = 0;
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Business_ProductMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Telefone - %s\nGPS  - %s\nSpray - %s\nMochila- %s\nAgua - %s\nPepsi - %s\nLotería - %s\nRadio Portatil - %s\nLata de Gasolina - %s\nPé de Cabra - %s\nBoomBox - %s\nMáscara - %s\nPrimeiros Socorros - %s\nKit de Reparo - %s\nComponente NOS - %s\nBate - %s\nPizza *Congelada* - %s\nSandwich *Congelado* - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Produtos", string, "Modificar", "Cancelar");
		}
		case 2:
	    {
			format(string, sizeof(string), "Cartucho - %s\nMunicão - %s\nColete - %s\nDesert Eagle - %s\nRemington 870 - %s\nM14 Rifle - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Produtos", string, "Modificar", "Cancelar");
		}
		case 3:
	    {
			format(string, sizeof(string), "Roupa - %s\nÓculos - %s\nGorros - %s\nLenços - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Produtos", string, "Modificar", "Cancelar");
		}
		case 4:
	    {
		format(string, sizeof(string), "Agua - %s\nRefrigerante - %s\nBatatas Fritas - %s\nHambúrguer de Queijo - %s\nHambúrguer de Frango - %s\nNuggets - %s\nSalada - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Produtos", string, "Modificar", "Cancelar");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
   			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Produtos", string, "Modificar", "Cancelar");
		}
	}
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Telefone - %s\nGPS  - %s\nSpray - %s\nMochila- %s\nAgua - %s\nPepsi - %s\nLotería - %s\nRadio Portatil - %s\nLata de Gasolina - %s\nPé de Cabra - %s\nBoomBox - %s\nMáscara - %s\nPrimeiros Socorros - %s\nKit de Reparo - %s\nComponente NOS - %s\nBate - %s\nPizza *Congelada* - %s\nSandwich *Congelado* - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizID], string, "Comprar", "Cancelar");
		}
		case 2:
	    {
				format(string, sizeof(string), "Bebida 1 - %s\nBebida 2 - %s\nBebida 3 - %s\nBebida 4 - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizID], string, "Comprar", "Cancelar");
		}
		case 3:
	    {
			format(string, sizeof(string), "Roupa - %s\nÓculos - %s\nGorros - %s\nLenços - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizID], string, "Comprar", "Cancelar");
		}
		case 4:
		{
            format(string, sizeof(string), "Agua - %s\nRefrigerante - %s\nBatatas Fritas - %s\nHambúrguer de Queijo - %s\nHambúrguer de Frango - %s\nNuggets - %s\nSalada - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizID], string, "Comprar", "Cancelar");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BusinessData[bizid][bizID], string, "Comprar", "Cancelar");
		}
	}
	return 1;
}

Business_Save(bizid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d'",
		SQL_ReturnEscaped(BusinessData[bizid][bizName]),
		SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
		BusinessData[bizid][bizOwner],
		BusinessData[bizid][bizType],
		BusinessData[bizid][bizPrice],
		BusinessData[bizid][bizPos][0],
		BusinessData[bizid][bizPos][1],
		BusinessData[bizid][bizPos][2],
		BusinessData[bizid][bizPos][3],
		BusinessData[bizid][bizInt][0],
		BusinessData[bizid][bizInt][1],
		BusinessData[bizid][bizInt][2],
		BusinessData[bizid][bizInt][3],
		BusinessData[bizid][bizInterior],
		BusinessData[bizid][bizExterior],
		BusinessData[bizid][bizExteriorVW],
		BusinessData[bizid][bizLocked],
		BusinessData[bizid][bizVault],
		BusinessData[bizid][bizProducts]
	);
	for (new i = 0; i < 20; i ++) {
		format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
	}
	format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d' WHERE `bizID` = '%d'",
		query,
		BusinessData[bizid][bizSpawn][0],
		BusinessData[bizid][bizSpawn][1],
		BusinessData[bizid][bizSpawn][2],
		BusinessData[bizid][bizSpawn][3],
		BusinessData[bizid][bizDeliver][0],
		BusinessData[bizid][bizDeliver][1],
		BusinessData[bizid][bizDeliver][2],
		BusinessData[bizid][bizShipment],
		BusinessData[bizid][bizID]
	);
	return mysql_tquery(g_iHandle, query);
}

Business_Inside(playerid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
	    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Car_Inside(playerid)
{
	new carid;

	if (IsPlayerInAnyVehicle(playerid) && (carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
	    return carid;

	return -1;
}

Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}

Business_NearestDeliver(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
	}
	return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
	{
		if (GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
			return i;
	}
	return -1;
}

Business_Refresh(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		static
		    string[128],
			pickup = 1239;

		if (!BusinessData[bizid][bizOwner]) {
			format(string, sizeof(string), "[%s]\n%s", FormatNumber(BusinessData[bizid][bizPrice]), BusinessData[bizid][bizName]);
            BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else
		{
			if (BusinessData[bizid][bizLocked]) {
			    format(string, sizeof(string), "%s (Fechada)", BusinessData[bizid][bizName]);
			}
			else {
			    format(string, sizeof(string), "%s", BusinessData[bizid][bizName]);
			}
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, (BusinessData[bizid][bizLocked]) ? (COLOR_LIGHTRED) : (COLOR_WHITE), BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}

		if (BusinessData[bizid][bizType] == 6) {
        	BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 7) {
		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] - 0.6, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else {
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		if (BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0)
		{
		    format(string, sizeof(string), "%s\n\nPonto de Entrega", BusinessData[bizid][bizName]);

		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
		    BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

Business_Create(playerid, type, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!BusinessData[i][bizExists])
		    {
    	        BusinessData[i][bizExists] = true;
        	    BusinessData[i][bizOwner] = 0;
            	BusinessData[i][bizPrice] = price;
            	BusinessData[i][bizType] = type;

				format(BusinessData[i][bizName], 32, "Empresa Estadual");

    	        BusinessData[i][bizPos][0] = x;
    	        BusinessData[i][bizPos][1] = y;
    	        BusinessData[i][bizPos][2] = z;
    	        BusinessData[i][bizPos][3] = angle;

    	        BusinessData[i][bizSpawn][0] = x;
    	        BusinessData[i][bizSpawn][1] = y;
    	        BusinessData[i][bizSpawn][2] = z;
    	        BusinessData[i][bizSpawn][3] = angle;

    	        BusinessData[i][bizDeliver][0] = 0.0;
    	        BusinessData[i][bizDeliver][1] = 0.0;
    	        BusinessData[i][bizDeliver][2] = 0.0;

            	BusinessData[i][bizInt][0] = -27.3074;
            	BusinessData[i][bizInt][1] = -30.8741;
            	BusinessData[i][bizInt][2] = 1003.5573;
            	BusinessData[i][bizInt][3] = 0.0000;
				BusinessData[i][bizInterior] = 4;

				BusinessData[i][bizPrices][0] = 1075;
	            BusinessData[i][bizPrices][1] = 325;
	            BusinessData[i][bizPrices][2] = 55;
	            BusinessData[i][bizPrices][3] = 400;
	            BusinessData[i][bizPrices][4] = 34;
	            BusinessData[i][bizPrices][5] = 23;
	            BusinessData[i][bizPrices][6] = 60;
	            BusinessData[i][bizPrices][7] = 400;
	            BusinessData[i][bizPrices][8] = 60;
	            BusinessData[i][bizPrices][9] = 60;
	            BusinessData[i][bizPrices][10] = 450;
	            BusinessData[i][bizPrices][11] = 400;
	            BusinessData[i][bizPrices][12] = 460;
                BusinessData[i][bizPrices][13] = 70;
                BusinessData[i][bizPrices][14] = 80;
	            BusinessData[i][bizPrices][15] = 23;
	            BusinessData[i][bizPrices][16] = 44;
	            BusinessData[i][bizPrices][17] = 59;

				BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
				BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

				BusinessData[i][bizLocked] = true;
				BusinessData[i][bizVault] = 0;
				BusinessData[i][bizProducts] = 100;
				BusinessData[i][bizShipment] = 0;

				Business_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock Business_RemoveCars(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
	{
	    static
	        string[32];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

stock Business_RemovePumps(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
	{
	    static
	        string[32];

	    foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
	    {
	        StopRefilling(i);
	    }
		for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
		{
  			DestroyDynamicObject(PumpData[i][pumpObject]);
			DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);

		    PumpData[i][pumpExists] = 0;
		    PumpData[i][pumpFuel] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Business_Delete(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player) if (PlayerData[i][pShipment] == bizid) {
			PlayerData[i][pShipment] = -1;
			PlayerData[i][pDeliverShipment] = 0;

			DisablePlayerCheckpoint(i);
		}
        if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		Business_RemovePumps(bizid);
		Business_RemoveCars(bizid);

	    BusinessData[bizid][bizExists] = false;
	    BusinessData[bizid][bizOwner] = 0;
	    BusinessData[bizid][bizID] = 0;
	}
	return 1;
}

Business_IsOwner(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] == 99999999 && PlayerData[playerid][pAdmin] > 0)
		return 1;

    if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}


// Função OpenInventory modificada para enviar informações no chat
forward OpenInventory2(playerid);
public OpenInventory2(playerid)
{
    if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pCharacter])
        return 0;

    new
        itemLine[128],
        itemEntry[64],
        itemCount = 0;

    itemLine[0] = '\0'; // Inicializando a string de linha de item

    for (new i = 0; i < PlayerData[playerid][pCapacity]; i++)
    {
        if (InventoryData[playerid][i][invExists])
        {
            new
                itemQuantity = InventoryData[playerid][i][invQuantity],
                itemName[32];

            // Obter o nome do item
            strunpack(itemName, InventoryData[playerid][i][invItem]);

            // Adicionar a entrada do item à linha
            format(itemEntry, sizeof(itemEntry), "%s (%d) ", itemName, itemQuantity);
            strcat(itemLine, itemEntry);

            itemCount++;

            // Se houver 3 itens na linha ou for o último item, enviar a mensagem
            if (itemCount == 3 || i == PlayerData[playerid][pCapacity] - 1)
            {
                SendClientMessage(playerid, -1, itemLine);
                itemLine[0] = '\0'; // Limpar a linha de item
                itemCount = 0; // Resetar a contagem de itens
            }
        }
    }

    if (itemLine[0] == '\0') // Se a linha de item estiver vazia, o inventário está vazio
    {
        SendClientMessage(playerid, -1, "Seu inventário está vazio.");
    }

    return 1;
}


forward OpenInventory(playerid);
public OpenInventory(playerid)
{
    if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pCharacter])
	    return 0;

	static
	    items[MAX_INVENTORY],
		amounts[MAX_INVENTORY];

    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
 		if (InventoryData[playerid][i][invExists]) {
   			items[i] = InventoryData[playerid][i][invModel];
   			amounts[i] = InventoryData[playerid][i][invQuantity];
		}
		else {
		    items[i] = -1;
		    amounts[i] = -1;
		}
	}
	PlayerData[playerid][pStorageSelect] = 0;
	return ShowModelSelectionMenu(playerid, "Inventario", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

forward SelectTD(playerid);
public SelectTD(playerid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	return SelectTextDraw(playerid, -1);
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnVehicleHealth(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}

ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}
	if (PlayerData[playerid][pMaskOn])
	    format(name, sizeof(name), "Mascarado_#%d", PlayerData[playerid][pMaskID]);

	return name;
}

ReturnIP(playerid)
{
	static
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ShowStatsTextForPlayer(playerid, targetid)
{
    new
        account[24],
        origin[32],
        string[256],
        count;

    for (new i = 0; i < MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
        count++;
    }
    if (PlayerData[targetid][pAdmin] > 1) account = "Admin";
    else if (PlayerData[targetid][pAdmin] == 1) account = "Tester";
    else account = "Player";

    format(origin, 32, "%.16s", PlayerData[targetid][pOrigin]);

    if (strlen(PlayerData[targetid][pOrigin]) > 16)
        strcat(origin, "...");

    format(string, sizeof(string), "Sexo: %s | Nascimento: %s | Origem: %s", (PlayerData[targetid][pGender] == 2) ? ("Feminino") : ("Masculino"), PlayerData[targetid][pBirthdate], origin);
    SendClientMessage(playerid, -1, string);

    format(string, sizeof(string), "Nome: %s (ID: %d)", ReturnName(targetid), targetid);
    SendClientMessage(playerid, -1, string);

    format(string, sizeof(string), "Horas: %d | Trabalho: %s | Inventario: %d/%d", PlayerData[targetid][pPlayingHours], Job_GetName(PlayerData[targetid][pJob]), count, MAX_INVENTORY);
    SendClientMessage(playerid, -1, string);

    format(string, sizeof(string), "Dinheiro: %s | Banco: %s | Poupanca: %s", FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]), FormatNumber(PlayerData[targetid][pSavings]));
    SendClientMessage(playerid, -1, string);

    format(string, sizeof(string), "Tester: %s | Admin: %s", (PlayerData[targetid][pTester]) ? ("Sim") : ("Nao"), (PlayerData[targetid][pAdmin]) ? ("Sim") : ("Nao"));
    SendClientMessage(playerid, -1, string);

    return 1;
}

/*
ShowStatsForPlayer(playerid, targetid)
{
    new
	    account[24],
	    origin[32],
	    string[128],
		count;

	for (new i = 0; i < MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
	    count++;
	}
	if (PlayerData[targetid][pAdmin] > 1) account = "Admin";
 	else if (PlayerData[targetid][pAdmin] == 1) account = "Tester";
	else account = "Player";

	format(origin, 32, "%.16s", PlayerData[targetid][pOrigin]);

	if (strlen(PlayerData[targetid][pOrigin]) > 16)
		strcat(origin, "...");

	format(string, sizeof(string), "~g~Sexo:~w~ %s~n~~g~Nascimento:~w~ %s~n~~g~Origem:~w~ %s", (PlayerData[targetid][pGender] == 2) ? ("Feminino") : ("Masculino"), PlayerData[targetid][pBirthdate], origin);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][42], string);

	format(string, sizeof(string), "%s (ID: %d)", ReturnName(targetid), targetid);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][43], string);

	format(string, sizeof(string), "~g~Horas:~w~ %d~n~~g~Trabalho:~w~ %s~n~~g~Inventario:~w~ %d/%d", PlayerData[targetid][pPlayingHours], Job_GetName(PlayerData[targetid][pJob]), count, MAX_INVENTORY);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][46], string);

    format(string, sizeof(string), "~g~Dinheiro:~w~ %s~n~~g~Banco:~w~ %s~n~~g~Poupanca:~w~ %s", FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]), FormatNumber(PlayerData[targetid][pSavings]));
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][44], string);

	format(string, sizeof(string), "~g~Conta:~w~ %s~n~~g~Tester:~w~ %s~n~~g~Admin:~w~ %s", account, (PlayerData[targetid][pTester]) ? ("Sim") : ("Nao"), (PlayerData[targetid][pAdmin]) ? ("Sim") : ("Nao"));
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][45], string);

	if (!PlayerData[playerid][pDisplayStats])
	{
	    if (targetid != playerid)
		{
		    for (new i = 40; i < 50; i ++) if (i != 47 && i != 48) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
		}
		else for (new i = 40; i < 50; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SelectTextDraw(playerid, -1);
		PlayerData[playerid][pDisplayStats] = true;
	}
	else
	{
	    if (PlayerData[playerid][pDisplayStats] == 2) {
	        for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    else for (new i = 40; i < 50; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		CancelSelectTextDraw(playerid);
		PlayerData[playerid][pDisplayStats] = false;
	}
	return 1;
}

*/

Blacklist_Add(ip[], username[], banner[], reason[])
{
	static
	    string[256];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_tquery(g_iHandle, string);
}

Blacklist_Remove(username[])
{
	static
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(g_iHandle, string);
}

Blacklist_RemoveIP(ip[])
{
	static
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(g_iHandle, string);
}

stock Inventory_Clear(playerid)
{
	static
	    string[64];

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (InventoryData[playerid][i][invExists])
	    {
	        InventoryData[playerid][i][invExists] = 0;
	        InventoryData[playerid][i][invModel] = 0;
	        InventoryData[playerid][i][invQuantity] = 0;
		}
	}
	format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	return mysql_tquery(g_iHandle, string);
}

stock Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
		Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
	    Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
	    Inventory_Remove(playerid, item, -1);

	return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

stock Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
		return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        return i;
	}
	return -1;
}

stock Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
        count++;
	}
	return count;
}

stock Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	    return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

stock Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
	new
	    itemid = Inventory_GetItemID(playerid, item),
	    string[128];

	if (itemid != -1)
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Inventory_GetFreeID(playerid);

	    if (itemid != -1)
	    {
	        InventoryData[playerid][itemid][invExists] = true;
	        InventoryData[playerid][itemid][invModel] = model;
	        InventoryData[playerid][itemid][invQuantity] = quantity;

	        strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

			if (strcmp(item, "Demo Soda") != 0)
			{
				format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
				mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
			}
	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
	    if (InventoryData[playerid][itemid][invQuantity] > 0)
	    {
	        InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
		    InventoryData[playerid][itemid][invExists] = false;
		    InventoryData[playerid][itemid][invModel] = 0;
		    InventoryData[playerid][itemid][invQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}
stock House_WeaponStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[320];

	string[0] = 0;

	for (new i = 0; i < 10; i ++)
	{
	    if (!HouseData[houseid][houseWeapons][i])
	        format(string, sizeof(string), "%sSlot Vazio\n", string);

		else
			format(string, sizeof(string), "%s%s (Mun: %d)\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Armazenamento de Arma", string, "Selecionar", "Cancelar");
	return 1;
}

stock House_ShowItems(playerid, houseid)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[MAX_HOUSE_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        format(string, sizeof(string), "%sSlot Vazio\n", string);

		else {
			strunpack(name, HouseStorage[houseid][i][hItemName]);

			if (HouseStorage[houseid][i][hItemQuantity] == 1) {
			    format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Armazenamento de item", string, "Selecionar", "Cancelar");
	return 1;
}

stock House_OpenStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		items[2],
		string[MAX_HOUSE_STORAGE * 32];

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if (HouseStorage[houseid][i][hItemExists]) {
	    items[0]++;
	}
	for (new i = 0; i < 10; i ++) if (HouseData[houseid][houseWeapons][i]) {
	    items[1]++;
	}
	if (!House_IsOwner(playerid, houseid))
	    format(string, sizeof(string), "Armazenamento de item (%d/%d)\nArmazenamento de Arma (%d/10)", items[0], MAX_HOUSE_STORAGE, items[1]);

	else
		format(string, sizeof(string), "Armazenamento de item (%d/%d)\nArmazenamento de Arma (%d/10)\nDinheiro Seguro (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "Armazenamento da Casa", string, "Selecionar", "Cancelar");
	return 1;
}

stock House_GetItemID(houseid, item[])
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        continue;

		if (!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

stock House_GetFreeID(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        return i;
	}
	return -1;
}

stock House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = House_GetFreeID(houseid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        HouseStorage[houseid][itemid][hItemExists] = true;
	        HouseStorage[houseid][itemid][hItemModel] = model;
	        HouseStorage[houseid][itemid][hItemQuantity] = quantity;

	        strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	    mysql_tquery(g_iHandle, string);

	    HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

stock House_RemoveItem(houseid, item[], quantity = 1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid != -1)
	{
	    if (HouseStorage[houseid][itemid][hItemQuantity] > 0)
	    {
	        HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
		}
		if (quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
		    HouseStorage[houseid][itemid][hItemExists] = false;
		    HouseStorage[houseid][itemid][hItemModel] = 0;
		    HouseStorage[houseid][itemid][hItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemExists] = false;
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 10; i ++) {
	    HouseData[houseid][houseWeapons][i] = 0;
	    HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

stock Car_GetItemID(carid, item[])
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        continue;

		if (!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

stock Car_GetFreeID(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        return i;
	}
	return -1;
}

stock Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Car_GetFreeID(carid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        CarStorage[carid][itemid][cItemExists] = true;
	        CarStorage[carid][itemid][cItemModel] = model;
	        CarStorage[carid][itemid][cItemQuantity] = quantity;

	        strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", CarData[carid][carID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnCarStorageAdd", "dd", carid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	    mysql_tquery(g_iHandle, string);

	    CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

stock Car_RemoveItem(carid, item[], quantity = 1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid != -1)
	{
	    if (CarStorage[carid][itemid][cItemQuantity] > 0)
	    {
	        CarStorage[carid][itemid][cItemQuantity] -= quantity;
		}
		if (quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
		    CarStorage[carid][itemid][cItemExists] = false;
		    CarStorage[carid][itemid][cItemModel] = 0;
		    CarStorage[carid][itemid][cItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

Car_RemoveAllItems(carid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
        CarStorage[carid][i][cItemExists] = false;
        CarStorage[carid][i][cItemModel] = 0;
        CarStorage[carid][i][cItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `carstorage` WHERE `ID` = '%d'", CarData[carid][carID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 5; i ++) {
	    CarData[carid][carWeapons][i] = 0;
	    CarData[carid][carAmmo][i] = 0;
	}
	return 1;
}

FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

ResetFaction(playerid)
{
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 3.0 * floatsin(-fAngle, degrees);
		fY -= 3.0 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

StopDragging(playerid)
{
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

ResetEditing(playerid)
{
    if (PlayerData[playerid][pEditFurniture] != -1)
		Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	if (PlayerData[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerData[playerid][pEditPump]);
		PlayerData[playerid][pGasStation] = -1;
	}
	PlayerData[playerid][pEditType] = 0;
 	PlayerData[playerid][pEditGate] = -1;
 	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	return 1;
}

ResetPlayer(playerid)
{
	if (PlayerData[playerid][pDrinking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

    if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pWaypoint])
	{
        PlayerData[playerid][pWaypoint] = 0;
        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	foreach (new i : Player) if (PlayerData[i][pDraggedBy] == playerid) {
	    StopDragging(i);
	}
	if (PlayerData[playerid][pDragged]) {
	    StopDragging(playerid);
	}
    PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pCookingHouse] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = -1;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pAdTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pSorting] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pHideTags] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;

	if (Inventory_HasItem(playerid, "Mascara")) {
	    Inventory_Remove(playerid, "Mascara");
	}
	ResetNameTag(playerid);

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);

	HidePlayerFooter(playerid);
	HoldWeapon(playerid, 0);
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
            PlayerData[playerid][pGuns][i] = 0;
            PlayerData[playerid][pAmmo][i] = 0;
	    }
	}
	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

GiveMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	GivePlayerMoney(playerid, amount);

	return 1;
}

GetPlayerSQLID(playerid)
{
	return (PlayerData[playerid][pID]);
}

GetMoney(playerid)
{
	return (PlayerData[playerid][pMoney]);
}

IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
	        continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		    continue;

		else
		    return 0;
	}
	return 1;
}

IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}

KickEx(playerid)
{
	if (PlayerData[playerid][pKicked])
	    return 0;

	PlayerData[playerid][pKicked] = 1;
	SetTimerEx("KickTimer", 200, false, "d", playerid);

	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (PlayerData[playerid][pKicked])
	{
		return Kick(playerid);
	}
	return 0;
}

stock SetDefaultSpawn(playerid)
{
    SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, 0);


	if(PlayerData[playerid][pSpawnPoint] == 0) // Spawn
	{
	    SetPlayerPos(playerid, 2.7483,28.6437,1199.5938);
	    SetPlayerFacingAngle(playerid, 0.0);
	}
	if(PlayerData[playerid][pSpawnPoint] == 1) // Faction
	{
	    new faction = PlayerData[playerid][pFactionID];
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "Você foi enviado para o spawn civil.");
	        SetPlayerPos(playerid, 2.7483,28.6437,1199.5938);
	    	SetPlayerFacingAngle(playerid, 0.0);
		}
		SetPlayerPos(playerid,FactionData[faction][SpawnX],FactionData[faction][SpawnY],FactionData[faction][SpawnZ]);
		SetPlayerInterior(playerid,FactionData[faction][SpawnInterior]);
		SetPlayerVirtualWorld(playerid, FactionData[faction][SpawnVW]);
	}
	if(PlayerData[playerid][pSpawnPoint] == 2)
	{
	    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RespawnPlayer(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
        new
		    Float:x,
		    Float:y,
	    	Float:z;

	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 1);
	}
	SpawnPlayer(playerid);
	SetDefaultSpawn(playerid);
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock IsPlayerSpawned(playerid)
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
	    return 0;

	return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

stock GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendTesterMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if ((!PlayerData[i][pDisableTester]) && (PlayerData[i][pTester] >= 1 || PlayerData[i][pAdmin] > 0)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if ((!PlayerData[i][pDisableTester]) && (PlayerData[i][pTester] >= 1 || PlayerData[i][pAdmin] > 0)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}

stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Radio Portatil") && PlayerData[i][pChannel] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Radio Portatil") && PlayerData[i][pChannel] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}
stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];


	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Warning: Directory \"%s\" doesn't exist.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

CreateTextDraws(playerid) {
   
	PlayerData[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 239.000000, 156.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][0], 0.519999, 11.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][0], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][0], 416.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][0], 0);

	PlayerData[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 326.000000, 158.000000, "Meu Personagem");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][1], 0.330000, 1.199998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][1], 0);

	PlayerData[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 263.000000, 181.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][2], 0.489998, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][2], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][2], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][2], 1);

	PlayerData[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 263.000000, 204.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][3], 0.490000, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][3], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][3], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][3], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][3], 1);

	PlayerData[playerid][pTextdraws][4] = CreatePlayerTextDraw(playerid, 263.000000, 227.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][4], 0.490000, 1.299996);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][4], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][4], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][4], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][4], 1);

	PlayerData[playerid][pTextdraws][5] = CreatePlayerTextDraw(playerid, 324.000000, 182.000000, "Slot Vazio");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][5], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][5], 0);

	PlayerData[playerid][pTextdraws][6] = CreatePlayerTextDraw(playerid, 324.000000, 205.000000, "Slot Vazio");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][6], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][6], 0);

	PlayerData[playerid][pTextdraws][7] = CreatePlayerTextDraw(playerid, 324.000000, 228.000000, "Slot Vazio");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][7], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][7], 0);

	PlayerData[playerid][pTextdraws][8] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][8], 0.000000, 480.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][8], 1482184789);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][8], 640.000000, 42.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][8], 0);
	
	Localidade[playerid] = CreatePlayerTextDraw(playerid, 7.496343, 427.583343, "_");
	PlayerTextDrawBackgroundColor(playerid, Localidade[playerid], 255);
	PlayerTextDrawFont(playerid, Localidade[playerid], 1);
	PlayerTextDrawLetterSize(playerid, Localidade[playerid], 0.299999, 1.299998);
	PlayerTextDrawColor(playerid, Localidade[playerid], -65281);
	PlayerTextDrawSetOutline(playerid, Localidade[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Localidade[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Localidade[playerid], 1);

	PlayerData[playerid][pTextdraws][11] = CreatePlayerTextDraw(playerid, 432.000000, 140.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][11], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][11], 0.800000, 8.299997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][11], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][11], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][11], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][11], 199.000000, 64.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][11], 0);

	PlayerData[playerid][pTextdraws][12] = CreatePlayerTextDraw(playerid, 235.000000, 140.000000, "Identificacao Pessoal");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][12], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][12], 0.409999, 1.499999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][12], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][12], 0);

	PlayerData[playerid][pTextdraws][13] = CreatePlayerTextDraw(playerid, 209.000000, 159.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][13], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][13], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][13], 0.240000, -0.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][13], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][13], 52.000000, 51.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

	PlayerData[playerid][pTextdraws][14] = CreatePlayerTextDraw(playerid, 271.000000, 159.000000, "~r~Nome:~w~ Nome Do Personagem");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][14], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][14], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][14], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][14], 0);

	PlayerData[playerid][pTextdraws][15] = CreatePlayerTextDraw(playerid, 271.000000, 179.000000, "~r~Nascimento:~w~ por favor especifique...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][15], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][15], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][15], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][15], 0);

	PlayerData[playerid][pTextdraws][16] = CreatePlayerTextDraw(playerid, 271.000000, 169.000000, "~r~Genero:~w~ Masculino");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][16], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][16], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][16], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][16], 0);

	PlayerData[playerid][pTextdraws][17] = CreatePlayerTextDraw(playerid, 271.000000, 189.000000, "~r~Origem:~w~ por favor especifique...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][17], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][17], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][17], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][17], 0);

	PlayerData[playerid][pTextdraws][18] = CreatePlayerTextDraw(playerid, 368.000000, 202.000000, "Continuar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][18], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][18], 0.380000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][18], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][18], 0);

	PlayerData[playerid][pTextdraws][19] = CreatePlayerTextDraw(playerid, 272.000000, 171.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][19], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][19], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][19], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][19], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][19], 1);

	PlayerData[playerid][pTextdraws][20] = CreatePlayerTextDraw(playerid, 272.000000, 182.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][20], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][20], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][20], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][20], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][20], 1);

	PlayerData[playerid][pTextdraws][21] = CreatePlayerTextDraw(playerid, 272.000000, 192.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][21], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][21], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][21], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][21], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][21], 1);

	PlayerData[playerid][pTextdraws][22] = CreatePlayerTextDraw(playerid, 367.000000, 205.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][22], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][22], 0.289999, 0.699999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][22], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][22], 424.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][22], 1);

	PlayerData[playerid][pTextdraws][23] = CreatePlayerTextDraw(playerid, 433.000000, 150.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][23], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][23], 0.800000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][23], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][23], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][23], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][23], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][23], 0);

	PlayerData[playerid][pTextdraws][24] = CreatePlayerTextDraw(playerid, 246.000000, 149.000000, "Personalizacao de Personagens");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][24], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][24], 0.370000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][24], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][24], 0);

	PlayerData[playerid][pTextdraws][25] = CreatePlayerTextDraw(playerid, 433.000000, 162.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][25], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][25], 0.800000, 10.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][25], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][25], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][25], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][25], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][25], 0);

	PlayerData[playerid][pTextdraws][26] = CreatePlayerTextDraw(playerid, 291.000000, 172.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][26], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][26], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][26], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][26], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][26], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][26], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][26], 1);

	PlayerData[playerid][pTextdraws][27] = CreatePlayerTextDraw(playerid, 303.000000, 171.500000, "Oculos");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][27], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][27], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][27], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][27], 0);

	PlayerData[playerid][pTextdraws][28] = CreatePlayerTextDraw(playerid, 291.000000, 196.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][28], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][28], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][28], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][28], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][28], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][28], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][28], 1);

	PlayerData[playerid][pTextdraws][29] = CreatePlayerTextDraw(playerid, 310.000000, 195.500000, "Chapeus");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][29], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][29], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][29], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][29], 0);

	PlayerData[playerid][pTextdraws][30] = CreatePlayerTextDraw(playerid, 291.000000, 220.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][30], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][30], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][30], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][30], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][30], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][30], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][30], 1);

	PlayerData[playerid][pTextdraws][31] = CreatePlayerTextDraw(playerid, 301.000000, 219.500000, "Bandana");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][31], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][31], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][31], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][31], 0);

	PlayerData[playerid][pTextdraws][32] = CreatePlayerTextDraw(playerid, 357.000000, 237.000000, "Continuar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][32], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][32], 0.439999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][32], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][32], 0);


	PlayerData[playerid][pTextdraws][33] = CreatePlayerTextDraw(playerid, 356.000000, 240.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][33], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][33], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][33], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][33], 424.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][33], 1);

	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][34], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][34], 0.760000, 4.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][34], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][34], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][34], 85);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][34], 512.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][34], 0);

	PlayerData[playerid][pTextdraws][35] = CreatePlayerTextDraw(playerid, 518.000000, 397.000000, "~w~Combustivel:~r~ 0%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][35], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][35], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][35], 0.250000, 1.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][35], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][35], 0);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][35], 0);

	PlayerData[playerid][pTextdraws][36] = CreatePlayerTextDraw(playerid, 518.000000, 406.200012, "~w~Velocidade:~r~ 0 km/h");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][36], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][36], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][36], 0.250000, 1.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][36], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][36], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][36], 0);

	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][37], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][37], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][37], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][37], 0);

	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][83], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][38], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][83], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][83], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][83], 0);



    PlayerData[playerid][pTextdraws][39] = CreatePlayerTextDraw(playerid, 327.000000, 424.000000, "~w~Rio de Janeiro ~r~Roleplay  ");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][39], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][39], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][39], 0.460000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][39], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][39], 0);

	PlayerData[playerid][pTextdraws][40] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][40], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][40], 0.570000, 12.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][40], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][40], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][40], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][40], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][40], 0);

	PlayerData[playerid][pTextdraws][41] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][41], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][41], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][41], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][41], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][41], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][41], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][41], 0);

	PlayerData[playerid][pTextdraws][42] = CreatePlayerTextDraw(playerid, 199.000000, 174.000000, "~g~Sexo:~w~ Masculino~n~~g~Nascimento:~w~ 17/02/1993~n~~g~Origem:~w~ Estado Unidos");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][42], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][42], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][42], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][42], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][42], 0);

	PlayerData[playerid][pTextdraws][43] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "Jhames Holef (ID: 4)");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][43], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][43], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][43], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][43], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][43], 0);

	PlayerData[playerid][pTextdraws][44] = CreatePlayerTextDraw(playerid, 199.000000, 212.000000, "~g~Dinheiro:~w~ $0~n~~g~Banco:~w~ $0~n~~g~Poupanca:~w~ $0");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][44], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][44], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][44], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][44], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][44], 0);

	PlayerData[playerid][pTextdraws][45] = CreatePlayerTextDraw(playerid, 339.000000, 174.000000, "~g~Conta:~w~ Player~n~~g~Tester:~w~ Nao~n~~g~Admin:~w~ Nao");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][45], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][45], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][45], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][45], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][45], 0);

	PlayerData[playerid][pTextdraws][46] = CreatePlayerTextDraw(playerid, 340.000000, 212.000000, "~g~Ping:~w~ 0~n~~g~Packetloss:~w~ 0.0%~n~~g~Tempo Online:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][46], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][46], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][46], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][46], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][46], 0);

	PlayerData[playerid][pTextdraws][47] = CreatePlayerTextDraw(playerid, 200.000000, 254.000000, "Meu Personagem");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][47], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][47], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][47], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][47], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][47], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][47], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][47], 1);

	PlayerData[playerid][pTextdraws][48] = CreatePlayerTextDraw(playerid, 296.000000, 254.000000, "Meu Inventario");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][48], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][48], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][48], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][48], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][48], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][48], 372.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][48], 1);

	PlayerData[playerid][pTextdraws][49] = CreatePlayerTextDraw(playerid, 389.000000, 254.000000, "Fechar Menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][49], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][49], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][49], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][49], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][49], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][49], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][49], 1);

	PlayerData[playerid][pTextdraws][50] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][50], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][50], 0.569998, 8.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][50], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][50], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][50], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][50], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][50], 0);

	PlayerData[playerid][pTextdraws][51] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][51], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][51], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][51], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][51], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][51], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][51], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][51], 0);

	PlayerData[playerid][pTextdraws][52] = CreatePlayerTextDraw(playerid, 198.000000, 177.000000, "~g~Nome:~w~ Emmet Jackson~n~~g~Conta:~w~ Player~n~~g~Criada:~w~ 23 dias atras~n~~g~Ultimo Login:~w~ 22 dias atras");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][52], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][52], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][52], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][52], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][52], 0);

	PlayerData[playerid][pTextdraws][53] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "#1: Emmet Jones");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][53], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][53], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][53], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][53], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][53], 0);

	PlayerData[playerid][pTextdraws][54] = CreatePlayerTextDraw(playerid, 397.000000, 174.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][54], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][54], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][54], 0.579999, 4.699997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][54], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][54], 53.000000, 48.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][54], 1);

	PlayerData[playerid][pTextdraws][55] = CreatePlayerTextDraw(playerid, 389.000000, 227.000000, "Fechar Menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][55], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][55], 0.329997, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][55], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][55], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][55], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][55], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][55], 1);

	PlayerData[playerid][pTextdraws][56] = CreatePlayerTextDraw(playerid, 200.000000, 227.000000, "<< Voltar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][56], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][56], 0.329998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][56], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][56], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][56], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][56], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][56], 1);

	PlayerData[playerid][pTextdraws][57] = CreatePlayerTextDraw(playerid, 290.000000, 227.000000, "Excluir Personagem");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][57], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][57], 0.309998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][57], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][57], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][57], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][57], 375.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][57], 1);

	PlayerData[playerid][pTextdraws][58] = CreatePlayerTextDraw(playerid, 424.000000, 151.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][58], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][58], 0.600000, 8.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][58], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][58], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][58], 202.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][58], 0);

	PlayerData[playerid][pTextdraws][59] = CreatePlayerTextDraw(playerid, 206.000000, 151.000000, "Tutorial: Explicacao");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][59], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][59], 0.319999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][59], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][59], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][59], 420.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][59], 0);

	PlayerData[playerid][pTextdraws][60] = CreatePlayerTextDraw(playerid, 208.000000, 164.000000, "Agora explicaremos um pouco sobre o servidor~n~E alguns dos principais locias.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][60], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][60], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][60], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][60], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][60], 0);

	PlayerData[playerid][pTextdraws][61] = CreatePlayerTextDraw(playerid, 208.000000, 197.000000, "Para solicitar ajuda, use ~g~~h~/ajudame~w~~n~Um tester~n~vai atender o seu pedido,~n~se houver algum em duty.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][61], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][61], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][61], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][61], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][61], 0);

	PlayerData[playerid][pTextdraws][62] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][62], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][62], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][62], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][62], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][62], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][62], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][62], 0);

	PlayerData[playerid][pTextdraws][63] = CreatePlayerTextDraw(playerid, 596.000000, 56.000000, "100%");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][63], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][63], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][63], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][63], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][63], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][63], 0);

	PlayerData[playerid][pTextdraws][64] = CreatePlayerTextDraw(playerid, 563.000000, 56.000000, "100%");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][64], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][64], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][64], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][64], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][64], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][64], 0);

	PlayerData[playerid][pTextdraws][65] = CreatePlayerTextDraw(playerid, 572.000000, 49.000000, "Fome");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][65], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][65], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][65], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][65], 19.000000, 21.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][65], 2702);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][65], 0.0000, 90.0000, 90.0000);

	PlayerData[playerid][pTextdraws][66] = CreatePlayerTextDraw(playerid, 542.000000, 49.000000, "Sede");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][66], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][66], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][66], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][66], 19.000000, 21.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][66], 1543);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][66], 0.0000, 0.0000, 0.0000);

    PlayerData[playerid][pTextdraws][67] = CreatePlayerTextDraw(playerid, 535.000000, 172.000000, "Colete");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][67], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][67], 0.539999, 1.399999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][67], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][67], 52.000000, 39.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][67], 19142);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][67], -20.0, -90.0, 0.0);

	PlayerData[playerid][pTextdraws][68] = CreatePlayerTextDraw(playerid, 577.000000, 186.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][68], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][68], 0.289999, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][68], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][68], 0);

	PlayerData[playerid][pTextdraws][69] = CreatePlayerTextDraw(playerid, 13.000000, 431.000000, "~b~Destino:~w~ Calculando...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][69], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][69], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][69], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][69], 0);

	PlayerData[playerid][pTextdraws][70] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Tempo na prisao:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][70], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][70], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][70], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][70], 0);

	PlayerData[playerid][pTextdraws][71] = CreatePlayerTextDraw(playerid, 240.000000, 161.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][71], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][71], 0.519999, 9.099995);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][71], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][71], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][71], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][71], 421.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][71], 0);

	PlayerData[playerid][pTextdraws][72] = CreatePlayerTextDraw(playerid, 326.000000, 161.000000, "Richard Jackson");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][72], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][72], 0.330000, 1.199999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][72], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][72], 0);

	PlayerData[playerid][pTextdraws][73] = CreatePlayerTextDraw(playerid, 233.000000, 173.000000, "skin");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][73], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][73], 0.619999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][73], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][73], 59.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][73], 0);

	PlayerData[playerid][pTextdraws][74] = CreatePlayerTextDraw(playerid, 280.000000, 179.000000, "~b~DTN:~w~ 17/02/1998");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][74], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][74], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][74], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][74], 0);

	PlayerData[playerid][pTextdraws][75] = CreatePlayerTextDraw(playerid, 280.000000, 189.500000, "~b~Origem:~w~ Texas, USA");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][75], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][75], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][75], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][75], 0);

	PlayerData[playerid][pTextdraws][76] = CreatePlayerTextDraw(playerid, 280.000000, 200.000000, "~b~Criado:~w~ 2 meses atras");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][76], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][76], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][76], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][76], 0);

	PlayerData[playerid][pTextdraws][77] = CreatePlayerTextDraw(playerid, 281.000000, 210.000000, "~b~UL:~w~ 3 meses atras");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][77], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][77], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][77], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][77], 0);

	PlayerData[playerid][pTextdraws][78] = CreatePlayerTextDraw(playerid, 301.000000, 231.000000, "Spawn");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][78], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][78], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][78], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][78], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][78], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][78], 340.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][78], 1);

	PlayerData[playerid][pTextdraws][79] = CreatePlayerTextDraw(playerid, 345.000000, 231.000000, "Apagar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][79], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][79], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][79], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][79], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][79], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][79], 382.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][79], 1);

	PlayerData[playerid][pTextdraws][80] = CreatePlayerTextDraw(playerid, 387.000000, 231.000000, "Voltar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][80], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][80], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][80], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][80], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][80], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][80], 415.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][80], 1);

	PlayerData[playerid][pTextdraws][81] = CreatePlayerTextDraw(playerid, 553.000000, 99.000000, "~b~~h~Metas:~w~ 0/10");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][81], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][81], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][81], 0.390000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][81], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][81], 0);

	PlayerData[playerid][pTextdraws][82] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Carregado:~w~ Suprimentos de Varejo~n~~b~Caixas carregadas:~w~ 6/6");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][82], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][82], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][82], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][82], 0);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][62], 0);
}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][39], string);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][39]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
}

ResetStatistics(playerid)
{
	for (new i = 0; i < 3; i ++) {
	    PlayerCharacters[playerid][i][0] = 0;

	    for (new j = 0; j < 9; j ++) {
	    	AccessoryData[playerid][i][j] = 0.0;
	    }
	}
	for (new i = 0; i != MAX_INVENTORY; i ++) {
	    InventoryData[playerid][i][invExists] = false;
	    InventoryData[playerid][i][invModel] = 0;
	    InventoryData[playerid][i][invQuantity] = 0;
	}
	for (new i = 0; i < 12; i ++) {
	    PlayerData[playerid][pGuns][i] = 0;
	    PlayerData[playerid][pAmmo][i] = 0;
	}
	for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
	    NearestItems[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ContactData[playerid][i][contactExists] = false;
	    ContactData[playerid][i][contactID] = 0;
	    ContactData[playerid][i][contactNumber] = 0;
	    ListedContacts[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) {
	    LocationData[playerid][i][locationExists] = false;
	    LocationData[playerid][i][locationID] = 0;
	}
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
	    TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}
	BoomboxData[playerid][boomboxPlaced] = 0;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;

	//bebado bafometro
	PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0;
	PlayerData[playerid][pAlcoholPerk] = 0;

    Tanoportamalas[playerid] = 0;
	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pRentedCar] = -1;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pLoginAttempts] = 0;
	PlayerData[playerid][pCreated] = 0;
	PlayerData[playerid][pGender] = 1;
	PlayerData[playerid][pBirthdate][0] = 0;
	PlayerData[playerid][pOrigin][0] = 0;
	PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pEditType] = 0;
    PlayerData[playerid][pGlasses] = 0;
    PlayerData[playerid][pHat] = 0;
    PlayerData[playerid][pBandana] = 0;
    PlayerData[playerid][pPos] = 0.0;
    PlayerData[playerid][pInterior] = 0;
    PlayerData[playerid][pWorld] = 0;
    PlayerData[playerid][pCharacter] = 0;
    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = -1;
    PlayerData[playerid][pHospitalTime] = 0;
	PlayerData[playerid][pMorteTime] = 0;
    PlayerData[playerid][pRepairTime] = 0;
    PlayerData[playerid][pMoney] = 0;
    PlayerData[playerid][pBankMoney] = 0;
    PlayerData[playerid][pSpawnPoint] = 0;
    PlayerData[playerid][pSavings] = 0;
    PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pHelpTime] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pKicked] = 0;
	PlayerData[playerid][pMuted] = 0;
	PlayerData[playerid][pSpamCount] = 0;
	PlayerData[playerid][pCommandCount] = 0;
	PlayerData[playerid][pDisplayStats] = 0;
	PlayerData[playerid][pToggleGlasses] = 0;
	PlayerData[playerid][pToggleHat] = 0;
	PlayerData[playerid][pToggleBandana] = 0;
	PlayerData[playerid][pToggleArmor] = 0;
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
    PlayerData[playerid][pShotTime] = 0;
	PlayerData[playerid][pInventoryItem] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pProductModify] = 0;
	PlayerData[playerid][pTester] = 0;
	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pTutorialTime] = 0;
	PlayerData[playerid][pTutorialStage] = 0;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pSelectFurniture] = 0;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseOffered] = -1;
	PlayerData[playerid][pHouseValue] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBusinessOffered] = -1;
	PlayerData[playerid][pBusinessValue] = 0;
	PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffered] = -1;
	PlayerData[playerid][pCarValue] = 0;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeType] = 0;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodType] = 0;
	PlayerData[playerid][pFoodPrice] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pPhoneOff] = 0;
	PlayerData[playerid][pLottery] = 0;
	PlayerData[playerid][pLotteryB] = 0;
	PlayerData[playerid][pHunger] = 100;
	PlayerData[playerid][pThirst] = 100;
	PlayerData[playerid][pHungerTime] = 0;
	PlayerData[playerid][pThirstTime] = 0;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pPlayingHours] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pArmorStatus] = 0;
	PlayerData[playerid][pArmorShown] = 0;
	PlayerData[playerid][pClothesType] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pFurnitureType] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiDuty] = 0;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pMineCount] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pDragged] = 0;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pPrisoned] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pWarrants] = 0;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTrackTime] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pBroadcast] = 0;
	PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMuteTime] = 0;
	PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pDisableOOC] = 0;
	PlayerData[playerid][pDisablePM] = 0;
	PlayerData[playerid][pDisableFaction] = 0;
	PlayerData[playerid][pDisableTester] = 0;
	PlayerData[playerid][pDisableBC] = 0;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = 0;
	PlayerData[playerid][pWeapon] = 0;
	PlayerData[playerid][pChannel] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pRangeBooth] = -1;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;
	PlayerData[playerid][pVendorTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pExecute] = 0;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pMarker] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pDeliverShipment] = 0;
	PlayerData[playerid][pHoldWeapon] = 0;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pAdvertise][0] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pTask] = 0;
    PlayerData[playerid][pBankTask] = 0;
    PlayerData[playerid][pStoreTask] = 0;
    PlayerData[playerid][pTestTask] = 0;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pTesterDuty] = 0;
    PlayerData[playerid][pAdminDuty] = 0;
    PlayerData[playerid][pSeekHelp] = 0;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pMaskOn] = 0;
    PlayerData[playerid][pFactionMod] = 0;
    PlayerData[playerid][pCapacity] = 35;
    PlayerData[playerid][pPlayRadio] = 0;
    PlayerData[playerid][pGraffiti] = -1;
    PlayerData[playerid][pGraffitiTime] = 0;
    PlayerData[playerid][pGraffitiColor] = 0;
    PlayerData[playerid][pEditGraffiti] = -1;
    PlayerData[playerid][pAdminHide] = 0;
    PlayerData[playerid][pDetectorTime] = 0;
    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    Defensor[playerid] = 999;
	Atacando[playerid] = 999;
	Juzgando[playerid] = 999;
	Defendiendo[playerid] = 999;
	MuteoJ[playerid] = 0;
    ResetWarnings(playerid);
}

ResetNameTag(playerid)
{
    foreach (new i : Player) {
		ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	if (IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

ResetWarnings(playerid)
{
    PlayerData[playerid][pWarnings] = 0;
   	PlayerData[playerid][pWarn1][0] = 0;
    PlayerData[playerid][pWarn2][0] = 0;
}

GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Telefone")) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
	{
	    foreach (new i : Player)
		{
			if ((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
				return 1;
		}
	}
	return 0;
}

SelectCharacter(playerid, id)
{
	PlayerData[playerid][pCharacter] = id;

	if (!PlayerCharacters[playerid][id - 1][0])
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Criar Personagem", "Digite o nome de seu novo personagem abaixo:\n\nAviso: Seu nome deve estar no formato Nome_SobreNome e não exceder 20 caracteres.", "Criar", "Cancelar");

	static
	    query[200];

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][72], PlayerCharacters[playerid][id - 1]);

	format(query, sizeof(query), "SELECT `Skin`, `Birthdate`, `Origin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Character` = '%s'", PlayerCharacters[playerid][id - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_SHOW_CHARACTER);

	return 1;
}

IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

ReturnWeaponName(weaponid)
{
	static
		name[32];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "Nenhuma";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock ReturnVehicleName(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid),
		name[32] = "Nenhum";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}

stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 581, 586, 400, 579, 540, 482, 525, 544, 563, 523, 407, 416, 426, 428, 431, 437, 497, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}

stock IsLoadableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);

	if (GetVehicleTrailer(vehicleid))
	    modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

	switch (modelid) {
	    case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591: return 1;
	}
	return 0;
}

stock GetMaxCrates(vehicleid)
{
	new crates;

	switch (GetVehicleModel(vehicleid)) {
	    case 498, 609: crates = 50;
	    case 414, 433: crates = 50;
	    case 456, 499: crates = 20;
	    case 435, 591: crates = 300;
	}
	return crates;
}

stock GetVehicleCrates(vehicleid)
{
	if (!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
		return 0;

	new crates;

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    crates++;
	}
 	return crates;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsABike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}
stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

stock GetHouseByID(sqlid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
	    return i;

	return -1;
}

stock GetBusinessByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	    return i;

	return -1;
}

stock GetEntranceByID(sqlid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
	    return i;

	return -1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}

stock GetDuration(time)
{
	new
	    str[32];

	if (time < 0 || time == gettime()) {
	    format(str, sizeof(str), "Nunca");
	    return str;
	}
	else if (time < 60)
		format(str, sizeof(str), "%d segundos", time);

	else if (time >= 0 && time < 60)
		format(str, sizeof(str), "%d segundos", time);

	else if (time >= 60 && time < 3600)
		format(str, sizeof(str), (time >= 120) ? ("%d minutos") : ("%d minuto"), time / 60);

	else if (time >= 3600 && time < 86400)
		format(str, sizeof(str), (time >= 7200) ? ("%d horas") : ("%d hora"), time / 3600);

	else if (time >= 86400 && time < 2592000)
 		format(str, sizeof(str), (time >= 172800) ? ("%d dias") : ("%d dia"), time / 86400);

	else if (time >= 2592000 && time < 31536000)
 		format(str, sizeof(str), (time >= 5184000) ? ("%d meses") : ("%d mes"), time / 2592000);

	else if (time >= 31536000)
		format(str, sizeof(str), (time >= 63072000) ? ("%d anos") : ("%d ano"), time / 31536000);

	strcat(str, " atras");

	return str;
}

stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

public OnObjectMoved(objectid)
{
	for (new i = 0; i < MAX_BOOTHS; i ++) if (g_BoothUsed[i] && g_BoothObject[i] == objectid)
	{
	    DestroyObject(g_BoothObject[i]);

	    return SetTimerEx("UpdateBooth", 3000, false, "dd", Booth_GetPlayer(i), i);
	}
	for (new i = 0; i < MAX_BOOTHS; i ++) if (g_BoothUsed[i] && g_BoothObject[i] == objectid) {
	    DestroyObject(g_BoothObject[i]);

	    return SetTimerEx("UpdateBooth", 3000, false, "dd", Booth_GetPlayer(i), i);
	}
    if(objectid == firework)
    {
        new Float:obX, Float:obY, Float:obZ;
		GetObjectPos(objectid, obX, obY, obZ);
		DestroyObject(firework);
		CreateExplosion(obX, obY, obZ, 0, 15.0);
    }
	return 1;
}

forward OnQueryExecute(playerid, query[]);
public OnQueryExecute(playerid, query[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (strfind(query, "SELECT", true) != -1)
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: MySQL returned %d rows from your query.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", rows);

	else
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: Query executed successfully (affected rows: %d).\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", cache_affected_rows());

	PlayerData[playerid][pExecute] = 0;
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 6 && PlayerData[i][pExecute])
		{
	    	PlayerData[i][pExecute] = 0;
	    	Dialog_Show(i, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: \"%s\"\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", error);
		}
	}
 	printf("** [MySQL]: %s", error);
	Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields
	;
	switch (threadid)
	{
	    case THREAD_CREATE_CHAR:
	    {
	        PlayerData[extraid][pID] = cache_insert_id(g_iHandle);
	        PlayerData[extraid][pLogged] = 1;

			SQL_SaveCharacter(extraid);

			PlayerData[extraid][pID] = -1;
			PlayerData[extraid][pLogged] = 0;
	    }
		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
			{
			    static
			        loginDate[36];

			    cache_get_row(0, 0, loginDate, g_iHandle);

				format(PlayerData[extraid][pLoginDate], 36, loginDate);
				TextDrawShowForPlayer(extraid, TDIntro[0]);
				TextDrawShowForPlayer(extraid, TDIntro[1]);
				TextDrawShowForPlayer(extraid, TDIntro[2]);
				TextDrawShowForPlayer(extraid, TDIntro[3]);
		        Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "{009999}Iniciar sessão", "Bem Vindo de Volta ao Max Miami Roleplay!\n\nSeu ultimo login foi: %s.\n\nPor favor digite sua senha abaixo para acessar sua conta:", "Login", "Cancelar", PlayerData[extraid][pLoginDate]);
   }
			else
			{
			    TextDrawShowForPlayer(extraid, TDIntro[0]);
				TextDrawShowForPlayer(extraid, TDIntro[1]);
				TextDrawShowForPlayer(extraid, TDIntro[2]);
				TextDrawShowForPlayer(extraid, TDIntro[3]);
			    Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "{009999}Registrar", "Bem Vindo ao Max Miami Roleplay, %s.\n\nNoticia: A sua conta ainda não está registrado. Digite a senha desejada:", "Registrar", "Cancelar", ReturnName(extraid));
			}
    	}
    	case THREAD_LOGIN:
   		{
    	    cache_get_data(rows, fields, g_iHandle);

    	    if (!rows)
    	    {
    	        PlayerData[extraid][pLoginAttempts]++;

    	        if (PlayerData[extraid][pLoginAttempts] >= 3)
    	        {
    	            SendClientMessage(extraid, COLOR_LIGHTRED, "Noticias: Você foi expulso por errar 3 vezes as senhas.");
    	            KickEx(extraid);
				}
				else
				{
    	        	Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "{009999}Iniciar sessão", "Bem Vindo de Volta ao Max City RP !\n\nSeu ultimo login foi: %s.\n\nPor favor digite sua senha abaixo para acessar sua conta:", "Login", "Cancelar", PlayerData[extraid][pLoginDate]);
    	        	SendClientMessageEx(extraid, COLOR_LIGHTRED, "Noticia: Senha Incorreta (%d/3 tentativas).", PlayerData[extraid][pLoginAttempts]);
				}
			}
			else
			{
				static
					query[128];

				// Update the last login date.
                format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s', `LoginDate` = '%s' WHERE `Username` = '%s'", PlayerData[extraid][pIP], ReturnDate(), PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query);

    			// Load the character data.
				format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT 3", PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHARACTERS);
			}
		}
		case THREAD_CHARACTERS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows; i ++) {
			    cache_get_field_content(i, "Character", PlayerCharacters[extraid][i], g_iHandle, MAX_PLAYER_NAME);
		    }
		    SendServerMessage(extraid, "Você autentificou sua conta com sucesso.");
            ShowCharacterMenu(extraid);
		}
		case THREAD_LOAD_CHARACTER:
		{
		    static
		        string[128];

		    cache_get_data(rows, fields, g_iHandle);

			foreach (new i : Player)
			{
			    if (PlayerData[i][pCharacter] == PlayerData[extraid][pCharacter] && !strcmp(ReturnName(i), PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]) && i != extraid)
       			{
       			    ShowCharacterMenu(extraid);
				   	SendErrorMessage(extraid, "Este personagem já está logado.");
				}
			}
			switch (SetPlayerName(extraid, PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]))
			{
			    case -1: {
					SendClientMessageEx(extraid, COLOR_LIGHTRED, "Noticia: O nome do seu personagem parece estar em uso já.");
				}
				default:
				{
				    if (!rows) {
				        return 0;
					}
					static
					    query[128]
					;
			        PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
			        PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");
			        PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");

					cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], g_iHandle, 24);
			        cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], g_iHandle, 32);
			        cache_get_field_content(0, "Username",PlayerData[extraid][pNomeOOC], g_iHandle, 32);

			        PlayerData[extraid][pSkin] = cache_get_field_int(0, "Skin");
			        PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
			        PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
			        PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
			        PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
			        PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
			        PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
			        PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
			        PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
                    PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
			        PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
			        PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
			        PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
					PlayerData[extraid][pSavings] = cache_get_field_int(0, "Savings");
			        PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
			        PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
			        PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
			        PlayerData[extraid][pTester] = cache_get_field_int(0, "Tester");
			        PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
			        PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
			        PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
			        PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
			        PlayerData[extraid][pHunger] = cache_get_field_int(0, "Hunger");
			        PlayerData[extraid][pThirst] = cache_get_field_int(0, "Thirst");
			        PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
			        PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
			        PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
			        PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
			        PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
			        PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
			        PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
			        PlayerData[extraid][pInjured] = cache_get_field_int(0, "Injured");
			        PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
			        PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
			        PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
			        PlayerData[extraid][pAdminHide] = cache_get_field_int(0, "AdminHide");
			        PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
			        PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
			        PlayerData[extraid][pFactionMod] = cache_get_field_int(0, "FactionMod");
			        PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
			        PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");
			        PlayerData[extraid][pOnDuty] = cache_get_field_int(0, "EmTrabalho");
			        

					cache_get_field_content(0, "Warn1", PlayerData[extraid][pWarn1], g_iHandle, 32);
					cache_get_field_content(0, "Warn2", PlayerData[extraid][pWarn2], g_iHandle, 32);

			        for (new i = 0; i < 13; i ++) {
			            format(query, sizeof(query), "Gun%d", i + 1);
			            PlayerData[extraid][pGuns][i] = cache_get_field_int(0, query);

			            format(query, sizeof(query), "Ammo%d", i + 1);
			            PlayerData[extraid][pAmmo][i] = cache_get_field_int(0, query);
			        }
			        PlayerData[extraid][pGlasses] = cache_get_field_int(0, "Glasses");
					PlayerData[extraid][pHat] = cache_get_field_int(0, "Hat");
					PlayerData[extraid][pBandana] = cache_get_field_int(0, "Bandana");

					cache_get_field_content(0, "GlassesPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][0][0], AccessoryData[extraid][0][1], AccessoryData[extraid][0][2], AccessoryData[extraid][0][3], AccessoryData[extraid][0][4], AccessoryData[extraid][0][5], AccessoryData[extraid][0][6], AccessoryData[extraid][0][7], AccessoryData[extraid][0][8]);

					cache_get_field_content(0, "HatPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][1][0], AccessoryData[extraid][1][1], AccessoryData[extraid][1][2], AccessoryData[extraid][1][3], AccessoryData[extraid][1][4], AccessoryData[extraid][1][5], AccessoryData[extraid][1][6], AccessoryData[extraid][1][7], AccessoryData[extraid][1][8]);

					cache_get_field_content(0, "BandanaPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][2][0], AccessoryData[extraid][2][1], AccessoryData[extraid][2][2], AccessoryData[extraid][2][3], AccessoryData[extraid][2][4], AccessoryData[extraid][2][5], AccessoryData[extraid][2][6], AccessoryData[extraid][2][7], AccessoryData[extraid][2][8]);

					if (!PlayerData[extraid][pMaskID])
					    PlayerData[extraid][pMaskID] = random(90000) + 10000;

					if (!PlayerData[extraid][pCapacity])
					    PlayerData[extraid][pCapacity] = 35;

				    for (new i = 0; i < 81; i ++) {
				        if (i < 8 || (i >= 71 && i <= 80)) PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
					}
				    if (PlayerData[extraid][pAdmin] == 1)
			    	{
						SendClientMessage(extraid, COLOR_CYAN, "[SERVER]:{FFFFFF} Você conectou como um Tester.");
				    }
				    if (PlayerData[extraid][pAdmin] > 1)
				    {
				        SendAdminAction(extraid, "Você logou como admin level %d.", PlayerData[extraid][pAdmin]);
				    }
				    PlayerData[extraid][pLogged] = 1;

                    format(query, sizeof(query), "SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);

                    format(query, sizeof(query), "SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);

                    format(query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);

                    format(query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

					if (PlayerData[extraid][pFactionID] != -1) {
					    PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

					    if (PlayerData[extraid][pFaction] == -1) {
					        ResetFaction(extraid);
						}
					}
				    if (!PlayerData[extraid][pCreated])
				    {
				        new
				            str[48];

						format(str, sizeof(str), "~r~Nome:~w~ %s", ReturnName(extraid));
				        PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][14], str);

				        for (new i = 11; i < 23; i ++) {
				            PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
						}
						PlayerData[extraid][pSkin] = 98;

						PlayerData[extraid][pOrigin][0] = '\0';
						PlayerData[extraid][pBirthdate][0] = '\0';

						SendServerMessage(extraid, "Agora é obrigado a preencher o seu cartao de identificacao.");
						SetPlayerInterior(extraid, 3);

						SetPlayerPos(extraid, 364.958312, 173.570709, 990.610534);
						SetPlayerCameraPos(extraid, 364.958312, 173.570709, 1010.610534);
						SetPlayerCameraLookAt(extraid, 364.458343, 173.576049, 1010.389343);
				    }
				    else
				    {
        				SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

				        TogglePlayerSpectating(extraid, 0);
				        TogglePlayerControllable(extraid, 0);

				        CancelSelectTextDraw(extraid);
				        SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
					}
				}
			}
		}
		case THREAD_VERIFY_PASS:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
				Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Digite a nova senha", "Digite sua nova senha abaixo.\n\nNote: Por favor, use uma senha forte e segura para segurança.", "Mudar", "Cancelar");

			else
				SendErrorMessage(extraid, "Você digitou uma senha incorreta.");
		}
		case THREAD_FIND_USERNAME:
		{
		    static
		        query[128];

			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
				new
				    name[MAX_PLAYER_NAME + 1];

				cache_get_row(0, 0, name, g_iHandle);

				if (strcmp(name, PlayerData[extraid][pUsername], false) != 0)
				{
					format(PlayerData[extraid][pUsername], sizeof(name), name);
					SetPlayerName(extraid, name);
				}
		    }
		    format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
			mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_ACCOUNT);
		}
		case THREAD_LOAD_INVENTORY:
		{
		    static
		        name[32];

		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
			    InventoryData[extraid][i][invExists] = true;
			    InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
			    InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
                InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");

				cache_get_field_content(i, "invItem", name, g_iHandle, sizeof(name));
				strpack(InventoryData[extraid][i][invItem], name, 32 char);
			}
		}
		case THREAD_LOAD_CONTACTS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
				cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], g_iHandle, 32);

				ContactData[extraid][i][contactExists] = true;
			    ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
			    ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
				cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], g_iHandle, 32);

				LocationData[extraid][i][locationExists] = true;
			    LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
			    LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
			    LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
			    LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
			}
		}
		case THREAD_LOAD_TICKETS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
				cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], g_iHandle, 64);
				cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], g_iHandle, 36);

				TicketData[extraid][i][ticketExists] = true;
			    TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
			    TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
			}
		}
		case THREAD_BAN_LOOKUP:
		{
		    new
		        reason[128],
				date[36],
				username[24];

		    cache_get_data(rows, fields, g_iHandle);

		    if (rows) {
		        cache_get_field_content(0, "Username", username, g_iHandle);
		        cache_get_field_content(0, "Date", date, g_iHandle);
				cache_get_field_content(0, "Reason", reason, g_iHandle);

				if (!strcmp(username, "Admin", true) || !username[0])
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Ban Noticia", "O seu IP esta banido do servidor.\n\nIP: %s\nData: %s\nRasão: %s\n\nPara solicitar um ban appeal, por favor visite nosso site e enviar um apelo proibição.", "Fechar", "", PlayerData[extraid][pIP], date, reason);
					KickEx(extraid);
				}
				else
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Ban Noticia", "Você está banido deste servidor.\n\nUsername: %s\nData: %s\nRasão: %s\n\nPara solicitar um ban appeal, por favor visite nosso site e enviar um apelo proibição.", "Fechar", "", PlayerData[extraid][pUsername], date, reason);
					KickEx(extraid);
				}
		    }
		}
		case THREAD_SHOW_CHARACTER:
		{
			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
			    static
			        skin,
			        birthdate[32],
			        origin[32],
					string[128];

			    skin = cache_get_field_int(0, "Skin");

				cache_get_field_content(0, "Birthdate", birthdate, g_iHandle);
				cache_get_field_content(0, "Origin", origin, g_iHandle);

				PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][73], skin);

				if (!strlen(birthdate)) {
				    birthdate = "Nao Especificado";
				}
				if (!strlen(origin)) {
				    origin = "Nao Especificado";
				}
				format(string, sizeof(string), "~b~DNT:~w~ %s", birthdate);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][74], string);

				format(string, sizeof(string), "~b~Origem:~w~ %s", origin);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][75], string);

				format(string, sizeof(string), "~b~Criada:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "CreateDate")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][76], string);

				format(string, sizeof(string), "~b~UL:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "LastLogin")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][77], string);

				for (new i = 0; i < 8; i ++) {
				    PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			    for (new i = 71; i < 81; i ++) {
			        PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			}
		}
	}
	return 1;
}

forward OnViewCharges(extraid, name[]);
public OnViewCharges(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_PCESP)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "Não se encontrou a ficha criminal de \"%s\".", name);

	static
	    string[1024],
		desc[128],
		date[36];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "Description", desc, g_iHandle);
	    cache_get_field_content(i, "Date", date, g_iHandle);

	    format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
	}
	format(desc, sizeof(desc), "Ficha Criminal de: %s", name);
	Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Fechar", "");
	return 1;
}

stock SetCameraData(playerid)
{
    InterpolateCameraPos(playerid, 369.4716, -1753.2399, 16.7008, 369.5773, -1988.9462, 8.8864, 17000);
    InterpolateCameraLookAt(playerid, 369.4716, -1871.593, 12.7936, 369.5773, -1871.593, 8.8864, 17000);
    return 1;
}


forward AccountCheck(playerid);
public AccountCheck(playerid)
{
	SetCameraData(playerid);
	SQL_CheckAccount(playerid);
	return 1;
}

forward OnResolveUsername(extraid, character[]);
public OnResolveUsername(extraid, character[])
{
    new
		rows,
		fields,
		name[24];

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
 		return SendErrorMessage(extraid, "Não há nenhuma conta vinculada com o nome especificado.");

	cache_get_row(0, 0, name, g_iHandle);
	SendServerMessage(extraid, "%s conta de usuário é: %s.", character, name);

	return 1;
}

forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_row(0, 0, date, g_iHandle);

	    SendServerMessage(extraid, "%s último login foi em: %s.", username, date);
	}
	else {
	    SendErrorMessage(extraid, "Nome de usuário especificado inválido.");
	}
	return 1;
}

forward OnCarStorageAdd(carid, itemid);
public OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnStorageAdd(houseid, itemid);
public OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnFurnitureCreated(furnitureid);
public OnFurnitureCreated(furnitureid)
{
	FurnitureData[furnitureid][furnitureID] = cache_insert_id(g_iHandle);
	Furniture_Save(furnitureid);
	return 1;
}

forward OnContactAdd(playerid, id);
public OnContactAdd(playerid, id)
{
	ContactData[playerid][id][contactID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnInventoryAdd(playerid, itemid);
public OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnBanLookup(playerid, username[]);
public OnBanLookup(playerid, username[])
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	static
	    rows,
	    fields,
	    reason[128],
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_field_content(0, "Reason", reason, g_iHandle);
	    cache_get_field_content(0, "Date", date, g_iHandle);

		SendServerMessage(playerid, "%s foi banido em %s, razão: %s", username, date, reason);
	}
	else {
	    SendErrorMessage(playerid, "%s não é banido neste servidor.", username);
	}
	return 1;
}

forward OnVerifyNameChange(playerid, newname[]);
public OnVerifyNameChange(playerid, newname[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "O nome especificado \"%s\" já está em uso.", newname);

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname, true)) {
	    return SendErrorMessage(playerid, "O nome especificado \"%s\" já está em uso.", newname);
	}
	format(PlayerData[playerid][pNameChange], 24, newname);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s está solicitando uma mudança de nome para %s (use \"/aceitarnome\" ou \"/recusarnome\").", ReturnName(playerid, 0), newname);
	SendServerMessage(playerid, "O seu pedido de mudança de nome foi enviado para os administradores.");

	return 1;
}

forward OnDeleteCharacter(playerid, name[]);
public OnDeleteCharacter(playerid, name[])
{
	static
	    rows,
	    fields,
		query[128],
		id = -1;

    cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "O personagem \"%s\" não está ligada sob quaisquer contas.", name);

	if (cache_get_field_int(0, "Admin") > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Você não está autorizado a eliminar o personagem de um administrador superior.");

	id = cache_get_field_int(0, "ID");

	if (id) {
	    format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
     	mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

  		SendServerMessage(playerid, "Você deletou o personagem \"%s\" com sucesso.", name);
	}
	return 1;
}

forward OnDeleteAccount(playerid, name[]);
public OnDeleteAccount(playerid, name[])
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "O nome de usuário \"%s\" não existe.", name);

	static
	    query[128];

	for (new i = 0; i < rows; i ++)
	{
	    if ((id = cache_get_field_int(i, "ID")))
		{
	        format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

            format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);
		}
	}
	format(query, sizeof(query), "DELETE FROM `accounts` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    SendServerMessage(playerid, "Você excluiu a conta de \"%s\" do banco de dados.", name);
    return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "O nome especificado \"%s\" está em uso.", newname);

    new
		oldname[MAX_PLAYER_NAME];

	GetPlayerName(userid, oldname, sizeof(oldname));
	ChangeName(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
	    if (oldname[i] == '_') oldname[i] = ' ';
	}
	for (new i = 0, l = strlen(newname); i != l; i ++) {
	    if (newname[i] == '_') newname[i] = ' ';
	}
	SendServerMessage(playerid, "Você mudou o nome de %s para %s.", oldname, newname);
	SendServerMessage(userid, "%s mudou seu nome para %s.", ReturnName(playerid, 0), newname);

 	Log_Write("logs/name_log.txt", "[%s] %s liberou a mudarça de nome de %s para %s.", ReturnDate(), ReturnName(playerid), oldname, newname);
	return 1;
}

forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnRackCreated(rackid);
public OnRackCreated(rackid)
{
	if (rackid == -1 || !RackData[rackid][rackExists])
	    return 0;

	RackData[rackid][rackID] = cache_insert_id(g_iHandle);
	Rack_Save(rackid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(g_iHandle);
	Gate_Save(gateid);

	return 1;
}

forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	BusinessData[bizid][bizID] = cache_insert_id(g_iHandle);
	Business_Save(bizid);

	return 1;
}

forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
	if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
	    return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id(g_iHandle);
	EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

	Entrance_Save(entranceid);

	return 1;
}

forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	CarData[carid][carID] = cache_insert_id(g_iHandle);
	Car_Save(carid);

	return 1;
}

forward OnPumpCreated(pumpid);
public OnPumpCreated(pumpid)
{
    PumpData[pumpid][pumpID] = cache_insert_id(g_iHandle);
	Pump_Save(pumpid);

	return 1;
}

forward OnPlantCreated(plantid);
public OnPlantCreated(plantid)
{
	if (plantid == -1 || !PlantData[plantid][plantExists])
	    return 0;

	PlantData[plantid][plantID] = cache_insert_id(g_iHandle);
	Plant_Save(plantid);

	return 1;
}

forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id(g_iHandle);

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);

	return 1;
}

forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
    if (atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id(g_iHandle);
 	ATM_Save(atmid);

	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(g_iHandle);
	Graffiti_Save(id);

	return 1;
}

forward OnDetectorCreated(id);
public OnDetectorCreated(id)
{
	MetalDetectors[id][detectorID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnGarbageCreated(garbageid);
public OnGarbageCreated(garbageid)
{
	if (garbageid == -1 || !GarbageData[garbageid][garbageExists])
	    return 0;

	GarbageData[garbageid][garbageID] = cache_insert_id(g_iHandle);
	Garbage_Save(garbageid);

	return 1;
}

forward OnVendorCreated(vendorid);
public OnVendorCreated(vendorid)
{
	if (vendorid == -1 || !VendorData[vendorid][vendorExists])
	    return 0;

	VendorData[vendorid][vendorID] = cache_insert_id(g_iHandle);
	Vendor_Save(vendorid);

	return 1;
}

forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	HouseData[houseid][houseID] = cache_insert_id(g_iHandle);
	House_Save(houseid);

	return 1;
}

forward OnDroppedItem(itemid);
public OnDroppedItem(itemid)
{
	if (itemid == -1 || !DroppedItems[itemid][droppedModel])
	    return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnJobCreated(jobid);
public OnJobCreated(jobid)
{
	if (jobid == -1 || !JobData[jobid][jobExists])
	    return 0;

	JobData[jobid][jobID] = cache_insert_id(g_iHandle);
	Job_Save(jobid);

	return 1;
}

forward OnCharacterLookup(extraid, id, character[]);
public OnCharacterLookup(extraid, id, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    string[128];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    static
	        admin,
	        skin,
	        createDate,
	        lastLogin;

		admin = cache_get_field_int(0, "Admin");
		skin = cache_get_field_int(0, "Skin");

		createDate = cache_get_field_int(0, "CreateDate");
		lastLogin = cache_get_field_int(0, "LastLogin");

		format(string, sizeof(string), "~g~Nome:~w~ %s~n~~g~Conta:~w~ %s~n~~g~Criada em:~w~ %s~n~~g~Ultimo Login:~w~ %s", character, (admin > 0) ? ("Admin") : ("Player"), GetDuration(gettime() - createDate), GetDuration(gettime() - lastLogin));
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][52], string);

		format(string, sizeof(string), "#%d: %s", id, character);
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][53], string);

		PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][54], skin);

		for (new i = 40; i < 58; i ++)
  		{
    		if (i >= 50)
      			PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);

			else if (i < 50)
   				PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
   		}
		SelectTextDraw(extraid, -1);

		PlayerData[extraid][pDisplayStats] = 2;
		PlayerData[extraid][pCharacterMenu] = id;
	}
	return 1;
}

forward OnCharacterCheck(extraid, character[]);
public OnCharacterCheck(extraid, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
		query[150];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    Dialog_Show(extraid, CreateChar, DIALOG_STYLE_INPUT, "Criar Personagem", "Error: O nome especificado \"%s\" está em uso!\n\nDigite o nome de seu novo personagem abaixo:\n\nAvisp: Seu nome deve estar no formato Nome_SobreNome e não exceder 24 caracteres.", "Criar", "Cancelar", character);
	}
	else
	{
		format(query, sizeof(query), "INSERT INTO `characters` (`Username`, `Character`, `CreateDate`) VALUES('%s', '%s', '%d')", PlayerData[extraid][pUsername], character, gettime());
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CREATE_CHAR);

		format(PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1], MAX_PLAYER_NAME + 1, character);
		SendServerMessage(extraid, "Você criou com sucesso personagem \"%s\".", character);

		ShowCharacterMenu(extraid);
		PlayerData[extraid][pLogged] = 0;
	}
	return 1;
}

stock FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

	return 1;
}

stock FlashTextDrawEx(playerid, PlayerText:textid, amount = 1)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);

	return 1;
}

forward FlashShowTextDrawEx(playerid, PlayerText:textid, amount);
public FlashShowTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);

	    if (amount > 0) return SetTimerEx("HideTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);
	}
	return 1;
}

forward HideTextDrawEx(playerid, PlayerText:textid, amount);
public HideTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawHide(playerid, textid);

	    if (amount > 0) return SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, --amount);
	}
	return 1;
}

forward FlashShowTextDraw(playerid, PlayerText:textid);
public FlashShowTextDraw(playerid, PlayerText:textid)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);
	}
	return 1;
}

stock RestartCheck()
{
	static
	    time[3],
		string[32];

	if (g_ServerRestart == 1 && !g_RestartTime)
	{
		foreach (new i : Player) {
		    SQL_SaveCharacter(i);
		    SetPlayerName(i, PlayerData[i][pUsername]);
		}
		SendRconCommand("gmx");
	}
	else if (g_ServerRestart == 1) {
		GetElapsedTime(g_RestartTime--, time[0], time[1], time[2]);

		format(string, 32, "~r~GMX em:~w~ %02d:%02d", time[1], time[2]);
	    TextDrawSetString(gServerTextdraws[3], string);
	}
	return 1;
}

stock TotalledCheck()
{
	static
	    Float:fHealth;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehicleHealth(i, fHealth) && fHealth < 300.0) {
	    SetVehicleHealth(i, 300.0);
	    SetEngineStatus(i, false);
	}
	return 1;
}
/////////////////////////////////////////////////////// novo pagamento /////////////////////////////////////
forward MinuteCheck();
public MinuteCheck()
{
	static
	    Float:hp;

    foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

        PlayerData[i][pMinutes]++;

        if (PlayerData[i][pMinutes] >= 60)
       	{

			new imposto = random(575) + 53;
			new impostocasa = 250;
			new impostoempresa = 450;
       	    new paycheck = 250;
            new paycheck1 = 900;
            new paycheck2 = 1000;
            new paycheck3 = 1250;
            new paycheck4 = 1500;
            new paycheck5 = 1750;
            new paycheck6 = 2000;
            new paycheck7 = 2250;
            new paycheck8 = 2500;
            new paycheck9 = 2750;
            new paycheck10 = 3000;
            new paycheck11 = 3250;
            new paycheck12 = 3500;
            new paycheck13 = 3750;
            new paycheck14 = 4000;
            new paycheck15 = 4500;
			
        	PlayerData[i][pMinutes] = 0;

			PlayerData[i][pPlayingHours]++;
			PlayerData[i][pBankMoney] += paycheck;

			////////////////////////////////////////////////////////////////////////
			if(PlayerData[i][pFactionRank] == 1)
			{
			    PlayerData[i][pMoney] += paycheck1;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: R$ %s{FFFFFF}.", FormatNumber(paycheck1));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}R$ %s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 2)
			{
			    PlayerData[i][pBankMoney] += paycheck2;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck2));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 3)
			{
			    PlayerData[i][pBankMoney] += paycheck3;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck3));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 4)
			{
			    PlayerData[i][pBankMoney] += paycheck4;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck4));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 5)
			{
			    PlayerData[i][pBankMoney] += paycheck5;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck5));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 6)
			{
			    PlayerData[i][pBankMoney] += paycheck6;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck6));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 7)
			{
			    PlayerData[i][pBankMoney] += paycheck7;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck7));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 8)
			{
			    PlayerData[i][pBankMoney] += paycheck8;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck8));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 9)
			{
			    PlayerData[i][pBankMoney] += paycheck9;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck9));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 10)
			{
			    PlayerData[i][pBankMoney] += paycheck10;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck10));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 11)
			{
			    PlayerData[i][pBankMoney] += paycheck11;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck11));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 12)
			{
			    PlayerData[i][pBankMoney] += paycheck12;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck12));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 13)
			{
			    PlayerData[i][pBankMoney] += paycheck13;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck13));
                SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
                SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 14)
			{
			    PlayerData[i][pBankMoney] += paycheck14;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck14));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			if(PlayerData[i][pFactionRank] == 15)
			{
			    PlayerData[i][pBankMoney] += paycheck15;
			    PlayerData[i][pBankMoney] -= imposto;
			    Tax_AddMoney(imposto);
		        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         		SendClientMessageEx(i, COLOR_WHITE, "Salário Facção: %s{FFFFFF}.", FormatNumber(paycheck15));
         		SendClientMessageEx(i, COLOR_WHITE, "Imposto: {ff3300}%s{FFFFFF}.", FormatNumber(imposto));
         		SendClientMessageEx(i, COLOR_WHITE, "Depositado em sua conta bancaria.");
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
			}
			//////////////////////////////////// IMPOSTO DE CASAS ///////////////////////////////////////////////
			for (new h = 0; h < MAX_HOUSES; h ++) if (House_IsOwner(i, h))
			{
			
				SendClientMessageEx(i, COLOR_LIGHTGREEN, "[IPTU]: Imposto sobre Casa: %s de R$ %s foi retirado da sua conta", HouseData[h][houseAddress], FormatNumber(impostocasa));
				PlayerData[h][pBankMoney] -= impostocasa;
 				Tax_AddMoney(impostocasa);
   				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
				return 1;
			}///////////////////////////////////////////////////////////////////////////////////////////////////
			if(PlayerData[i][pJob] == JOB_GARBAGE)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Seu Pagamento de Lixeiro já se encontra disponivel na sua conta bancaria.");
         		PlayerData[i][pBankMoney] += 970;
         		return 1;
			}
			if(PlayerData[i][pJob] == JOB_MINER)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Seu Pagamento de Minerador já se encontra disponivel na sua conta bancaria.");
         		PlayerData[i][pBankMoney] += 970;
         		return 1;
			}
			if(PlayerData[i][pJob] == JOB_TAXI)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Seu Pagamento de Taxista já se encontra disponivel na sua conta bancaria.");
         		PlayerData[i][pBankMoney] += 850;
         		return 1;
			}
			if(PlayerData[i][pJob] == JOB_COURIER)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Seu Pagamento de Entregador já se encontra disponivel na sua conta bancaria.");
         		PlayerData[i][pBankMoney] += 870;
         		return 1;
			}
			if(PlayerData[i][pJob] == JOB_MECHANIC)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "O pagamento referente ao emprego de mecanico deve ser tirado, dos lucros da empresa.");
         		return 1;
			}

			////////////////////////////////////////// IMPOSTO DE EMPRESAS //////////////////////////////////////
			for (new b = 0; i < MAX_BUSINESSES; b ++) if (Business_IsOwner(i, b))
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "[IRPJ]: Imposto sobre Empresa: %s de R$ %s foi retirado da sua conta.", BusinessData[b][bizName], FormatNumber(impostoempresa));
        		PlayerData[b][pBankMoney] -= impostoempresa;
	    		Tax_AddMoney(impostoempresa);
				SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
				return 1;
			}//////////////////////////////////////////////////////////////////////////////////////////////////////
			return 1;
		}
		if (PlayerData[i][pInjured])
		{
		    GetPlayerHealth(i, hp);
		    SetPlayerHealth(i, hp - 15.0);
		}
	}
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
	    PlantData[i][plantDrugs]++;

	    Plant_Refresh(i);
	    Plant_Save(i);
	}
	return 1;
}

forward PlayerCheck();
public PlayerCheck()
{
	static
		str[128],
		Float:health,
		id = -1;

	TotalledCheck();
	RestartCheck();

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;
	        
		if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && !PlayerData[i][pJetpack])
		{
	    	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s tem spawned uma jetpack usando hacks.", ReturnName(i, 0));
	    	Log_Write("logs/cheat_log.txt", "[%s] %s em spawned uma jetpack usando hacks.", ReturnDate(), ReturnName(i, 0));
    	 	//Blacklist_Add(PlayerData[i][pIP], PlayerData[i][pUsername], "Anticheat", "Jetpack Hacker");
			Kick(i);
		}
		if (GetPlayerSpeed(i) > 210 && PlayerData[i][pAdmin] < 1)
		{
		    if (!IsAPlane(GetPlayerVehicleID(i)) && GetPlayerState(i) != PLAYER_STATE_PASSENGER)
		    {
		        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s esta possivelmente usando speed hacks (%.0f km/h).", ReturnName(i, 0), GetPlayerSpeed(i));
		        Log_Write("logs/cheat_log.txt", "[%s] %s esta possivelmente usando speed hacks (%.0f km/h).", ReturnDate(), ReturnName(i, 0), GetPlayerSpeed(i));
		        //Blacklist_Add(PlayerData[i][pIP], PlayerData[i][pUsername], "Anticheat", "Speed Hacker");
				Kick(i);
			}
		}
		if(PlayerData[i][pChannel] == 190 && GetFactionType(i) != FACTION_PCESP)

		{
		    PlayerData[i][pChannel] = 0;
		}
		if (PlayerData[i][pPicking])
		{
			if ((id = PlayerData[i][pPickCar]) != -1)
			{
			    if (Car_Nearest(i) != id)
			    {
			        PlayerData[i][pPicking] = 0;
			        PlayerData[i][pPickCar] = -1;
			        PlayerData[i][pPickTime] = 0;
				}
				else
				{
				    PlayerData[i][pPickTime]++;

				    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Quebrando... %d", 60 - PlayerData[i][pPickTime]);
					GameTextForPlayer(i, str, 1000, 3);

					if (PlayerData[i][pPickTime] >= 60)
					{
                        static
					        engine, lights, alarm, doors, bonnet, boot, objective;

	    				GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

                        PlayerData[i][pPicking] = 0;
                        PlayerData[i][pPickCar] = -1;
                        PlayerData[i][pPickTime] = 0;

                        CarData[id][carLocked] = 0;
						Car_Save(id);

					    SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s destrancou o veiculo.", ReturnName(i, 0));
					    ShowPlayerFooter(i, "Voce ~g~destrancou~w~ o veiculo!");
					}
				}
		    }
		}
		if (!PlayerData[i][pKilled] && PlayerData[i][pHospital] != -1)
		{
			PlayerData[i][pHospitalTime]++;

			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recuperando... %d", 60 - PlayerData[i][pHospitalTime]); //Mudar Aqui
			GameTextForPlayer(i, str, 60, 3);

			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			if (PlayerData[i][pHospitalTime] >= 60)
			{
			
			    FicarnoHospital(i);
			    Delete3DTextLabel(deathlabel[i]);
                sInfo[i][Misc] = 0;
				sInfo[i][Head] = 0;
				sInfo[i][Chest] = 0;
				sInfo[i][Crotch] = 0;
				sInfo[i][LArm] = 0;
				sInfo[i][RArm] = 0;
				sInfo[i][LLeg] = 0;
				sInfo[i][RLeg] = 0;
			}
		}
		else if (PlayerData[i][pMuted] && PlayerData[i][pMuteTime] > 0)
		{
		    PlayerData[i][pMuteTime]--;

		    if (!PlayerData[i][pMuteTime])
		    {
				PlayerData[i][pMuted] = 0;
				PlayerData[i][pMuteTime] = 0;
		    }
		}
		else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
		{
			if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
			{
			    PlayerData[i][pGraffiti] = -1;
                PlayerData[i][pGraffitiTime] = 0;
			}
			else
			{
	            PlayerData[i][pGraffitiTime]--;

	            if (PlayerData[i][pGraffitiTime] < 1)
				{
				    strunpack(str, PlayerData[i][pGraffitiText]);
	                format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

				    GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = PlayerData[i][pGraffitiColor];

					Graffiti_Refresh(PlayerData[i][pGraffiti]);
				    Graffiti_Save(PlayerData[i][pGraffiti]);

				    ClearAnimations(i, 1);
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s  pega sua lata de spray de deixa de lado.", ReturnName(i, 0));

	                PlayerData[i][pGraffiti] = -1;
	                PlayerData[i][pGraffitiTime] = 0;
				}
			}
		}
		else if (PlayerData[i][pSpamCount] > 0)
		{
		    PlayerData[i][pSpamCount]--;
		}
		else if (PlayerData[i][pCommandCount] > 0)
		{
		    PlayerData[i][pCommandCount]--;
		}
		else if (PlayerData[i][pVendorTime] > 0)
		{
		    PlayerData[i][pVendorTime]--;
		}
		else if (PlayerData[i][pDrinkTime] > 0)
		{
		    PlayerData[i][pDrinkTime]--;
		}
		else if (PlayerData[i][pAdTime] > 0)
		{
		    PlayerData[i][pAdTime]--;
		}
		else if (PlayerData[i][pSpeedTime] > 0)
		{
		    PlayerData[i][pSpeedTime]--;
		}
		else if (PlayerData[i][pBleeding] && PlayerData[i][pBleedTime] > 0)
		{
		    if (--PlayerData[i][pBleedTime] == 0)
		    {
		        SetPlayerHealth(i, ReturnHealth(i) - 3.0);
			    PlayerData[i][pBleedTime] = 10;

			    CreateBlood(i);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", i, _:ShowPlayerBox(i, 0xFF000066));
			}
		}
		else if (PlayerData[i][pFingerTime] > 0)
		{
		    PlayerData[i][pFingerTime]--;

		    if (!PlayerData[i][pFingerTime] && DroppedItems[PlayerData[i][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(i, 1.5, DroppedItems[PlayerData[i][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][2]))
		    {
		        SendServerMessage(i, "O scanner detectou uma semelhança com a digital de: %s.", DroppedItems[PlayerData[i][pFingerItem]][droppedPlayer]);
                PlayerData[i][pFingerItem] = -1;
			}
		}
		else if (PlayerData[i][pDrugUsed] != 0 && PlayerData[i][pDrugTime] > 0)
		{
		    if (--PlayerData[i][pDrugTime] && 1 <= PlayerData[i][pDrugUsed] <= 3 && GetPlayerDrunkLevel(i) < 5000) {
		        SetPlayerDrunkLevel(i, 10000);

				PlayerTextDrawShow(i, PlayerData[i][pTextdraws][8]);

				if (PlayerData[i][pDrugUsed] == 3) {
				    SetPlayerWeather(i, -67);
				    SetPlayerTime(i, 12, 12); // Set the time (the drug weather is buggy at night)
				}
			}
		    if (1 <= PlayerData[i][pDrugUsed] <= 3 && ReturnHealth(i) <= 95) {
		    	SetPlayerHealth(i, ReturnHealth(i) + 5);
			}
		    if (!PlayerData[i][pDrugTime])
		    {
		        new
	        		time[3];

        		gettime(time[0], time[1], time[2]);
				SetPlayerTime(i, time[0], time[1]);

		        SetPlayerDrunkLevel(i, 500);
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][8]);

				PlayerData[i][pDrugUsed] = 0;
		        SendServerMessage(i, "Os efeitos da droga passou.");
		    }
		}
		else if (PlayerData[i][pStunned] > 0)
		{
            PlayerData[i][pStunned]--;

			if (GetPlayerAnimationIndex(i) != 388)
             ApplyAnimation(i, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);

            if (!PlayerData[i][pStunned])
            {
                TogglePlayerControllable(i, 1);
                ShowPlayerFooter(i, "Voce nao esta mais ~r~artodoado.");
			}
		}
		else if (PlayerData[i][pJailTime] > 0)
		{
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pJailTime]--;

			GetElapsedTime(PlayerData[i][pJailTime], hours, minutes, seconds);

			format(str, sizeof(str), "~g~Tempo de Prisao:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][70], str);

		    if (!PlayerData[i][pJailTime])
		    {
		        PlayerData[i][pPrisoned] = 0;

		        SetPlayerPos(i, 6396.9502,577.5910,6.7931);// QUANDO SAI DA PRISAO VAI PARA ESSE LOCAL
	        	SetPlayerFacingAngle(i, 0);

	        	SetPlayerInterior(i, 0);
	        	SetPlayerVirtualWorld(i, 0);
		        ShowHungerTextdraw(i, 1);

				SendServerMessage(i, "Você foi solto.");
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][70]);
			}
		}
		else if (PlayerData[i][pTrackTime] > 0 && IsPlayerConnected(PlayerData[i][pMDCPlayer]) && GetFactionType(i) == FACTION_PCESP
		|| GetFactionType(i) ==  FACTION_JUDICIAL)// POLICIA FEDERAL
		{
		    PlayerData[i][pTrackTime]--;

		    if (!PlayerData[i][pTrackTime])
		    {

		        {
		            SendServerMessage(i, "Nao foi possivel localizar a %s; esta fora de alcance.", ReturnName(PlayerData[i][pMDCPlayer], 0));
				}
			}
		}
		else if (PlayerData[i][pCooking] && IsPlayerSpawned(i))
		{
		    PlayerData[i][pCookingTime]--;

		    if (House_Inside(i) == PlayerData[i][pCookingHouse])
		    {
			    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Conzinhando...~w~ %d segundos", PlayerData[i][pCookingTime]);
			    GameTextForPlayer(i, str, 1200, 3);
			}
		    if (PlayerData[i][pCookingTime] < 1)
		    {
		        if (House_Inside(i) != PlayerData[i][pCookingHouse])
		        {
		            SendServerMessage(i, "Você deixou seu alimento e quimar.");
		        }
		        else
				{
					switch (PlayerData[i][pCooking])
		        	{
                    	case 1:
		            	{
		               	    id = Inventory_Add(i, "Hamburguer Cozido", 2703, 1);

		               	    if (id == -1)
		               	        return SendErrorMessage(i, "Você não tem espaço no inventário.");

		                	SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** O microondas sons, cheiros bom! (( %s ))", ReturnName(i, 0));
		                	SendServerMessage(i, "O burger cozido foi adicionado ao seu inventário.");
		            	}
			            case 2:
			            {
			                id = Inventory_Add(i, "Pizza Cozida", 2702, 6);

			                if (id == -1)
		               	        return SendErrorMessage(i, "Você não tem espaço no inventário.");

		    	            SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** O microondas sons, cheiros bom! (( %s ))", ReturnName(i, 0));
		    	            SendServerMessage(i, "A pizza cozida foi adicionado ao seu inventário.");
		        	    }
					}
				}
                PlayerData[i][pCooking] = 0;
                PlayerData[i][pCookingTime] = 0;
                PlayerData[i][pCookingHouse] = -1;
		    }
		}
		else if (IsPlayerInsideTaxi(i))
		{
		    PlayerData[i][pTaxiTime]++;

		    if (PlayerData[i][pTaxiTime] == 15)
		    {
		        PlayerData[i][pTaxiTime] = 0;
		        PlayerData[i][pTaxiFee] += 10;
		    }
		    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d segundos", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

			GameTextForPlayer(i, str, 1100, 3);
			GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
		}
		if (PlayerData[i][pCreated] && !PlayerData[i][pTutorial] && !PlayerData[i][pJailTime] && !PlayerData[i][pInjured] && PlayerData[i][pHospital] == -1 && PlayerData[i][pCreated] && IsPlayerSpawned(i))
		{
		    GetPlayerHealth(i, health);

		    if (++ PlayerData[i][pHungerTime] >= 300)
			{
				if (PlayerData[i][pHunger] > 0)
				{
    	        	PlayerData[i][pHunger]--;
    		    }
        		else if (PlayerData[i][pHunger] <= 0)
				{
    	        	SetPlayerHealth(i, health - 10);
        	    	FlashTextDraw(i, PlayerData[i][pTextdraws][65]);
        		}
        		PlayerData[i][pHungerTime] = 0;
        	}
	        if (++ PlayerData[i][pThirstTime] >= 280)
			{
				if (PlayerData[i][pThirst] > 0)
				{
    	        	PlayerData[i][pThirst]--;
				}
				else if (PlayerData[i][pThirst] <= 0)
				{
		        	SetPlayerHealth(i, health - 5);
        	    	FlashTextDraw(i, PlayerData[i][pTextdraws][66]);
        		}
        		PlayerData[i][pThirstTime] = 0;
			}
		}
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    strunpack(str, BoomboxData[id][boomboxURL]);
		    PlayerData[i][pBoombox] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 60.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2])) // AQUI
		{
		    PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
		if (PlayerData[i][pInjured] == 1 && GetPlayerAnimationIndex(i) != 388)
		{
			ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
		}
        if (PlayerData[i][pHealthTime] > 0)
        {
            PlayerData[i][pHealthTime]--;
		}
		if (PlayerData[i][pRangeBooth] != -1 && !IsPlayerInRangeOfPoint(i, 3.0, arrBoothPositions[PlayerData[i][pRangeBooth]][0], arrBoothPositions[PlayerData[i][pRangeBooth]][1], arrBoothPositions[PlayerData[i][pRangeBooth]][2]))
		{
			Booth_Leave(i);
		}
		format(str, sizeof(str), "%d%c", PlayerData[i][pHunger], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][63], str);

		format(str, sizeof(str), "%d%c", PlayerData[i][pThirst], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][64], str);

	}
	return 1;
}
forward UpdateTime();
public UpdateTime()
{
	static
	    time[3],
	    string[32];

	gettime(time[0], time[1], time[2]);

	if (time[0] >= 12)
		format(string, 32, "%02d:%02d PM", (time[0] == 12) ? (12) : (time[0] - 12), time[1]);

	else if (time[0] < 12)
		format(string, 32, "%02d:%02d AM", (time[0] == 0) ? (12) : (time[0]), time[1]);

	TextDrawSetString(gServerTextdraws[0], string);

	foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
		SetPlayerTime(i, time[0], time[1]);
	}
	SetTimer("UpdateTime", 30000, false);
}

forward RefuelCheck();
public RefuelCheck()
{
	new
	    string[128];

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] || PlayerData[i][pRefill] == INVALID_VEHICLE_ID)
	        continue;

        if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasPump] != -1)
		{
		    PlayerData[i][pRefillPrice]++;

		    CoreVehicles[PlayerData[i][pRefill]][vehFuel] ++;
		    PumpData[PlayerData[i][pGasPump]][pumpFuel] --;

		    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
			{
			    format(string, sizeof(string), "[Bomba de Gasolina: %d]\n{FFFFFF}Combustível Restante: %d litros", PlayerData[i][pGasPump], PumpData[PlayerData[i][pGasPump]][pumpFuel]);
			    UpdateDynamic3DTextLabelText(PumpData[PlayerData[i][pGasPump]][pumpText3D], COLOR_DARKBLUE, string);
			}
			if (CoreVehicles[PlayerData[i][pRefill]][vehFuel] >= 100 || GetEngineStatus(PlayerData[i][pRefill]) || !PumpData[PlayerData[i][pGasPump]][pumpExists] || PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
			{
			    CoreVehicles[PlayerData[i][pRefill]][vehFuel] = 100;

			    GiveMoney(i, -PlayerData[i][pRefillPrice]);
			    SendServerMessage(i, "Você encheu o tanque do seu veículo, por $%d.", PlayerData[i][pRefillPrice]);

			    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
				{
					if (PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
						PumpData[PlayerData[i][pGasPump]][pumpFuel] = 0;

					BusinessData[PlayerData[i][pGasStation]][bizVault] += PlayerData[i][pRefillPrice];
					Business_Save(PlayerData[i][pGasStation]);

					Pump_Save(PlayerData[i][pGasPump]);
				}
				StopRefilling(i);
			}
		}
	}
	return 1;
}
forward FuelUpdate();
public FuelUpdate()
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsEngineVehicle(i) && GetEngineStatus(i))
	{
	    if (CoreVehicles[i][vehFuel] > 0)
	    {
	        CoreVehicles[i][vehFuel]--;

			if (CoreVehicles[i][vehFuel] >= 1 && CoreVehicles[i][vehFuel] <= 5)
			{
			    SendClientMessage(GetVehicleDriver(i), COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Este veículo está com pouco combustível. Você deve visitar um posto de combustível!");
			}
		}
		if (CoreVehicles[i][vehFuel] <= 0)
		{
		    CoreVehicles[i][vehFuel] = 0;
		    SetEngineStatus(i, false);
		}
	}
}
public OnVehicleDeath(vehicleid)
{
	if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SetVehicleColor(vehicleid, color1, color2);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SetVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new
		id = Car_GetID(vehicleid),
		slot = GetVehicleComponentType(componentid);

	if (id != -1)
	{
	    CarData[id][carMods][slot] = componentid;
	    Car_Save(id);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    
    for(new i = 0; i < sizeof(rentCars); i++)
	{
		if(vehicleid == rentCars[i])
		{
            CoreVehicles[i][vehFuel] = 100;
		}
	}
    for(new i = 0; i < sizeof(pickCars); i++){
		if(vehicleid == pickCars[i]){
			CoreVehicles[i][vehFuel] = 100;
		}
	}
	for(new i = 0; i < sizeof(mecCars); i++)
	{
		if(vehicleid == mecCars[i])
		{
        	CoreVehicles[i][vehFuel] = 100;
		}
	}
	for(new i = 0; i < sizeof(GRPAe); i++)
	{
		if(vehicleid == GRPAe[i])
		{
            CoreVehicles[i][vehFuel] = 100;
		}
	}
	for(new i = 0; i < sizeof(taxiCars); i++)
	{
		if(vehicleid == taxiCars[i])
		{
            CoreVehicles[i][vehFuel] = 100;
		}
	}
	for(new i = 0; i < sizeof(garbageCars); i++)
	{
		if(vehicleid == garbageCars[i])
		{
            CoreVehicles[i][vehFuel] = 100;
		}
	}
	for(new i = 0; i < sizeof(deliveryCars); i++)
	{
		if(vehicleid == deliveryCars[i])
		{
            CoreVehicles[i][vehFuel] = 100;
		}
	}
 	for(new i = 0; i < sizeof(vendorCars); i++)
	{
		if(vehicleid == vendorCars[i])
		{
            CoreVehicles[i][vehFuel] = 100;
		}
	}
    if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
	if (IsValidObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
	    DestroyObject(CoreVehicles[vehicleid][vehCrate]);
	    
	ResetVehicle(vehicleid);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if (!success)
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 10)
		{
	    	Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");
			Kick(i);
	    }
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: RCON login attempt failed from \"%s\".", ip);
	    Log_Write("logs/rcon_log.txt", "[%s] RCON falha ao tentar logar na rcon: %s ip:\"%s\".", ReturnDate(), ip);
	}
	else
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 10)
		{
	        Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");
	        Kick(i);
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s foi banido por entrar em RCON sem autorização.", ReturnName(i, 0));
	    	Log_Write("logs/rcon_log.txt", "[%s] %s (%s) foi banido por entrar em RCON sem autorização.", ReturnDate(), ReturnName(i, 0), ip);
			break;
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if (PlayerData[playerid][pMaskOn])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	return 1;
}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[])
{
    if (IsFurnitureItem(name))
	{
        new id = House_Inside(playerid);

        if (id == -1)
            return SendErrorMessage(playerid, "Você deve estar dentro de uma casa para colocar móveis.");

		if (!House_IsOwner(playerid, id))
		    return SendErrorMessage(playerid, "Você só pode colocar os móveis em sua própria casa.");

		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 5.0 * floatsin(-angle, degrees);
        y += 5.0 * floatcos(-angle, degrees);

		if (Furniture_GetCount(id) > MAX_HOUSE_FURNITURE)
		    return SendErrorMessage(playerid, "Você pode ter apenas %d itens de mobiliário em sua casa.", MAX_HOUSE_FURNITURE);

		new furniture = Furniture_Add(id, name, InventoryData[playerid][itemid][invModel], x, y, z, 0.0, 0.0, angle);

		if (furniture == -1)
		    return SendErrorMessage(playerid, "O servidor atingiu o limite de moveis.");

		Inventory_Remove(playerid, name);
		PlayerData[playerid][pEditFurniture] = furniture;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tirou o \"%s\".", ReturnName(playerid, 0), name);
		EditDynamicObject(playerid, FurnitureData[furniture][furnitureObject]);
	}
	else if (!strcmp(name, "Boombox", true)) {
	    cmd_boombox(playerid, "colocar");
	}
    else if (!strcmp(name, "Telefone", true)) {
        cmd_telefone(playerid, "\1");
    }
    else if (!strcmp(name, "Radio Portatil", true)) {
        SendSyntaxMessage(playerid, "Use \"/pr [text]\" para conversar no seu Radio.");
    }
    else if (!strcmp(name, "Lata de Gasolina", true)) {
        cmd_usargalao(playerid, "\1");
    }
    else if (!strcmp(name, "Ferramentas", true)) {
        cmd_reparar(playerid, "\1");
    }
    else if (!strcmp(name, "Nitrogenio", true)) {
        cmd_nitro(playerid, "\1");
    }
    else if (!strcmp(name, "Spray", true)) {
        cmd_pintar(playerid, "\1");
    }
    else if (!strcmp(name, "Sistema de GPS", true)) {
        cmd_gps(playerid, "\1");
    }
    else if (!strcmp(name, "Maconha", true)) {
        cmd_usardroga(playerid, "maconha");
    }
    else if (!strcmp(name, "Cocaina", true)) {
        cmd_usardroga(playerid, "cocaina");
    }
    else if (!strcmp(name, "Heroina", true)) {
        cmd_usardroga(playerid, "heroina");
    }
    else if (!strcmp(name, "Steroids", true)) {
        cmd_usardroga(playerid, "steroids");
    }
    else if (!strcmp(name, "Guarrafa de Refrigerante", true)) {
        cmd_beber(playerid, "refrigerante");
    }
    else if (!strcmp(name, "Guarrafa de Agua", true)) {
        cmd_beber(playerid, "agua");
    }
    else if (!strcmp(name, "Pizza Congelada", true)) {
        cmd_cozinhar(playerid, "pizza");
    }
    else if (!strcmp(name, "Hamburguer Congelado", true)) {
        cmd_cozinhar(playerid, "hamburger");
    }
    else if (!strcmp(name, "Colete", true)) {
        cmd_colete(playerid, "\1");
    }
    else if (!strcmp(name, "Pizza Cozida", true))
	{
        if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Você não está com fome agora.");

        if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 15 > 100) ? (100) : (PlayerData[playerid][pHunger] + 15);
		Inventory_Remove(playerid, "Pizza Cozida");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um pedaço de pizza e come.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Hamburguer Cozido", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Você não está com fome agora.");

		if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
		Inventory_Remove(playerid, "Hamburguer Cozido");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um hambúrguer cozido e come.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Hamburguer de Frango", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Você não está com fome agora.");

        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
		Inventory_Remove(playerid, "Hamburguer de Frango");

		ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um pedaço de Hambúrguer de Frango e come.", ReturnName(playerid, 0));
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_OBJECT && PlayerData[playerid][pRangeBooth] != -1 && hitid == g_BoothObject[PlayerData[playerid][pRangeBooth]])
 	{
 	    static
	        string[128];

		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);

		PlayerData[playerid][pTargets]++;
		DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

		format(string, sizeof(string), "~b~Metas:~w~ %d/10", PlayerData[playerid][pTargets]);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], string);

		SetTimerEx("UpdateBooth", 3000, false, "dd", playerid, PlayerData[playerid][pRangeBooth]);
	}
	if (weaponid == 23 && PlayerData[playerid][pTazer] && GetFactionType(playerid) == FACTION_PCESP) {
	    PlayerPlaySoundEx(playerid, 6003);
	}

	if ((weaponid >= 22 && weaponid <= 39) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if (PlayerData[hitid][pRangeBooth] != -1 || PlayerData[hitid][pHospital] != -1)
	        return 0;

		if (PlayerData[hitid][pDrugUsed] == 2)
		{
		    new
				Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
				Float:health;

		    GetPlayerHealth(hitid, health);
		    SetPlayerHealth(hitid, floatsub(health, damage));

		    return 0;
		}
	}
	if ((22 <= weaponid <= 39) && (GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && GetPlayerAmmo(playerid) == 1) && !IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
    	//SetPlayerAmmo(playerid, weaponid, 1);
    	SendServerMessage(playerid, "Sua arma quebrou");
		}
		return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
new
			Recebeu = playerid,
            //Atirador = issuerid,
            StrCastiel[100]
		;
	if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
	{
	    switch (GetPVarInt(playerid, "InjuredWalked"))
		{
		    case 0:
			{
			SetPVarInt(playerid, "InjuredWalked", 1);
			SetPVarInt(playerid, "InjuredWalkstyle", 1);
			check_timer[playerid] = SetTimerEx("RunnerCheck", 500, true, "i", playerid);
			//SendServerMessage(playerid, "Você levou um tiro de %s.", ReturnName(playerid, 0));
			}
			case 1:
			{
			SetPVarInt(playerid, "InjuredWalked", 1);
			SetPVarInt(playerid, "InjuredWalkstyle", 1);
			check_timer[playerid] = SetTimerEx("RunnerCheck", 500, true, "i", playerid);
			}
		}
		if(bodypart == BODY_PART_HEAD)
	    {
	        SetPlayerHealth(Recebeu, 0);
	        //format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro na sua cabeça.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
	        SetTimerEx("Terminardemorrer", 10, false, "d", Recebeu);
	    }
		else if(bodypart == BODY_PART_GROIN && weaponid > 0){
			//format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro na cintura.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
		}
		else if(bodypart == BODY_PART_LEFT_ARM && weaponid > 0){
			//format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro em seu braço esquerdo.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
		}
		else if(bodypart == BODY_PART_RIGHT_ARM && weaponid > 0){
			//format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro em seu braço direito.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
		}
		else if(bodypart == BODY_PART_TORSO && weaponid > 0){
			//format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro nas costas.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
		}
		else if(bodypart == BODY_PART_LEFT_LEG && weaponid > 0){
			//format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro em sua perna esquerda.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
		}
		else if(bodypart == BODY_PART_RIGHT_LEG && weaponid > 0){
			//format(StrCastiel, sizeof(StrCastiel), "{FFFFFF} ** %s te deu um tiro em sua perna direita.", ReturnName(Atirador));
	        SendClientMessage(Recebeu, COLOR_LIGHTRED, StrCastiel);
		}
		ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
	}
	if (PlayerData[playerid][pFirstAid])
	{
        PlayerData[playerid][pFirstAid] = 0;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	new Float:HP;
    GetPlayerHealth(playerid, HP);
	if(issuerid != INVALID_PLAYER_ID)
   	{
   	    if(weaponid == 0 || weaponid == 1 || weaponid == 2 || weaponid == 3 || weaponid == 4 || weaponid == 5 ||
		    weaponid == 6 || weaponid == 7 || weaponid == 8 || weaponid == 15)
   	    {
   			sInfo[playerid][Misc] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && weaponid == 34 && bodypart == 9)
   	{
		SetPlayerHealth(playerid, 0.0);
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 3)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
   	    {
   			sInfo[playerid][Chest] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 4)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
   	    {
   			sInfo[playerid][Crotch] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 5)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
   	    {
   			sInfo[playerid][LArm] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 6)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
        {
   			sInfo[playerid][RArm] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 7)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
   	    {
   			sInfo[playerid][LLeg] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 8)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
   	    {
   			sInfo[playerid][RLeg] += 1;
		}
   	}
  	if(issuerid != INVALID_PLAYER_ID && bodypart == 9)
   	{
   		if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 ||
		    weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34 || weaponid == 35)
   	    {
   	    	SetPlayerHealth(playerid, HP-70);
   			sInfo[playerid][Head] += 1;
		}
   	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if (damagedid != INVALID_PLAYER_ID)
	{
		PlayerData[damagedid][pLastShot] = playerid;
		PlayerData[damagedid][pShotTime] = gettime();

		if (IsBleedableWeapon(weaponid) && !PlayerData[damagedid][pBleeding] && ReturnArmour(damagedid) < 1 && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[damagedid][pHospital] == -1)
		{
		    if (!PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid))
		    {
			    PlayerData[damagedid][pBleeding] = 0;
			    PlayerData[damagedid][pBleedTime] = 0;

				CreateBlood(damagedid);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", damagedid, _:ShowPlayerBox(damagedid, 0xFF000066));
			}
		}
		
		if (PlayerData[playerid][pDrugUsed] == 4 && (weaponid >= 0 && weaponid <= 15))
		{
		    SetPlayerHealth(damagedid, ReturnHealth(damagedid) - 6);
		}
		
		//Sistema Tazer
        if (GetFactionType(playerid) == FACTION_PCESP && PlayerData[playerid][pTazer] && PlayerData[damagedid][pStunned] < 1 && weaponid == 23)
        {
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(playerid, "O jogador deve estar em pé para ser atordoados.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "Você deve estar mais perto do jogador para atordoar.");

            new
                string[64];

			format(string, sizeof(string), "Voce foi ~r~atordoado~w~ por %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 20;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid,"PED","FLOOR_hit_f",4.0,0,1,1,1,1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s atordoou a %s com o tazer.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
        
		//Sistema Balas de borracha
        if (GetFactionType(playerid) == FACTION_PCESP && PlayerData[playerid][pBeanBag] && PlayerData[damagedid][pStunned] < 1 && weaponid == 25)
        {
			if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "Você deve estar mais perto do jogador para atordoar.");

            new
                string[64];

			format(string, sizeof(string), "Voce foi ~r~atordoado~w~ por %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 30;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid,"SWEET","Sweet_injuredloop",4.0,1,0,1,1,1);
            ShowPlayerFooter(damagedid, string);
            
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s atordoou a %s com sua munição não letal.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
        
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{

	if (killerid != INVALID_PLAYER_ID)
	{
	    if (1 <= reason <= 46)
			Log_Write("logs/kill_log.txt", "[%s] %s matou %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason));

		else
			Log_Write("logs/kill_log.txt", "[%s] %s matou %s (razão %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason);

		if (reason == 50 && killerid != INVALID_PLAYER_ID)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s matou %s com heli-blading.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if (reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s matou %s com driver shooting.", ReturnName(killerid, 0), ReturnName(playerid, 0));
	}
	
	ResetWeapons(playerid);
	PlayerDrunk[playerid] = 0;
	PlayerDrunkTime[playerid] = 0;
	PlayerData[playerid][pAlcoholPerk] = 0;
 
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{

	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
	    return 0;

    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);

	if (newkeys & KEY_CROUCH && IsPlayerInAnyVehicle(playerid))
	{
		cmd_abrir(playerid, "\1");
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim])
	{
	    ClearAnimations(playerid);
		HidePlayerFooter(playerid);

	    PlayerData[playerid][pLoopAnim] = false;
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !PlayerData[playerid][pDrinkTime])
     	{
		    if (GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) <= 0.0)
		    {
	    	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				SendServerMessage(playerid, "A garrafa está vazia.");
		    }
	    	else
	    	{
	    	    PlayerData[playerid][pDrinkTime] = 2;

	    	    switch (PlayerData[playerid][pDrinking])
	    	    {
					case 1: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
                    case 2: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
				}
			    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) - 10.0);
			}
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid))
	{
	    if (PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
	        return 1;

		new id = Job_NearestPoint(playerid);

		if (id != -1)
		{
		    PlayerData[playerid][pMineTime] = 1;
		    SetTimerEx("MineTime", 400, false, "d", playerid);

		    if (PlayerData[playerid][pMineCount] < 5)
	    	{
	    	    PlayerData[playerid][pMineCount]++;

	        	ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
			    PlayerData[playerid][pMinedRock] = 1;
			    PlayerData[playerid][pMineCount] = 0;

			    RemovePlayerAttachedObject(playerid, 4);

			    ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

			    SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				SendServerMessage(playerid, "Você encontrou uma pedra cortante, vá ao ponto de entrega.");

				SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			}
	    }
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    static
	        string[320];

		if (PlayerData[playerid][pLoadCrate])
		{
		    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i))
			{
			    if (!IsLoadableVehicle(i))
			        return SendErrorMessage(playerid, "Você não pode carregar caixas para este veículo.");

			    if (CoreVehicles[i][vehLoadType] != 0 && CoreVehicles[i][vehLoadType] != PlayerData[playerid][pLoadType])
			        return SendErrorMessage(playerid, "Este veículo já está carregado com outra coisa.");

			    if (CoreVehicles[i][vehLoads] >= 6)
			        return SendErrorMessage(playerid, "Este veículo só pode armazenar até 6 caixas.");

				CoreVehicles[i][vehLoads]++;
				CoreVehicles[i][vehLoadType] = PlayerData[playerid][pLoadType];

                ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou uma caíxa na parte de trás do %s.", ReturnName(playerid, 0), ReturnVehicleName(i));

                if (CoreVehicles[i][vehLoads] == 6)
                {
                    DisablePlayerCheckpoint(playerid);

					if (PlayerData[playerid][pShipment] != -1)
					{
					    PlayerData[playerid][pDeliverShipment] = 1;

					    SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar no ponto de entrega.");
					    SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pShipment]][bizDeliver][0], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][1], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][2], 3.0);
					}
					else switch (PlayerData[playerid][pLoadType])
                    {
                    	case 1: SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar em qualquer loja de varejo.");
                        case 2: SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar em qualquer ammunation.");
                        case 3: SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar em qualquer loja de roupas.");
                        case 4: SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar em qualquer fast food.");
                        case 5: SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar em qualquer posto de gasolina.");
                        case 6: SendServerMessage(playerid, "Você já carregou todas as caíxas. Use /descarregar em qualquer loja de mobilia.");
					}
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;
                }
                PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				return 1;
			}
		}
        if (PlayerData[playerid][pCarryTrash])
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (GetVehicleModel(i) == 408 && IsPlayerNearBoot(playerid, i))
			{
			    if (CoreVehicles[i][vehTrash] >= 15)
			        return SendErrorMessage(playerid, "Você não pode transportar mais resíduos (limite: 15).");

				CoreVehicles[i][vehTrash]++;

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s joga um saco de lixo no Trashmaster.", ReturnName(playerid, 0));

				PlayerData[playerid][pCarryTrash] = 0;
				break;
			}
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
			{
			    if (GetVehicleCrates(i) >= GetMaxCrates(i))
			        return SendErrorMessage(playerid, "Este veículo ja possui muitas caixas (limite: %d).", GetMaxCrates(i));

				CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				PlayerData[playerid][pCarryCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				
				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s carregou um caixote para o %s.", ReturnName(playerid, 0), ReturnVehicleName(i));
				break;
			}
		}
		else if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    new
				count = 0,
				id = Item_Nearest(playerid);

		    if (id != -1)
		    {
		        string = "";

		        for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
		            NearestItems[playerid][count++] = i;

		            strcat(string, DroppedItems[i][droppedItem]);
		            strcat(string, "\n");
		        }
		        if (count == 1)
		        {
				    if (DroppedItems[id][droppedWeapon] != 0)
					{
				        if (PlayerData[playerid][pPlayingHours] < 2)
							return SendErrorMessage(playerid, "Você deve ter jogado pelo menos duas horas.");


    	   				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);
    	                Item_Delete(id);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou a %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
                        Log_Write("logs/droppick.txt", "[%s] %s pegou a %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));

					}
					else if (PickupItem(playerid, id))
					{
			    		format(string, sizeof(string), "~g~%s~w~ adicionado ao inventario!", DroppedItems[id][droppedItem]);
			    		ShowPlayerFooter(playerid, string);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou a \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
						Log_Write("logs/droppick.txt", "[%s] %s pegou a \"%s\".", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
					}
					else
						SendErrorMessage(playerid, "Você não tem espaço em seu inventário.");
				}
				else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Recolher Items", string, "Recolher", "Cancelar");
			}
		}
	}
	else if (newkeys & KEY_SECONDARY_ATTACK)
	{
		static
		    id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
		    switch (VendorData[id][vendorType])
		    {
		        case 1:
		        {
					if (GetMoney(playerid) < 3)
					    return SendErrorMessage(playerid, "É preciso ter pelo menos 3$.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Espere um pouco para comprar denovo.");

					if (Inventory_Count(playerid, "Hamburguer Cozido") >= 5)
					    return SendErrorMessage(playerid, "Você tem muitos hambúrgueres em seu inventário.");

					id = Inventory_Add(playerid, "Hamburguer Cozido", 2703);

					if (id != -1)
					{
					    PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -3);
					    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s comprou um hambúrguer por $3.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "Seu ~p~hamburguer~w~ foi adicionado ao seu inventario.");
					}
				}
				case 2:
		        {
					if (GetMoney(playerid) < 2)
					    return SendErrorMessage(playerid, "É preciso ter pelo menos 2$.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Por favor, aguarde antes de comprar de um fornecedor novamente.");

					if (Inventory_Count(playerid, "Guarrafa de Refrigerante") >= 10)
					    return SendErrorMessage(playerid, "Você tem muitas garrafas de refrigerante em seu inventário já.");

					id = Inventory_Add(playerid, "Guarrafa de Refrigerante", 1543);

					if (id != -1)
					{
                        PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -2);
					    
                    	id = Vendor_Nearest(playerid);
                    	
					    VendorData[id][vendorMoney] += 2;
    					Vendor_Save(id);
    					
					    ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s comprou um refrigerante com o fornecedor por $2.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "Seu ~p~refrigerante~w~ foi adicionado ao seu inventario.");
						
					}
				}
			}
		}
		if (PlayerData[playerid][pRangeBooth] != -1)
		{
		    Booth_Leave(playerid);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abandonou a cabine de tiros.", ReturnName(playerid, 0));
		}
		else for (new i = 0; i < MAX_BOOTHS; i ++) if (!g_BoothUsed[i] && IsPlayerInRangeOfPoint(playerid, 1.5, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2]))
		{
		    g_BoothUsed[i] = true;
		    PlayerData[playerid][pRangeBooth] = i;

		    UpdateWeapons(playerid);
		    ResetPlayerWeapons(playerid);

		    GivePlayerWeapon(playerid, 24, 15000);

			Booth_Refresh(playerid);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], "~b~Brancos:~w~ 0/10");

			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][81]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s entrou na cabine de tiro.", ReturnName(playerid, 0));
			return 1;
		}
		if (IsPlayerInRangeOfPoint(playerid, 2.5, -204.5334, -1735.3131, 675.7687) && PlayerData[playerid][pHospitalInt] != -1)
		{
			SetPlayerPos(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
			SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = -1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 272.2939, 1388.8876, 11.8342))
		{
		    SetPlayerPosEx(playerid, 1206.8619, -1314.3546, 797.0880);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1206.8619, -1314.3546, 796.7880) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD && !PlayerData[playerid][pJailTime])
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPos(playerid, 272.2939, 1388.8876, 11.8342);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1211.1923, -1354.3439, 796.7456) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD)
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPos(playerid, 201.8927, 1437.1788, 10.5950);
		    SetPlayerFacingAngle(playerid, 180.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 201.8927, 1437.1788, 10.5950))
		{
		    SetPlayerPosEx(playerid, 1211.1923, -1354.3439, 797.0456);
		    SetPlayerFacingAngle(playerid, 0.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
		{
			SetPlayerPos(playerid, -204.5648, -1736.1201, 675.7687);
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = i;

		    return 1;
	    }

	}
	return 1;
}

forward PutInsideVehicle(playerid, vehicleid);
public PutInsideVehicle(playerid, vehicleid)
{
	if (!PlayerData[playerid][pDrivingTest])
	    return 0;

	RemoveFromVehicle(vehicleid);
    PutPlayerInVehicle(playerid, vehicleid, 0);
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if (PlayerData[playerid][pTaxiDuty])
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Você já não estão trabalhando como taxista!");
	}
	if (PlayerData[playerid][pJob] == JOB_UNLOADER && GetVehicleModel(vehicleid) == 530)
	{
	    CoreVehicles[vehicleid][vehLoadType] = 0;
		DestroyObject(CoreVehicles[vehicleid][vehCrate]);

		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!ispassenger){
	   	for(new i = 0; i < sizeof(pickCars); i++)
		{
			if(vehicleid == pickCars[i])
			{
				if(PlayerData[playerid][pJob] != JOB_UNLOADER)
				{
					ClearAnimations( playerid );
	   				RemovePlayerFromVehicle(playerid);
		   			return SendErrorMessage(playerid, "Você não pode usar esse veiculo voce nao tem o emprego de Caminhoneiro.");
				}
				else
				{
	 				  CoreVehicles[vehicleid][vehFuel] = 100;
				}
			}
		}
	   	for(new i = 0; i < sizeof(mecCars); i++)
		{
			if(vehicleid == mecCars[i])
			{
				if(PlayerData[playerid][pJob] != JOB_MECHANIC)
				{
					ClearAnimations( playerid );
	   				RemovePlayerFromVehicle(playerid);
		   			return SendErrorMessage(playerid, "Você não pode usar esse veiculo, voce não tem o emprego de mecanico.");
				}
				else
				{
	 				  CoreVehicles[vehicleid][vehFuel] = 100;
				}
			}
		}
		for(new i = 0; i < sizeof(GRPAe); i++)
		{
			if(vehicleid == GRPAe[i])
			{
				if(GetFactionType(playerid) !=  FACTION_PCESP)
				{
					ClearAnimations( playerid );
	   			//	RemovePlayerFromVehicle(playerid);
		   			return SendErrorMessage(playerid, "Você não pode usar esse veiculo.");
				}
				else
				{
	 				  CoreVehicles[vehicleid][vehFuel] = 100;
				}
			}
		}
		for(new i = 0; i < sizeof(taxiCars); i++)
		{
			if(vehicleid == taxiCars[i])
			{
				if(PlayerData[playerid][pJob] != JOB_TAXI)
				{
					ClearAnimations( playerid );
	   				RemovePlayerFromVehicle(playerid);
		   			return SendErrorMessage(playerid, "Você não pode usar esse veiculo, voce nao tem o emprego de taxista.");
				}
				else
				{
	 				  CoreVehicles[vehicleid][vehFuel] = 100;
				}
			}
		}
		for(new i = 0; i < sizeof(garbageCars); i++)
		{
			if(vehicleid == garbageCars[i])
			{
				if(PlayerData[playerid][pJob] != JOB_GARBAGE)
				{
					ClearAnimations( playerid );
	   				RemovePlayerFromVehicle(playerid);
		   			return SendErrorMessage(playerid, "Você não pode usar esse veiculo, voce nao tem o emprego de Lixeiro.");
				}
				else
				{
				    CoreVehicles[vehicleid][vehFuel] = 100;
				}
			}
		}
		for(new i = 0; i < sizeof(deliveryCars); i++)
		{
			if(vehicleid == deliveryCars[i])
			{
				if(PlayerData[playerid][pJob] != JOB_COURIER)
				{
					ClearAnimations( playerid );
	   				RemovePlayerFromVehicle(playerid);
		   			return SendErrorMessage(playerid, "Você não pode usar esse veiculo, voce nao tem o emprego de entregador.");
				}
				else
				{
				    CoreVehicles[vehicleid][vehFuel] = 100;
				}
			}
		}
	}
    if (IsPlayerNPC(playerid))
	    return 1;

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
	    ClearAnimations(playerid);

	    return 0;
	}
	
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{

	if(TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendErrorMessage(playerid, "Você não está em qualquer veículo");
		    return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsLoadableVehicle(vehicleid))
  		{
  			SendErrorMessage(playerid, "Este não é um veículo para o transporte.");
  		}
	    new string[180];
        format(string, sizeof(string), "Você recebeu $%d por seu trabalho!", TruckingCheck[playerid]);
        GiveMoney(playerid, TruckingCheck[playerid]);
        TruckingCheck[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);
		DisablePlayerCheckpoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if (PlayerData[playerid][pCP])
	{
	    DisablePlayerCheckpoint(playerid);
	    PlayerData[playerid][pCP] = 0;
	}

	if (PlayerData[playerid][pDrivingTest])
	{

 	}
 	
	else
	{
	    new
			vehicleid = GetPlayerVehicleID(playerid),
			Float:health;

		if (PlayerData[playerid][pWaypoint])
		{
		    PlayerData[playerid][pWaypoint] = 0;

		    DisablePlayerCheckpoint(playerid);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
		}
		else if (PlayerData[playerid][pJob] == JOB_COURIER && !IsPlayerInAnyVehicle(playerid))
		{
			if (PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadCrate] && Job_NearestPoint(playerid) != -1)
			{
			    PlayerData[playerid][pLoadCrate] = 1;

		        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				ShowPlayerFooter(playerid, "Pressione ~y~'N'~w~ perto de um caminhão para carregar a caixat.");
			}
			else if (PlayerData[playerid][pUnloading] != -1)
			{
				if (!PlayerData[playerid][pLoadCrate])
				{
				    PlayerData[playerid][pLoadCrate] = 1;
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

			        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pUnloading]][bizPos][0], BusinessData[PlayerData[playerid][pUnloading]][bizPos][1], BusinessData[PlayerData[playerid][pUnloading]][bizPos][2], 1.0);
					ShowPlayerFooter(playerid, "Entregar o caixote no ~r~checkpoint.");

					CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads]--;
				}
				else
				{
				    static
				        Float:fX,
				        Float:fY,
				        Float:fZ,
						string[64];

				    PlayerData[playerid][pLoadCrate] = 0;
				    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				    RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
					{
					    case 1:
						{
							TruckingCheck[playerid] += 35;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$35~w~ foram acumuladas para o seu pagamento.");
					    }
					    case 2:
						{
						    TruckingCheck[playerid] += 40;
					        //GiveMoney(playerid, 40);
					        ShowPlayerFooter(playerid, "~g~$40~w~ foram acumuladas para o seu pagamento.");
					    }
					    case 3:
						{
						    TruckingCheck[playerid] += 30;
					        //GiveMoney(playerid, 30);
					        ShowPlayerFooter(playerid, "~g~$30~w~ foram acumuladas para o seu pagamento.");
					    }
					    case 4:
						{
						    TruckingCheck[playerid] += 35;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$35~w~ foram acumuladas para o seu pagamento.");
					    }
					    case 5:
						{
						    TruckingCheck[playerid] += 40;
					        //GiveMoney(playerid, 40);
					        ShowPlayerFooter(playerid, "~g~$40~w~ foram acumuladas para o seu pagamento.");
					    }
					    case 6:
						{
						    TruckingCheck[playerid] += 35;
					        //GiveMoney(playerid, 35);
					        ShowPlayerFooter(playerid, "~g~$35~w~ foram acumuladas para o seu pagamento.");
					    }
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] == 5)
					{
						for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == PlayerData[playerid][pUnloading]) {
						    PumpData[i][pumpFuel] += 100;

			                format(string, sizeof(string), "[Bomba de Gasolina: %d]\n{FFFFFF}Combustível Restante: %d litros", i, PumpData[i][pumpFuel]);
						    UpdateDynamic3DTextLabelText(PumpData[i][pumpText3D], COLOR_DARKBLUE, string);

						    Pump_Save(i);
						}
					}
					else
					{
						BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 20;
						Business_Save(PlayerData[playerid][pUnloading]);
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] > 0)
					{
					    GetVehicleBoot(PlayerData[playerid][pUnloadVehicle], fX, fY, fZ);
					    SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
					}
					else
					{
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] = 0;
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] = 0;

				     	PlayerData[playerid][pUnloading] = -1;
					    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

						DisablePlayerCheckpoint(playerid);
					    SendServerMessage(playerid, "Você entregou toda as mercadorias do veículo.");
					    SendServerMessage(playerid, "Voltar para a transportadora para pegar o salário.");
					    SetPlayerCheckpoint(playerid, 2521.0376, -2090.3279, 13.4125, 5.0);

					    if (PlayerData[playerid][pShipment] != -1)
					    {
					        foreach (new i : Player) if (Business_IsOwner(i, PlayerData[playerid][pShipment])) {
					            SendServerMessage(i, "%s entregou seu pedido para %s.", ReturnName(playerid, 0), BusinessData[PlayerData[playerid][pShipment]][bizName]);
							}
							BusinessData[PlayerData[playerid][pShipment]][bizShipment] = 0;
							Business_Save(PlayerData[playerid][pShipment]);

          					PlayerData[playerid][pShipment] = -1;
          					PlayerData[playerid][pDeliverShipment] = 0;
					    }
					}
				}
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
		    new money = random(20) + 5;

			SendServerMessage(playerid, "Você ganhou $%d pela rocha.", money);
			GiveMoney(playerid, money);

			PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObject(playerid, 4);

			SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	    else if (PlayerData[playerid][pJob] == JOB_UNLOADER && IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	    {
	        GetVehicleHealth(vehicleid, health);

	        CoreVehicles[vehicleid][vehLoadType] = 0;
	        DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);

			if (health < CoreVehicles[vehicleid][vehLoadHealth]) {
			    SendErrorMessage(playerid, "Uma caixa foi danificada.");
			}
			else {
				SendServerMessage(playerid, "Você recebeu $20.");
				GiveMoney(playerid, 20);
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	new vehicleid = GetPlayerVehicleID(playerid);

	if (newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
	{
	    for (new i = 34; i < 39; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);

	    ShowHungerTextdraw(playerid, 0);
	    PlayerData[playerid][pHealth] = 100.0;

	    ResetWeapons(playerid);
	    ResetPlayer(playerid);

	    PlayerData[playerid][pKilled] = 1;

	    if (!PlayerData[playerid][pInjured])
		{
	        PlayerData[playerid][pInjured] = 1;

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, gServerTextdraws[2]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
		}
		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
		    SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, "[TELEFONE]:{FFFFFF} A linha ficou muda...");
		    CancelCall(playerid);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER)
	{
	    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	        return RemoveFromVehicle(playerid);

	    for (new i = 34; i < 39; i ++)
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);
	}
 	else if (newstate == PLAYER_STATE_DRIVER)
	{
		if (PlayerData[playerid][pJob] == JOB_GARBAGE && GetVehicleModel(vehicleid) == 408 && CoreVehicles[vehicleid][vehTrash] > 0)
		{
		    new pointid = -1;

		    if ((pointid = GetClosestJobPoint(playerid, 7)) != -1)
		    {
			    PlayerData[playerid][pCP] = 1;
			    SetPlayerCheckpoint(playerid, JobData[pointid][jobPoint][0], JobData[pointid][jobPoint][1], JobData[pointid][jobPoint][2], 2.5);

		    	SendServerMessage(playerid, "Este veículo esta carregado com %d sacos de lixo (marcado o aterro no mapa).", CoreVehicles[vehicleid][vehTrash]);
		    }
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
		{
		    if (PlayerData[playerid][pLoading])
		    {
				DisablePlayerCheckpoint(playerid);
				PlayerData[playerid][pLoading] = 0;
			}
			static
			    string[64];

		    switch (CoreVehicles[vehicleid][vehLoadType])
			{
				case 1: format(string, sizeof(string), "~b~Carregado de:~w~ Suprimentos de Varejo~n~~b~Pacotes:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
		        case 2: format(string, sizeof(string), "~b~Carregado de:~w~ Municao~n~~bPacotes:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 3: format(string, sizeof(string), "~b~Carregado de:~w~ Roupas~n~~b~Pacotes:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 4: format(string, sizeof(string), "~b~Carregado de:~w~ Comida~n~~b~Pacotes:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 5: format(string, sizeof(string), "~b~Carregado de:~w~ Gasolina~n~~b~Litros:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 6: format(string, sizeof(string), "~b~Carregado de:~w~ Moveis~n~~b~Pacotes:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
			}
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][82]);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][82], string);
		}
	    if (IsVehicleImpounded(vehicleid))
	    {
	        RemovePlayerFromVehicle(playerid);
	        SendErrorMessage(playerid, "Este carro esta apreendido, e você não pode ligar o motor dele.");
	    }
		else if (!IsEngineVehicle(vehicleid))
		{
			SetEngineStatus(vehicleid, true);
		}
		else
		{
			if (!GetEngineStatus(vehicleid))
			{
			    if (CoreVehicles[vehicleid][vehFuel] < 1)
	    			ShowPlayerFooter(playerid, "Nao ha ~r~gasolina~w~ no veiculo.");

				else if (ReturnVehicleHealth(vehicleid) <= 300)
	    			ShowPlayerFooter(playerid, "Este veiculo esta ~r~danificado~w~ e necessita de reparacao.");

  				else ShowPlayerFooter(playerid, "Use ~r~/motor~w~ para ligar o motor.");
			}
			if (IsDoorVehicle(vehicleid) && !Inventory_HasItem(playerid, "Carta de Conducao") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Você está dirigindo sem CNH.");
			}
			if (IsDoorVehicle(vehicleid) && !Inventory_HasItem(playerid, "CRLV") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Você está dirigindo sem os documentos do veiculo.");
			}
		}
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo]) for (new i = 34; i < 39; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
	if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
	{
	    PlayerData[playerid][pPlayRadio] = 0;
	    StopAudioStreamForPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    if (PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }
	    if (IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
	    {
	        static
	            url[128];

			strunpack(url, CoreVehicles[vehicleid][vehURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, url);

			PlayerData[playerid][pPlayRadio] = 1;
		}
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		if (PlayerData[playerid][pInjured] == 1)
		{
		    RemoveFromVehicle(playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 25, 28..33:
	    		SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectatePlayer(i, playerid);
		}
	}
	if (newstate == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < sizeof(rentCars); i++)
		{
			if(vehicleid == rentCars[i])
			{
				if(GetPVarInt(playerid, "RentVehKey") == 0)
				{
				    SendClientMessage(playerid, -1, "Use /alugarveiculo.");
				}
			}
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

	    PlayerData[playerid][pTaxiFee] = 5;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = driverid;

	    SendServerMessage(driverid, "%s entrou no veiculo como um cliente.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Você entrou no taxi de %s.", ReturnName(driverid, 0));
	}
 	if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}
	// Anti Car Spam

	return 1;
}

new bool:PlayerInCheckPoint[MAX_PLAYERS] = {false, ...};
new CurrentEntranceID[MAX_PLAYERS] = {-1, ...};

public OnPlayerUpdate(playerid)
{
	static str[64], id = -1, keys[3], vehicleid;
	
	
 	new nearestEntranceID = Entrance_Nearest(playerid);
 	
    if(nearestEntranceID != -1)
    {
        if(!PlayerInCheckPoint[playerid]) // Se o jogador não estiver em um checkpoint
        {
            // Crie um MiniCheckPoint
            SetPlayerCheckpoint(playerid, EntranceData[nearestEntranceID][entrancePos][0], EntranceData[nearestEntranceID][entrancePos][1], EntranceData[nearestEntranceID][entrancePos][2], 1);
            PlayerInCheckPoint[playerid] = true;
            CurrentEntranceID[playerid] = nearestEntranceID;
            // Exibe o nome da entrada no chat
            new string[128];
            format(string, sizeof(string), "Você está na entrada %s.", EntranceData[nearestEntranceID][entranceName]);
            SendClientMessage(playerid, 0xFFFFFFFF, string);
        }
    }
    else if(PlayerInCheckPoint[playerid]) // Se o jogador se afastar
    {
        // Remove o MiniCheckPoint
        DisablePlayerCheckpoint(playerid);
        PlayerInCheckPoint[playerid] = false;
        CurrentEntranceID[playerid] = -1;
    }

	if (PlayerData[playerid][pKicked])
		return 0;
    if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pHoldWeapon] > 0 || PlayerData[playerid][pMining] > 0))
	    SetPlayerArmedWeapon(playerid, 0);
    AlertaRe(playerid);
    IsVehicleDrivingBackwards(GetPlayerVehicleID(playerid));

	if (IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
	    vehicleid = INVALID_VEHICLE_ID;

	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);

    //armas bandoleira
    atualizarArmaC(playerid);
    
	if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pHoldWeapon] > 0 || PlayerData[playerid][pMining] > 0))
	    SetPlayerArmedWeapon(playerid, 0);
	//
	if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon])
	{
	    PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid) && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[playerid][pCharacter] > 0 && PlayerData[playerid][pFaction] < 0 )
		{
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s foi banido por weapon hacks (%s).", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			Log_Write("logs/cheat_log.txt", "[%s] %s foi banido por weapon hacks (%s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));

			Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", "Weapon Hacks");
			Kick(playerid);

			return 0;
		}
	}
	
	//Adicionar armas
	//45, 44, 40, 39, 38, 37, 36, 35, 34, 33, 28, 27, 26, 23, 21, 20, 19, 18, 17, 16
 	PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);
	if (PlayerData[playerid][pWeapon] == 38 || PlayerData[playerid][pWeapon] == 37)
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s está tentando puxar %s", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
        ResetPlayerWeapons(playerid);
	return 0;
	}
	
	if(GetSpeedKM(playerid) > 250)
	{
  		SendClientMessage(playerid, COLOR_WHITE, "Você foi Kickado");
		Kick(playerid);
	}
	
//////////////////////////////////////////////////////////////////////////////////////////////////////////
	if (GetPlayerMoney(playerid) != PlayerData[playerid][pMoney])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	}
	if (GetPlayerScore(playerid) != PlayerData[playerid][pPlayingHours])
	{
		SetPlayerScore(playerid, PlayerData[playerid][pPlayingHours]);
	}
	if (PlayerData[playerid][pWaypoint])
	{
	    format(str, sizeof(str), "~b~Destino:~w~ %s (%.2f metros)", PlayerData[playerid][pLocation], GetPlayerDistanceFromPoint(playerid, PlayerData[playerid][pWaypointPos][0], PlayerData[playerid][pWaypointPos][1], PlayerData[playerid][pWaypointPos][2]));
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][69], str);
	}
	if (PlayerData[playerid][pMaskOn])
	{
		if (!PlayerData[playerid][pHideTags])
	    {
            foreach (new i : Player) {
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		    format(str, sizeof(str), "Mascarado_#%d", PlayerData[playerid][pMaskID]);

	        PlayerData[playerid][pHideTags] = 1;
	        PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
	    }
	}
	if (!PlayerData[playerid][pMaskOn] && PlayerData[playerid][pHideTags])
	{
	    foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		ResetNameTag(playerid);
	}
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
	    {
		    static
		        Float:fDamage,
		        Float:fSpeed,
		        Float:fVelocity[3];

	  		GetVehicleHealth(vehicleid, fDamage);
	  		GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);

	  		fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
 	  		fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);

			if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;

	        format(str, sizeof(str), "~w~Gasolina:~r~ %d%c", CoreVehicles[vehicleid][vehFuel], '%');
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][35], str);

			format(str, sizeof(str), "~w~Velocidade:~r~ %.0f km/h", fSpeed);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][36], str);

		}
		for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
		{
			static
			    tires[4];

			GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);

			if (tires[3] != 1111) {
			    UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 1111);
			}
			break;
		}
	}
	switch (PlayerData[playerid][pHouseLights])
	{
	    case 0:
	    {
	        if ((id = House_Inside(playerid)) != -1 && !HouseData[id][houseLights])
			{
	        	PlayerData[playerid][pHouseLights] = true;
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	        else PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	    }
	    case 1:
	    {
	        if ((id = House_Inside(playerid)) == -1 || (id != -1 && HouseData[id][houseLights]))
			{
	            PlayerData[playerid][pHouseLights] = false;
                PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	    }
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
 		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 		PlayerData[playerid][pDrinking] = 0;
	}
	
	if (Detector_Nearest(playerid) != -1)
	{
		if (IsPlayerArmed(playerid) && gettime() > PlayerData[playerid][pDetectorTime])
		{
			PlayerData[playerid][pDetectorTime] = gettime() + 2;

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** O detector de metais detectou algo ilicito com (( %s ))", ReturnName(playerid, 0));
			PlayerPlaySoundEx(playerid, 43000);
		}
	}
	if ((keys[0] & KEY_FIRE) && GetPlayerWeapon(playerid) == 42)
	{
        static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ g_aFireExtinguished[i] == 32)
   			{
   			    SetTimerEx("DestroyWater", 8000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

      			DestroyDynamicObject(g_aFireObjects[i]);
	        	g_aFireExtinguished[i] = 0;
			}
		}
	}
	if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fVector[3],
			Float:fCamera[3];

	    GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
	    GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
   				{
   			    	SetTimerEx("DestroyWater", 15000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

	      			DestroyDynamicObject(g_aFireObjects[i]);
		        	g_aFireExtinguished[i] = 0;
				}
		  	}
	    }
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	
    PlayerData[playerid][pAPRCash] = 0;
    //
	//Anti C-Bug
	new
        iTick = GetTickCount( );

    PlayerInfo[ playerid ][ isCrouched      ] = false;
    PlayerInfo[ playerid ][ isFiring        ] = false;
    PlayerInfo[ playerid ][ iLastFire       ] = iTick;
    PlayerInfo[ playerid ][ iLastFiring     ] = iTick;
    PlayerInfo[ playerid ][ iLastStrafeFire ] = iTick;
    //
    SetPlayerColor(playerid, 0x00000000);
    HiddenAdmin[playerid] = false;
	if (IsPlayerNPC(playerid))
	    return 1;

	if ((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), PlayerData[playerid][pLeaveIP]))
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) foi kickado possível hack de reingressar.", ReturnName(playerid), ReturnIP(playerid));
	    Kick(playerid);
		return 1;
	}
	new
		str[128];

	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);
	Actors[playerid] = -1;

	PreloadAnimations(playerid);

	if (g_ServerRestart) {
		TextDrawShowForPlayer(playerid, gServerTextdraws[3]);
	}
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
 	SWATv5[playerid] = 0;


	CancelSelectTextDraw(playerid);

	GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME + 1);

	ResetStatistics(playerid);
	CreateTextDraws(playerid);

	format(str, sizeof(str), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", ReturnName(playerid), PlayerData[playerid][pIP]);
	mysql_tquery(g_iHandle, str, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	//salva tudo
	foreach (new i : Player)
	{
		SQL_SaveCharacter(i);
	}
	PlayerData[playerid][pLeaveTime] = GetTickCount();

	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);

 	TerminateConnection(playerid);
	SWATv5[playerid] = 0;
	
	gTimerRouboATM[playerid] = INVALID_TIMER;
	
	
	///////////////////////// sistema de desconectar ///////////////////////////////////
	new String[200];
	switch(reason)
    {
       case 0: format(String, sizeof(String),"{CFCFCF}%s{696969} teve um problema de {CFCFCF}(Conexão/Erro)", ReturnName(playerid));
       case 1: format(String, sizeof(String),"{CFCFCF}%s{696969} deslogou do servidor {CFCFCF}(Saiu /q)", ReturnName(playerid));
       case 2: format(String, sizeof(String),"{CFCFCF}%s{696969} foi punido por administrador {CFCFCF}(Banido/Kickado)", ReturnName(playerid));
    }
    ProxDetectorEx(100.0, playerid, String, CinzaC);
	return 1;
}

Server_Save()
{
	new
	    File:file = fopen("server.ini", io_write),
	    str[128];

	format(str, sizeof(str), "TaxMoney = %d\n", g_TaxVault);
	return (fwrite(file, str), fclose(file));
}

Server_Load()
{
	new File:file = fopen("server.ini", io_read);

	if (file) {
		g_TaxVault = file_parse_int(file, "TaxMoney");

		fclose(file);
	}
	return 1;
}
public OnGameModeExit()
{
    UpdateBoletim();
    UpdatePranchetas();
    UpdateMandato();
	return 1;
}
public OnGameModeInit()
{


    SetTimer("CheckArmaC", 1000, true);//1s
    AntiDeAMX();
    SetTimer("OnTimerCheckTime", 60000, true);
    
///////////////////////////////////////////////////////////////////////////////////////
    for(new i=0; i<MAX_PLAYERS; i++)
	{
	    Zones[i] = TextDrawCreate(59.200000, 305.386566, "_");
	   	TextDrawBackgroundColor(Zones[i], 255);
	   	TextDrawFont(Zones[i], 1);
	   	TextDrawLetterSize(Zones[i], 0.356399, 1.301333);
	   	TextDrawColor(Zones[i], -1);
	   	TextDrawSetOutline(Zones[i], 1);
	   	TextDrawSetProportional(Zones[i], 1);
	   	TextDrawSetShadow(Zones[i], 0);
	   	TextDrawTextSize(Zones[i], -59.999996, -20.159999);
 	}

	static
	    arrVirtualWorlds[2000];

	WeatherRotator();
	LoadBoletim();
	LoadPranchetas();
	LoadMandato();

	SQL_Connect();
	ManualVehicleEngineAndLights();
	new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SERVER_NAME);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SERVER_URL);
	SendRconCommand(rcon);
	SetGameModeText(SERVER_REVISION);
	if (mysql_errno(g_iHandle) != 0)
	    return 0;
	    
	Server_Load();
	mysql_tquery(g_iHandle, "SELECT * FROM `houses`", "House_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `businesses`", "Business_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `dropped`", "Dropped_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `entrances`", "Entrance_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `cars`", "Car_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `jobs`", "Job_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `plants`", "Plant_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `factions`", "Faction_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `gates`", "Gate_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `atm`", "ATM_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `garbage`", "Garbage_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `vendors`", "Vendor_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `gunracks`", "Rack_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `graffiti`", "Graffiti_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `detectors`", "Detector_Load", "");

    SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
    SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
    SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
    SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
    SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
    SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
    SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
    SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
    SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

	for (new i = 0; i < sizeof(arrVirtualWorlds); i ++) {
	    arrVirtualWorlds[i] = i + 7000; // -2219.1223,133.8855,1035.6328
	}
	
	for (new i = 0; i < sizeof(arrBoothPositions); i ++) {
	    CreateDynamic3DTextLabel("[Gabine de Tiro]\n{FFFFFF}Pressione 'F' pra usa-la.", COLOR_DARKBLUE, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7);
	}


	////////////////////////////////////////////////////////////////////
	
 	// Textdraws
	gServerTextdraws[0] = TextDrawCreate(547.000000, 23.000000, "12:00 PM");
	TextDrawBackgroundColor(gServerTextdraws[0], 255);
	TextDrawFont(gServerTextdraws[0], 1);
	TextDrawLetterSize(gServerTextdraws[0], 0.360000, 1.499999);
	TextDrawColor(gServerTextdraws[0], -1);
	TextDrawSetOutline(gServerTextdraws[0], 1);
	TextDrawSetProportional(gServerTextdraws[0], 1);
	TextDrawSetSelectable(gServerTextdraws[0], 0);

	TextDrawBackgroundColor(gServerTextdraws[1], 255);
	TextDrawFont(gServerTextdraws[1], 1);
	TextDrawLetterSize(gServerTextdraws[1], 0.260000, 1.200000);
	TextDrawColor(gServerTextdraws[1], -1);
	TextDrawSetOutline(gServerTextdraws[1], 1);
	TextDrawSetProportional(gServerTextdraws[1], 1);
	TextDrawSetSelectable(gServerTextdraws[1], 0);

    gServerTextdraws[2] = TextDrawCreate(11.000000, 430.000000, "~r~Voce esta ferido!~w~ Aguarde uma unidade de Resgate chegar.");
	TextDrawBackgroundColor(gServerTextdraws[2], 255);
	TextDrawFont(gServerTextdraws[2], 1);
	TextDrawLetterSize(gServerTextdraws[2], 0.300000, 1.100000);
	TextDrawColor(gServerTextdraws[2], -1);
	TextDrawSetOutline(gServerTextdraws[2], 1);
	TextDrawSetProportional(gServerTextdraws[2], 1);
	TextDrawSetSelectable(gServerTextdraws[2], 0);

    gServerTextdraws[3] = TextDrawCreate(237.000000, 409.000000, "~r~GMX:~w~ 00:00");
	TextDrawBackgroundColor(gServerTextdraws[3], 255);
	TextDrawFont(gServerTextdraws[3], 1);
	TextDrawLetterSize(gServerTextdraws[3], 0.480000, 1.300000);
	TextDrawColor(gServerTextdraws[3], -1);
	TextDrawSetOutline(gServerTextdraws[3], 1);
	TextDrawSetProportional(gServerTextdraws[3], 1);
	TextDrawSetSelectable(gServerTextdraws[3], 0);
	
	// Textdraws Login
		
		TDIntro[0] = TextDrawCreate(198.875000, 98.666793, "~r~Max City ~w~Roleplay");
        TextDrawLetterSize(TDIntro[0], 0.613124, 2.731662);
        TextDrawAlignment(TDIntro[0], 1);
        TextDrawColor(TDIntro[0], 0x00B9FF66);
        TextDrawSetShadow(TDIntro[0], 0);
        TextDrawSetOutline(TDIntro[0], 1);
        TextDrawBackgroundColor(TDIntro[0], 0x00B9FF66);
        TextDrawFont(TDIntro[0], 3);
        TextDrawSetProportional(TDIntro[0], 1);

        TDIntro[1] = TextDrawCreate(20.000000, 350.000000, "Bem Vindos!");
		TextDrawBackgroundColor(TDIntro[1], 255);
    	TextDrawFont(TDIntro[1], 2);
    	TextDrawLetterSize(TDIntro[1], 0.340000, 1.400000);
    	TextDrawColor(TDIntro[1], -1);
    	TextDrawSetOutline(TDIntro[1], 1);
    	TextDrawSetProportional(TDIntro[1], 1);


    for (new i = 0; i < MAX_PLAYERS; i ++) {
	    arrVirtualWorlds[i] = i + 2000;
	}

	for (new i = 0; i < 24; i ++) {
	    SetDynamicObjectMaterial(PrisonData[prisonCells][i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	    GetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2]);
	}
    for (new i = 0; i < 24; i ++)
	{
	    PrisonData[prisonCellOpened][i] = true;
		SetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2]);
	}
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	SetNameTagDrawDistance(10.0);
	ShowPlayerMarkers(0);

	UpdateTime();

	SetTimer("PlayerCheck", 1000, true);
	SetTimer("FuelUpdate", 50000, true);
	SetTimer("RefuelCheck", 500, true);
	SetTimer("MinuteCheck", 60000, true);
	SetTimer("WeatherRotator", 2400000, true);
	return 1;
}


forward WeatherRotator();
public WeatherRotator()
{
	new index = random(sizeof(g_aWeatherRotations));

	SetWeather(g_aWeatherRotations[index]);
}

public OnPlayerRequestClass(playerid, classid)
{



    if (IsPlayerNPC(playerid))
	    return 1;

	if (!PlayerData[playerid][pAccount] && !PlayerData[playerid][pKicked])
	{
	    new
	        time[3];

        gettime(time[0], time[1], time[2]);
		SetPlayerTime(playerid, time[0], time[1]);

	    PlayerData[playerid][pAccount] = 1;
	    TogglePlayerSpectating(playerid, 1);

		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetTimerEx("AccountCheck", 400, false, "d", playerid); // 400 ms
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{


    StopAudioStreamForPlayer(playerid);

	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);

	if (PlayerData[playerid][pHUD])
	{
	 	TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
		TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
	}
    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
    Streamer_ToggleIdleUpdate(playerid, true);

	PlayerData[playerid][pKilled] = 0;

    if (PlayerData[playerid][pBleeding])
	{
 		PlayerData[playerid][pBleedTime] = 1;
   	}
	if (PlayerData[playerid][pJailTime] > 0)
	{
	    if (PlayerData[playerid][pPrisoned])
	    {
	        SetPlayerInPrison(playerid);
	    }
	    else
	    {
		    SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);// SETAR O JOGARDO NA CADEIA
		    SetPlayerInterior(playerid, 3); // interior que esta a policia civil CADEIA

		    SetPlayerVirtualWorld(playerid, (playerid + 100));
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetCameraBehindPlayer(playerid);
		}
		ResetWeapons(playerid);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][70]);
	    SendServerMessage(playerid, "Você tem %d segundos de tempo restante de prisao.", PlayerData[playerid][pJailTime]);
	}
	else if (PlayerData[playerid][pHospital] != -1)
	{
	    PlayerData[playerid][pHospitalTime] = 0;

	    PlayerData[playerid][pHunger] = 50;
	    PlayerData[playerid][pThirst] = 50;

		SetPlayerInterior(playerid, 0);
  		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pHospital] + 5000);
	
		SetPlayerPos(playerid, 1175.9951, -1331.0658, 2424.1016);
		SetPlayerFacingAngle(playerid, 82.0000);

		SetPlayerCameraPos(playerid, 1171.1407,-1332.6207,2423.0461);
		SetPlayerCameraLookAt(playerid, 1171.1407,-1332.6207,2423.0461);

        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recuperando... 180", 180, 3); //Mudar Aqui
		TogglePlayerControllable(playerid, 0);
		
	}
	else if (!PlayerData[playerid][pCreated])
	{
    	TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 216.8005, -99.8691, 1005.2578);
    	SetPlayerFacingAngle(playerid, 90.0000);

  		SetPlayerInterior(playerid, 15);
		SelectTextDraw(playerid, -1);

		for (new i = 23; i < 34; i ++) {
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	else
	{
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		SetCameraBehindPlayer(playerid);
		SetAccessories(playerid);

        if (PlayerData[playerid][pWorld] == PRISON_WORLD)
		{
		    SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		}
		else
		{
		    if(PlayerData[playerid][pSpawnPoint] == 3 && PlayerData[playerid][pInjured] == 0)
			{
				SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			}
		}
		if (PlayerData[playerid][pInjured])
		{
		    ShowHungerTextdraw(playerid, 0);
		    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);

            PlayerData[playerid][pMorteTime] = gettime() + 120;
			TextDrawShowForPlayer(playerid, gServerTextdraws[2]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Você Devera esperar o resgate chegar.");

			ApplyAnimation(playerid, "CRACK", "null", 4.0, 0, 0, 0, 1, 0, 1);
			ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
			
			for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(i, playerid, true);

            new holder[400];
			new string[400];
			if(sInfo[playerid][Misc] > 0)
			{
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][Head] > 0)
			{
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][Chest] > 0)
			{
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][Crotch] > 0)
			{
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][LArm] > 0)
			{
			    strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][RArm] > 0)
			{
       			strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][LLeg] > 0)
			{
			   	strcat(holder, string, sizeof(holder));
			}
			if(sInfo[playerid][RLeg] > 0)
			{
			    strcat(holder, string, sizeof(holder));
   			}
			deathlabel[playerid] = Create3DTextLabel(holder, -1, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], 10.0, 0, 0);
		}
		else
		{
			SetWeapons(playerid);
			ShowHungerTextdraw(playerid, 1);

			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (!SQL_IsLogged(playerid) || (PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pKilled] > 0 || PlayerData[playerid][pHospital] != -1)) //Colocar
	    return 0;

	if (PlayerData[playerid][pMuted] && strfind(cmdtext, "/desmutar", true) != 0)
 	{
	    SendErrorMessage(playerid, "Você foi silenciado pelo sistema.");
	    return 0;
	}
	if (PlayerData[playerid][pCommandCount] < 6)
	{
	    PlayerData[playerid][pCommandCount]++;

	    if (PlayerData[playerid][pCommandCount] == 6) {
	        PlayerData[playerid][pCommandCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "Você foi silenciado por spam (5 seconds).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s foi silenciado por spam.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	return 1;
}


public OnPlayerText(playerid, text[])
{
	if ((!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter]) || PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pHospital] != -1)
	    return 0;

	if (PlayerData[playerid][pMuted])
	{
	    SendErrorMessage(playerid, "Você está silenciado pelo sistema.");
	    return 0;
	}
	if (PlayerData[playerid][pSpamCount] < 5)
	{
	    PlayerData[playerid][pSpamCount]++;

	    if (PlayerData[playerid][pSpamCount] == 5) {
	        PlayerData[playerid][pSpamCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "Você foi silenciado por spam (5 seconds).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s foi silenciado por spam.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	if (PlayerData[playerid][pNewsGuest] != INVALID_PLAYER_ID && GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_PCESP && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	  		SendClientMessageEx(i, COLOR_LIGHTGREEN, "[NEWS] Visitante %s: %s", ReturnName(playerid, 0), text);
		}
	   	return 0;
   	}
	else
	{
		new
			targetid = PlayerData[playerid][pCallLine];

        if (IsPlayerInAnyVehicle(playerid) && IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown])
			SendVehicleMessage(GetPlayerVehicleID(playerid), 0xFFFFFFFF, "[Dentro do Carro] %s diz: %s", ReturnName(playerid, 0), text);

		else
		{
		    if (!IsPlayerOnPhone(playerid))
				SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s diz: %s", ReturnName(playerid, 0), text);

			else SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(Telefone) %s diz: %s", ReturnName(playerid, 0), text);

		}
		switch (PlayerData[playerid][pEmergency])
		{
			case 1:
			{
				if (!strcmp(text, "Policia", true))
				{
				    PlayerData[playerid][pEmergency] = 2;
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[190]:{FFFFFF} Você foi transferido para a policia. Por favor, descreva o crime.");
				}
				else if (!strcmp(text, "Bombeiros", true))
				{
				    PlayerData[playerid][pEmergency] = 3;
				    SendClientMessage(playerid, COLOR_HOSPITAL, "[192]:{FFFFFF} Você foi tranferido para os bombeiros. Por favor, descreva a emergencia.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "[190]:{FFFFFF} Desculpe, eu não entendo. Você precisa \"Policia\" ou \"Bombeiros\"?");
			}
			case 2:
			{
        		SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "|__________RADIO POLICIAL__________|");
   				SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "Solicitante: %s Telefone:%d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
   				SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "Endereço: %s", GetPlayerLocation(playerid));
        		SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "Informação do QRU: %s", text);
        		
        		SendFactionMessageEx(FACTION_JUDICIAL, COLOR_LIGHTBLUE, "|__________RADIO POLICIAL__________|");
   				SendFactionMessageEx(FACTION_JUDICIAL, COLOR_LIGHTBLUE, "Solicitante: %s Telefone:%d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
   				SendFactionMessageEx(FACTION_JUDICIAL, COLOR_LIGHTBLUE, "Endereço: %s", GetPlayerLocation(playerid));
        		SendFactionMessageEx(FACTION_JUDICIAL, COLOR_LIGHTBLUE, "Informação do QRU: %s", text);
        		
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "[190]:{FFFFFF} Viaturas ja foram acionadas e estão a caminho aguarde.");
				cmd_desligar(playerid, "\1");

			}
			case 3:
			{
			    SendFactionMessageEx(FACTION_MEDICOS, COLOR_HOSPITAL, "|__________RADIO COBOM__________|");
			    SendFactionMessageEx(FACTION_MEDICOS, COLOR_HOSPITAL, "Solicitante: %s Telefone:%d", ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
			    SendFactionMessageEx(FACTION_MEDICOS, COLOR_HOSPITAL, "Endereço: %s", GetPlayerLocation(playerid));
       			SendFactionMessageEx(FACTION_MEDICOS, COLOR_HOSPITAL, "Informação do QRU: %s", text);

			    SendClientMessage(playerid, COLOR_HOSPITAL, "[192]:{FFFFFF} Viaturas ja foram acionadas e estão a caminho aguarde.");
			    cmd_desligar(playerid, "\1");

			}

		}
		switch (PlayerData[playerid][pPlaceAd])
		{
		    case 1:
		    {
			    if (!strcmp(text, "sim", true))
		        {
		            if (GetMoney(playerid) < 500)
				    {
    	                SendClientMessage(playerid, COLOR_CYAN, "[Telefonista]:{FFFFFF} Você não tem o dinheiro para fazer propaganda.");
					    cmd_desligar(playerid, "\1");
					}
					else
					{
						PlayerData[playerid][pPlaceAd] = 2;
						SendClientMessage(playerid, COLOR_CYAN, "[Telefonista]:{FFFFFF} Especifica o conteúdo do seu anúncio.");
					}
				}
			}
			case 2:
			{
			    if (GetMoney(playerid) < 500)
			    {
                    SendClientMessage(playerid, COLOR_CYAN, "[Telefonista]:{FFFFFF} Você não tem o dinheiro para fazer propaganda.");
				    cmd_desligar(playerid, "\1");
				}
				else
				{
				    GiveMoney(playerid, -500);
				    SetTimerEx("Advertise", 3000, false, "d", playerid);

                    PlayerData[playerid][pAdTime] = 120;
				    strpack(PlayerData[playerid][pAdvertise], text, 128 char);

        	        SendClientMessage(playerid, COLOR_CYAN, "[Telefonista]:{FFFFFF} Seu anúncio será publicado em breve.");
				    cmd_desligar(playerid, "\1");
				}
			}
		}
		if (targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
			SendClientMessageEx(targetid, COLOR_YELLOW, "(Telefone) %s diz: %s", ReturnName(playerid, 0), text);
		}
	}
	return 0;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerData[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerData[playerid][pEditGraffiti]);
		}
	    else if (PlayerData[playerid][pEditRack] != -1 && RackData[PlayerData[playerid][pEditRack]][rackExists])
	    {
			RackData[PlayerData[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerData[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerData[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerData[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerData[playerid][pEditRack]);
			Rack_Save(PlayerData[playerid][pEditRack]);
		}
	    else if (PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists])
	    {
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerData[playerid][pEditPump]);
			Pump_Save(PlayerData[playerid][pEditPump]);

			SendServerMessage(playerid, "Você editou a posição da bomba ID: %d.", PlayerData[playerid][pEditPump]);
	    }
	    else if (PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists])
	    {
	        new id = House_Inside(playerid);

	        if (id != -1 && House_IsOwner(playerid, id))
			{
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

				Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
				Furniture_Save(PlayerData[playerid][pEditFurniture]);

				SendServerMessage(playerid, "Você editou a posição do item \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
			}
	    }
	    else if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Você editou a posição do portão ID: %d.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Você editou a posição do portão em movimento ID: %d.", id);
				}
			}
		}
	}
	if (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    if (PlayerData[playerid][pEditFurniture] != -1)
			Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	    if (PlayerData[playerid][pEditPump] != -1)
			Pump_Refresh(PlayerData[playerid][pEditPump]);

        if (PlayerData[playerid][pEditRack] != -1)
			Rack_Refresh(PlayerData[playerid][pEditRack]);

        if (PlayerData[playerid][pEditGraffiti] != -1)
			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);

	    PlayerData[playerid][pEditType] = 0;
	    PlayerData[playerid][pEditGate] = -1;
		PlayerData[playerid][pEditPump] = -1;
		PlayerData[playerid][pGasStation] = -1;
		PlayerData[playerid][pEditFurniture] = -1;
		PlayerData[playerid][pEditGraffiti] = -1;
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(GetPVarInt(playerid, "EditingPolice") == 1)
	{
		if(response)
		{
			DeletePVar(playerid, "EditingPolice");
			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		}
		else
		{
			SetPVarInt(playerid, "EditingPolice", 1);
			SendClientMessage(playerid, COLOR_WHITE, "Pressione SAVE para continuar.");
			EditAttachedObject(playerid, index);
		}
	}
    if(GetPVarInt(playerid, "EditingInventary") == 1)
	{
		if(response)
		{
		    DeletePVar(playerid, "EditingInventary");
			RemovePlayerAttachedObject(playerid, index);
			SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		}
		else
		{
			SetPVarInt(playerid, "EditingInventary", 1);
			SendClientMessage(playerid, COLOR_WHITE, "Pressione SAVE para continuar.");
			EditAttachedObject(playerid, index);
		}
	}
	if (response)
	{
		if (PlayerData[playerid][pEditType] != 0)
 		{
 		    AccessoryData[playerid][PlayerData[playerid][pEditType]-1][0] = fOffsetX;
       		AccessoryData[playerid][PlayerData[playerid][pEditType]-1][1] = fOffsetY;
         	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][2] = fOffsetZ;

          	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][3] = fRotX;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][4] = fRotY;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][5] = fRotZ;

            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);

			switch (PlayerData[playerid][pEditType])
			{
	  			case 1:
	    		{
		            PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pGlasses] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Você confirmou seus óculos.");
				}
				case 2:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pHat] = modelid;

	                if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Você confirmou seu chapéu.");
				}
				case 3:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pBandana] = modelid;

                 	if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Você confirmou sua bandana.");
				}
			}
	    }
	}
	else
	{
	    if (!PlayerData[playerid][pCreated])
		{
  			for (new i = 23; i < 34; i ++) {
			  	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);

			TogglePlayerControllable(playerid, 0);
			RemovePlayerAttachedObject(playerid, PlayerData[playerid][pEditType] - 1);
		}
	}
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if ((extraid >= MODEL_SELECTION_GLASSES && extraid <= MODEL_SELECTION_BANDANAS) && !PlayerData[playerid][pCreated] && !response)
	{
	    for (new i = 23; i < 34; i ++) {
    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetTimerEx("SelectTD", 100, false, "d", playerid);
		return 1;
	}
	if ((extraid == MODEL_SELECTION_INVENTORY && response) && InventoryData[playerid][index][invExists])
	{
	    new
	        name[48],
			id = -1;

		strunpack(name, InventoryData[playerid][index][invItem]);
	    PlayerData[playerid][pInventoryItem] = index;

		switch (PlayerData[playerid][pStorageSelect])
		{
		    case 1:
		    {
		    	if ((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{

		        		House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a \"%s\" no deposito em casa.", ReturnName(playerid, 0), name);
				 		House_ShowItems(playerid, id);


		        	}
		        	else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Deposito", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Guardar:", "Guardar", "Voltar", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 2:
		    {
		    	if ((id = Car_Nearest(playerid)) != -1 && !CarData[id][carLocked])
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{

		        		Car_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a \"%s\" no seu porta-malas.", ReturnName(playerid, 0), name);
				 		Car_ShowTrunk(playerid, id);

		        	}
		        	else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Porta Malas", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Guardar:", "Guardar", "Voltar", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 3:
		    {
				return SendErrorMessage(playerid, "Função desativada");
			}
			default:
			{
		    	format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

		    	if (Garbage_Nearest(playerid) != -1) {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Usar Item\nDar Item\nJogar fora", "Selecionar", "Cancelar");
				}
				else {
				    Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Usar Item\nDar Item\nDrop Item", "Selecionar", "Cancelar");
				}
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_GLASSES))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pGlasses] = 0;

			RemovePlayerAttachedObject(playerid, 0);
			SendServerMessage(playerid, "Você removeu seus óculos.");
	    }
	    else
	    {
	        PlayerData[playerid][pEditType] = 1;
	        TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
			EditAttachedObject(playerid, 0);
		}
	}
    if ((response) && (extraid == MODEL_SELECTION_HATS))
	{
	    if (modelid == 19300)
	    {
			for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pHat] = 0;

			RemovePlayerAttachedObject(playerid, 1);
			SendServerMessage(playerid, "Você removeu seu chapéu.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 2;
		    TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
			EditAttachedObject(playerid, 1);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BANDANAS))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pBandana] = 0;

			RemovePlayerAttachedObject(playerid, 2);
			SendServerMessage(playerid, "Você removeu sua bandana.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 3;
            TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
			EditAttachedObject(playerid, 2);
		}
	}

	if ((response) && (extraid == MODEL_SELECTION_SKIN))
	{
	    PlayerData[playerid][pSkin] = modelid;

		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
		if (PlayerData[playerid][pAdmin] < 1)
		{
		    TogglePlayerSpectating(playerid, 0);
			//KillPlayerTimers(playerid);
			SetTimerEx("FadeIn", 400, 0, "id", playerid, 15);
			SetTimerEx("FadeOut", 4000, 0, "id", playerid, 15);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_CLOTHES))
	{
	    new
			bizid = -1,
			price;

	    if ((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
	        return 0;

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Este negócio está fora de estoque.");

	    price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType] - 1];

	    if (GetMoney(playerid) < price)
	        return SendErrorMessage(playerid, "Você tem fundos insuficientes para a compra.");

		GiveMoney(playerid, -price);

		BusinessData[bizid][bizProducts]--;
		BusinessData[bizid][bizVault] += Tax_Percent(price);

		Business_Save(bizid);
		Tax_AddPercent(price);

	    switch (PlayerData[playerid][pClothesType])
	    {
	        case 1:
	        {
	            PlayerData[playerid][pSkin] = modelid;
	            SetPlayerSkin(playerid, modelid);
	            PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][84], modelid);
                PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][84]);

	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu algumas roupas.", ReturnName(playerid, 0), FormatNumber(price));
			}
			case 2:
			{
			    PlayerData[playerid][pEditType] = 1;
                PlayerData[playerid][pGlasses] = modelid;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu alguns copos.", ReturnName(playerid, 0), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 0);

                SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
				EditAttachedObject(playerid, 0);
			}
			case 3:
			{
			    PlayerData[playerid][pHat] = modelid;
			    PlayerData[playerid][pEditType] = 2;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um chapéu.", ReturnName(playerid, 0), FormatNumber(price));
                RemovePlayerAttachedObject(playerid, 1);

				SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
				EditAttachedObject(playerid, 1);
			}
			case 4:
			{
			    PlayerData[playerid][pBandana] = modelid;
			    PlayerData[playerid][pEditType] = 3;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma bandana.", ReturnName(playerid, 0), FormatNumber(price));
			    RemovePlayerAttachedObject(playerid, 2);

			    SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
				EditAttachedObject(playerid, 2);
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
 	    {
	        if (!DealershipCars[id][index][vehModel])
	        {
	            Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Add Veiculo", "Add por Nome\nAdd por Visão", "Selecionar", "Cancelar");
			}
			else
			{
			    PlayerData[playerid][pDealerCar] = index;
			    Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Concessionaria Veiculo", "Colocar Preco (%s)\nRemover Veiculo", "Selecionar", "Cancelar", FormatNumber(DealershipCars[id][index][vehPrice]));
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER_ADD))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == modelid)
	            	return SendErrorMessage(playerid, "Ja esta vendido.");
			}
			PlayerData[playerid][pDealerCar] = modelid;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Colocar Preco", "Por favor insira um preço para '%s':", "Colocar", "Cancelar", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BUY_CAR))
	{
	    new id = Business_Inside(playerid);

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (!DealershipCars[id][index][vehModel])
		        return SendErrorMessage(playerid, "Não existe um modelo no slot selecionado.");

		    if (GetMoney(playerid) < DealershipCars[id][index][vehPrice])
	    	    return SendErrorMessage(playerid, "Você não pode pagar este veículo (%s).", FormatNumber(DealershipCars[id][index][vehPrice]));

			PlayerData[playerid][pDealerCar] = index;
			Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Confirmar Compra", "Realmente quer comprar este '%s'?\n\nNote: O veiculo custa %s nesta concessionária.", "Sim", "Nao", ReturnVehicleModelName(modelid), FormatNumber(DealershipCars[id][index][vehPrice]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_FURNITURE))
	{
        new
			id = Business_Inside(playerid),
			type = PlayerData[playerid][pFurnitureType],
			price;

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
	    {
	        price = BusinessData[id][bizPrices][type];

	        if (GetMoney(playerid) < price)
	            return SendErrorMessage(playerid, "Não tem dinheiro suficiente.");

			if (BusinessData[id][bizProducts] < 1)
		    	return SendErrorMessage(playerid, "Não há nenhum produto neste negócio.");

			new item = Inventory_Add(playerid, GetFurnitureNameByModel(modelid), modelid);

            if (item == -1)
   	        	return SendErrorMessage(playerid, "Você não tem espaço de inventário.");

			GiveMoney(playerid, -price);
			SendServerMessage(playerid, "Você comprou um \"%s\" por %s.", GetFurnitureNameByModel(modelid), FormatNumber(price));

			BusinessData[id][bizProducts]--;
			BusinessData[id][bizVault] += Tax_Percent(price);

			Business_Save(id);
			Tax_AddPercent(price);
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_COLOR))
	{
	    new vehicleid = GetNearestVehicle(playerid);

        if (vehicleid == INVALID_VEHICLE_ID)
		    return SendErrorMessage(playerid, "Não está perto de qualquer veículo.");

		if (!Inventory_HasItem(playerid, "Spray"))
		    return SendErrorMessage(playerid, "Você não tem uma lata de sprays.");

	    ApplyAnimation(playerid, "GRAFFITI", "null", 4.0, 0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Pintando Veiculo...", 3000, 3);
		SetTimerEx("ResprayCar", 3000, false, "ddd", playerid, vehicleid, modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_SKINS))
	{
	    Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Editar Skin", "Add por Model ID\nAdd por Visão\nLimpar Slot", "Selecionar", "Cancelar");
	    PlayerData[playerid][pSelectedSlot] = index;
	}
	if ((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
	{
	    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendServerMessage(playerid, "Você alterou o ID da skin no slot %d para %d.", PlayerData[playerid][pSelectedSlot], modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
	{
	    new factionid = PlayerData[playerid][pFaction];

		if (factionid == -1 || !IsNearFactionLocker(playerid))
	    	return 0;

		if (modelid == 19300)
		    return SendErrorMessage(playerid, "Nada neste slot.");

  		SetPlayerSkin(playerid, modelid);
  		PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][84], modelid);
    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][84]);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mudou seu uniforme", ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_WHEELS))
	{
        new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    	return 0;

	    AddComponent(vehicleid, modelid);
	    SendServerMessage(playerid, "Você adcionou \"%s\" no veiculo.", GetWheelName(modelid));
	}

	return 1;
}

forward ResprayCar(playerid, vehicleid, color);
public ResprayCar(playerid, vehicleid, color)
{
	if (!PlayerData[playerid][pLogged] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	Inventory_Remove(playerid, "Spray");
	ClearAnimations(playerid);

	SetVehicleColor(vehicleid, color, color);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s usou uma lata de tinta spray para pintar %s.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW)
	{
		if (!Dialog_Opened(playerid) && PlayerData[playerid][pDisplayStats] > 0)
	    {
	        if (PlayerData[playerid][pDisplayStats] == 2) {
	        	for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		    else for (new i = 40; i < 50; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			CancelSelectTextDraw(playerid);
			PlayerData[playerid][pDisplayStats] = false;
		}
	}
	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (!Dialog_Opened(playerid))
	{
		if (!PlayerData[playerid][pCharacter])
		{
			if (playertextid == PlayerData[playerid][pTextdraws][2])
				SelectCharacter(playerid, 1);

			else if (playertextid == PlayerData[playerid][pTextdraws][3])
				SelectCharacter(playerid, 2);

			else if (playertextid == PlayerData[playerid][pTextdraws][4])
				SelectCharacter(playerid, 3);
		}
		else
		{
		    if (playertextid == PlayerData[playerid][pTextdraws][78])
				SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);

			else if (playertextid == PlayerData[playerid][pTextdraws][79]) {
			    Dialog_Show(playerid, DeleteChar, DIALOG_STYLE_MSGBOX, "Deletar Personagem", "Aviso: Tem certeza de que deseja excluir o personagem \"%s\"?\n\nUma vez excluído não pode ser recuperado.", "Confirmar", "Cancelar", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][80]) {
			    ShowCharacterMenu(playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][19]) {
			    CancelSelectTextDraw(playerid);
			    Dialog_Show(playerid, Gender, DIALOG_STYLE_LIST, "Gênero", "Masculino\nFeminino", "Selecionar", "Cancelar");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][20]) {
			    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Data de nascimento", "Digite sua data de nascimento abaixo (DD/MM/YYYY):", "Selecionar", "Cancelar");
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][21]) {
			    Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origem", "Por favor, indique a origem geográfica do seu personagem abaixo:", "Selecionar", "Cancelar");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][22])
			{
			    if (!strlen(PlayerData[playerid][pBirthdate]))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Server: Você deve especificar uma data de nascimento.");

				else if (!strlen(PlayerData[playerid][pOrigin]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Server: Você deve especificar uma origem.");

				else
				{
				    for (new i = 11; i < 23; i ++) {
						PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
					}
                    switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Selecionar Skin", MODEL_SELECTION_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Selecionar Skin", MODEL_SELECTION_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][26])
			{
			    static
					arrGlasses[] = {19300, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_GLASSES, arrGlasses, sizeof(arrGlasses), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][28])
			{
			    static
					arrHats[] = {19300, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_HATS, arrHats, sizeof(arrHats), -20.0, -90.0, 0.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][30])
			{
			    static
					arrBandanas[] = {19300, 18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_BANDANAS, arrBandanas, sizeof(arrBandanas), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][33])
			{
			    for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
			    for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
			    CancelSelectTextDraw(playerid);
			    TogglePlayerControllable(playerid, 1);

				SetPlayerPos(playerid, 1481.15, -1772.2, 18.7957);
				SetPlayerFacingAngle(playerid, 0.0000);

				SetPlayerInterior(playerid, 0);

				SetCameraBehindPlayer(playerid);
				ShowHungerTextdraw(playerid, 1);

				PlayerData[playerid][pThirst] = 80;
				PlayerData[playerid][pCreated] = 1;
				SQL_SaveCharacter(playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][47])
			{
				new
					string[128];

				CancelSelectTextDraw(playerid);

				format(string, sizeof(string), "%s\n%s\n%s", (!PlayerCharacters[playerid][0][0]) ? ("Slot Vazio") : (PlayerCharacters[playerid][0]), (!PlayerCharacters[playerid][1][0]) ? ("Slot Vazio") : (PlayerCharacters[playerid][1]), (!PlayerCharacters[playerid][2][0]) ? ("Slot Vazio") : (PlayerCharacters[playerid][2])); // MUDAR AQUI
				Dialog_Show(playerid, CharList, DIALOG_STYLE_LIST, "Meu Personagem", string, "Selecionar", "Cancelar");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][48])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;

				SetTimerEx("OpenInventory", 100, false, "d", playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][49])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][55])
			{
			    for (new i = 50; i < 58; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][56])
			{
			    for (new i = 40; i < 58; i ++)
			    {
			        if (i >= 50)
				        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

					else if (i < 50)
					    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			    }
			    PlayerData[playerid][pDisplayStats] = true;
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][57])
			{
			    if (PlayerData[playerid][pCharacterMenu] == PlayerData[playerid][pCharacter])
			        return SendErrorMessage(playerid, "Você esta usando esse personagem, você não pode apagar.");

                Dialog_Show(playerid, DeleteCharacter, DIALOG_STYLE_MSGBOX, "Apagar Personagem", "AVISO: Tem certeza de que deseja excluir o personagem \"%s\"?\n\nUma vez excluído não pode ser recuperado.", "Confirmar", "Cancelar", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
			}
		}

	}
	return 1;
}

forward ForkliftUpdate(playerid, vehid);
public ForkliftUpdate(playerid, vehid)
{
	if (PlayerData[playerid][pJob] != JOB_UNLOADER || GetVehicleModel(vehid) != 530 || !IsPlayerInWarehouse(playerid) || !PlayerData[playerid][pLoading]) {
	    return 0;
	}
	GetVehicleHealth(vehid, CoreVehicles[vehid][vehLoadHealth]);
    PlayerData[playerid][pLoading] = 0;

	CoreVehicles[vehid][vehLoadType] = 7;
	CoreVehicles[vehid][vehCrate] = CreateObject(3798, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

	AttachObjectToVehicle(CoreVehicles[vehid][vehCrate], vehid, 0.0, 1.2, -0.05, 0.0, 0.0, 0.0);
	SetPlayerCheckpoint(playerid, 1306.3438, -45.3100, 1001.0313, 1.5);

	TogglePlayerControllable(playerid, 1);
	SendServerMessage(playerid, "Descarregar os pacotes no CheckPoint.");
	return 1;
}

stock ShowContacts(playerid)
{
	new
	    string[32 * MAX_CONTACTS],
		count = 0;

	string = "Add Contato\n";

	for (new i = 0; i != MAX_CONTACTS; i ++) if (ContactData[playerid][i][contactExists]) {
	    format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

		ListedContacts[playerid][count++] = i;
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "Meus Contatos", string, "Selecionar", "Voltar");
	return 1;
}

stock GetPlayerID(name[], underscore = 1)
{
	foreach (new i : Player) if (!strcmp(ReturnName(i, underscore), name, true)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}
stock HasAttachedObject(playerid, objectid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
		if(PoliceObjects[playerid][i] == objectid)
			return true;
	}
	return false;
}

//Leis
stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}
//Mandato
stock UpdateMandato()
{
    new snoky, File: snokyfile2, coordsstring[256];
	snoky = 0;
 	while (snoky < sizeof(Mandatos))
  	{
		format(coordsstring, sizeof(coordsstring), "%s,%d\n",
		Mandatos[snoky][MContenido],
		Mandatos[snoky][MTipo]);

		if(snoky == 0)	snokyfile2 = fopen("Mandatos.cfg", io_write);
		else			snokyfile2 = fopen("Mandatos.cfg", io_append);

		fwrite(snokyfile2, coordsstring);
		snoky++;
		fclose(snokyfile2);
	}
}
stock LoadMandato()
{
	new arrCoords[2][256], strFromFile2[256];
	new File: file = fopen("Mandatos.cfg", io_read);
	if (file)
	{
	    new snoky = 0;
		while (snoky < sizeof(Mandatos))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			strmid(Mandatos[snoky][MContenido], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			Mandatos[snoky][MTipo] 		= strval(arrCoords[1]);
			snoky++;
		}
	}
	return 1;
}
//
//Prancheta
stock UpdatePranchetas()
{
    new snoky, File: snokyfile2, coordsstring[256];
	snoky = 0;
 	while (snoky < sizeof(Pranchetas))
  	{
		format(coordsstring, sizeof(coordsstring), "%s,%d\n",
		Pranchetas[snoky][PContenido],
		Pranchetas[snoky][PTipo]);

		if(snoky == 0)	snokyfile2 = fopen("Pranchetas.cfg", io_write);
		else			snokyfile2 = fopen("Pranchetas.cfg", io_append);

		fwrite(snokyfile2, coordsstring);
		snoky++;
		fclose(snokyfile2);
	}
}
stock LoadPranchetas()
{
	new arrCoords[2][256], strFromFile2[256];
	new File: file = fopen("Pranchetas.cfg", io_read);
	if (file)
	{
	    new snoky = 0;
		while (snoky < sizeof(Pranchetas))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			strmid(Pranchetas[snoky][PContenido], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			Pranchetas[snoky][PTipo] 		= strval(arrCoords[1]);
			snoky++;
		}
	}
	return 1;
}

//Boletim
stock UpdateBoletim()
{
    new snoky, File: snokyfile2, coordsstring[256];
	snoky = 0;
 	while (snoky < sizeof(Boletim))
  	{
		format(coordsstring, sizeof(coordsstring), "%s,%d\n",
		Boletim[snoky][BContenido],
		Boletim[snoky][BTipo]);

		if(snoky == 0)	snokyfile2 = fopen("Boletim.cfg", io_write);
		else			snokyfile2 = fopen("Boletim.cfg", io_append);

		fwrite(snokyfile2, coordsstring);
		snoky++;
		fclose(snokyfile2);
	}
}
stock LoadBoletim()
{
	new arrCoords[2][256], strFromFile2[256];
	new File: file = fopen("Boletim.cfg", io_read);
	if (file)
	{
	    new snoky = 0;
		while (snoky < sizeof(Boletim))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			strmid(Boletim[snoky][BContenido], arrCoords[0], 0, strlen(arrCoords[0]), 255);
			Boletim[snoky][BTipo] 		= strval(arrCoords[1]);
			snoky++;
		}
	}
	return 1;
}

stock Computador(playerid){ //Copiar desse aqui.
if(IsPlayerConnected(playerid))
{
	if(IsPlayerInRangeOfPoint(playerid, 4.0,86.0746,1778.2198,-23.7572)){return 1;} //Centro de Justiça
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 78.4236,1776.5548,-23.7572)){ return 1; } //Centro de Justiça
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1221.2253,-1709.3461,-39.7341)){ return 1; } //DP
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1225.2462,-1709.4915,-39.7341)){ return 1; } //DP
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1229.4893,-1709.2808,-39.7341)){ return 1; } //DP
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1227.6940,-1709.3849,-39.7341)){ return 1; } //DP
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1223.4485,-1709.5533,-39.7341)){ return 1; } //DP
}
return 0;
}

stock ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
new
	Float: f_playerPos[3];
GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
foreach(Player, i)
{
	if(!BigEar[i])
	{
		if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
		{
			if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
				SendSplitMessage(i, col1, string);
			}
			else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
				SendSplitMessage(i, col2, string);
			}
			else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
				SendSplitMessage(i, col3, string);
			}
			else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
				SendSplitMessage(i, col4, string);
			}
			else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
				SendSplitMessage(i, col5, string);
			}
		}
	}
	else SendClientMessageEx(i, col1, string);
}
return 1;
}
stock SendSplitMessage(playerid, color,final[])
{
    new buffer[EX_SPLITLENGTH+10];
    new len = strlen(final);
    if(len>EX_SPLITLENGTH)
    {
        new times = (len/EX_SPLITLENGTH);
        for(new i = 0; i < times+1; i++)
        {
            strdel(buffer, 0, EX_SPLITLENGTH+5);
            if(len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH)
            {
                strmid(buffer, final, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1));
                if(!i)
                	format(buffer, sizeof(buffer), "%s ...", buffer);
				else
				    format(buffer, sizeof(buffer), "... %s ...", buffer);
            }
            else
            {
                strmid(buffer, final, EX_SPLITLENGTH*i, len);
				format(buffer, sizeof(buffer), "... %s", buffer);
            }
            SendClientMessageEx(playerid, color, buffer);
        }
    }
    else
    {
        SendClientMessageEx(playerid, color, final);
    }
}
stock ProxDetectorS(Float:radi, playerid, targetid)
{
	new Float: fp_playerPos[3];
	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);
	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

stock SairdoHospital(playerid)
{
    //
    SetPlayerPos(playerid, 1180.1870, -1332.1493, 2423.0461);
	SetPlayerFacingAngle(playerid, 0.0000);

	TogglePlayerControllable(playerid, 1);
	SetCameraBehindPlayer(playerid);

	SetPlayerVirtualWorld(playerid, 7100);
	SendServerMessage(playerid, "Você recebeu alta do hospital");

	GameTextForPlayer(playerid, " ", 1, 3);
	ShowHungerTextdraw(playerid, 1);

	PlayerData[playerid][pHospitalInt] = PlayerData[playerid][pHospital];
    PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pHospitalTime] = 0;
	return 1;
}
forward Descongelar(i);
public Descongelar(i)
{
    TogglePlayerControllable(i, true);
	return 1;
}
///////////////////////////////////
forward FicarnoHospital(playerid);
public FicarnoHospital(playerid)
{

	SairdoHospital(playerid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saiu do coma e recebeu alta do hospital.", ReturnName(playerid, 0));

	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	return 0;
}

PlacaCarro(playerid, carid)
{
    static
	    userid;
 	for (new i = 0; i < 100; i ++) {
	    SendClientMessageEx(playerid, -1, "");
	}
	//
    SendServerMessage(playerid, "Veiculo:  - 2%d", carid);
// 	strcat(cmd4, "Modelo: %s \n", ReturnVehicleName(carid));
 	SendServerMessage(playerid, "Multas: %d", CarData[carid][carImpoundPrice]); //
  	SendServerMessage(playerid, "Renavan: 00934%d", PlayerData[userid][pPhone]);
	return 0;
}

// SISTEM MDC - NOVO////////////////////////////////////////////////////////////////////////////////////
Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
	new string[700], string2[700], string3[700], carlic[16], prisoned[16], origin[32], extraid;
	if(response)
	{
		new iPlayerID;
		format(origin, 32, "%.16s", PlayerData[iPlayerID][pOrigin]);
		if (strlen(PlayerData[iPlayerID][pOrigin]) > 16)
			strcat(origin, "...");
		if(sscanf(inputtext, "u", iPlayerID)) return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "Pessoa", "RG (ID do Player)", "Consultar", "Cancelar");
		//if(!PlayerIsOn(iPlayerID)) return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "Sistema Policial MDC - Procurar Nome", "PROCURAR NOME\n\nInsira nome\n\nFormato: Nome_Sobrenome (( ou ID ID ))\n"COL_RED"O jogador não foi encontrado.", "Entrar", "Cancelar");
		if (Inventory_HasItem(iPlayerID, "Carta de Conducao")) carlic = "Habilitado";
 		else carlic = "Não Habilitado";
 		if (PlayerData[iPlayerID][pPrisoned] == 1) prisoned = "Ja tem passagem";
 		else prisoned = "Nada consta";
		format(string, sizeof(string), "> Tablet MARE\n\nNome: %s\nNascido em: %s - Sexo: %s\nPassagem Pela Policia: %s\nRG: 430934%d\nCNH: %s\nNaturalidade: %s\n\n\n", GetNameEx(iPlayerID), PlayerData[iPlayerID][pBirthdate], (PlayerData[iPlayerID][pGender] == 2) ? ("F") : ("M"), prisoned, PlayerData[extraid][pID], carlic, origin);
		format(string2, sizeof(string2), "> Tablet MARE\n\nEndereço da Casa: %s\nNome da Empresa: %s\n\n\n> Mensagens\n\nNão há mensagens.", HouseData[playerid][houseAddress], BusinessData[playerid][bizName]);
		format(string3, sizeof(string3), "%s%s", string, string2);
  		Dialog_Show(playerid, MDCResult, DIALOG_STYLE_MSGBOX, "Consulta", string3, "Fechar", "");
	}
	return 1;
}
Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP && GetFactionType(playerid) || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		    return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Ver Acusacao", "Por favor digite o nome ou ID do player:", "Enviar", "Voltar");

		if (IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
	        ViewCharges(playerid, ReturnName(strval(inputtext)));
		}
	    else if (!IsNumeric(inputtext)) {
	        ViewCharges(playerid, inputtext);
		}
		else {
		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Error: Invalid user specified.\n\nPlease enter the name or ID of the player:", "Submit", "Back");
		}
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}

Dialog:LSPDClothes(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(HasAttachedObject(playerid, 18636)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem um boné policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 18636, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 18636;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 1:
			{
				if(HasAttachedObject(playerid, 19099)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem Chapeu policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19099, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19099;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 2:
			{
				if(HasAttachedObject(playerid, 19100)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem Chapeu policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19100, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19100;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 3:
			{
				if(HasAttachedObject(playerid, 19161)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem bone policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19161, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19161;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 4:
			{
				if(HasAttachedObject(playerid, 19162)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem bone policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19162, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19162;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 5:
			{
				if(HasAttachedObject(playerid, 19521)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem Keper Policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19521, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19521;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 6:
			{
				if(HasAttachedObject(playerid, 19200)) return SendClientMessage(playerid, COLOR_GREY, "Voce já tem capacete policial colocado.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19200, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,  0xFFFFFFFF);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19200;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 7:
			{
				if(HasAttachedObject(playerid, 18637)) return SendClientMessage(playerid, COLOR_GREY, "Voce ja esta com Escudo.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 18637, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 18637;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 8:
			{
				if(HasAttachedObject(playerid, 19142)) return SendClientMessage(playerid, COLOR_GREY, "Voce ja esta com o colete.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19142, 1,0.08,0.04,0.00,0.0,0.0,-7.4);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19142;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 9:
			{
                if(HasAttachedObject(playerid, 19773)) return SendClientMessage(playerid, COLOR_GREY, "Você já possui este coldre.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19773, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19773;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 10:
			{
                if(HasAttachedObject(playerid, 19942)) return SendClientMessage(playerid, COLOR_GREY, "Você já possui um Radio PX.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19942, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19773;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 11:
			{
                if(HasAttachedObject(playerid, 18641)) return SendClientMessage(playerid, COLOR_GREY, "Você já possui uma lanterna.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 18641, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19773;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 12:
			{
                if(HasAttachedObject(playerid, 18642)) return SendClientMessage(playerid, COLOR_GREY, "Você já possui uma taser.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 18642, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19773;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 13:
			{
                if(HasAttachedObject(playerid, 19347)) return SendClientMessage(playerid, COLOR_GREY, "Você já possui um Distintivo.");
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(!IsPlayerAttachedObjectSlotUsed(playerid, i))
					{
						SetPlayerAttachedObject(playerid, i, 19347, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999);
						EditAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = 19773;
						SetPVarInt(playerid, "EditingPolice", 1);
						return 1;
					}
				}
			}
			case 14:
			{
				for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, i)) // && PlayerToys[playerid][i][ptToyOn] == 0
					{
						RemovePlayerAttachedObject(playerid, i);
						PoliceObjects[playerid][i] = INVALID_OBJECT_ID;
					}
				}
			}
		}
	}
	return 1;
}

Dialog:GraffitiColor(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Ja estao pintando este ponto.");

	    switch (listitem)
	    {
	        case 0:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFFFF;

	        case 1:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFF0000;

	        case 2:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFF00;

	        case 3:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CC33;

	        case 4:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CCFF;

	        case 5:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFA500;

	        case 6:
	            PlayerData[playerid][pGraffitiColor] = 0xFF1394BF;
	    }
	    Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Texto", "Insira o texto abaixo\n\nNote: Sua entrada de texto não pode exceder mais de 64 characters.", "Ok", "Cancelar");
	}
	return 1;
}

Dialog:GraffitiText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Texto", "Insira o texto abaixo\n\nNote: Sua entrada de texto não pode exceder mais de 64 characters.", "Ok", "Cancelar");

		if (strlen(inputtext) > 128)
		    return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Graffiti Texto", "Insira o texto abaixo\n\nNote: Sua entrada de texto não pode exceder mais de 64 characters.", "Ok", "Cancelar");

        if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Ja estao pintando este ponto.");

        PlayerData[playerid][pGraffiti] = id;
        PlayerData[playerid][pGraffitiTime] = 15;

		strpack(PlayerData[playerid][pGraffitiText], inputtext, 128 char);
		ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);

		ShowPlayerFooter(playerid, "Voce agora esta pintando sua ~g~graffiti.");
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Pintando...~w~ por favor, espere!", 15000, 3);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma lata de tinta spray e pinta a parede.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
	static
	    string[64];

	if (response)
	{
	    new id = NearestItems[playerid][listitem];

		if (id != -1 && DroppedItems[id][droppedModel])
		{
		    if (DroppedItems[id][droppedWeapon] != 0)
			{
  				if (PlayerData[playerid][pPlayingHours] < 2)
					return SendErrorMessage(playerid, "Você deve ter pelo menos 2 horas jogadas.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				//SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
			}
			else if (PickupItem(playerid, id))
			{
				format(string, sizeof(string), "~g~%s~w~ foi adicionado ao inventário!", DroppedItems[id][droppedItem]);
 				ShowPlayerFooter(playerid, string);
				//SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
			}
			else
				SendErrorMessage(playerid, "Você não tem qualquer espaço em seu inventário.");
		}
		else SendErrorMessage(playerid, "Você pegou este objeto.");
	}
	return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Job_NearestPoint(playerid);

	    if (id == -1)
	        return 0;

		PlayerData[playerid][pLoadType] = listitem + 1;
		PlayerData[playerid][pLoadCrate] = 1;
		PlayerData[playerid][pLoading] = 1;

		SendServerMessage(playerid, "Você escolheu transporte de \"%s\". Coloque as caixas em um caminhão para começar.", inputtext);
		SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

        SetPlayerAttachedObject(playerid, 1, 3014, 1, 0.038192, 0.371544, 0.055191, 0.0, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000); // CRAUS
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		ShowPlayerFooter(playerid, "Pressione ~y~'N'~w~ para carregar a caixa.");
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Gate_Nearest(playerid);

	    if (id == -1)
	        return 0;

        if (isnull(inputtext))
        	return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Digite a Senha", "Digite a senha para esse portão abaixo:", "Ok", "Cancelar");

		if (strcmp(inputtext, GateData[id][gatePass]) != 0)
  			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Digite a Senha", "Error: A senha especificada esta errada.\n\nDigite a senha para esse portão abaixo:", "Ok", "Cancelar");

		Gate_Operate(id);
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Editar Cargo", "Cargo: %s (%d)\n\nPor favor insira um novo nome para este Cargo abaixo:", "Ok", "Voltar", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Editar Cargo", "Cargo: %s (%d)\n\nPor favor insira um novo nome para este Cargo abaixo:", "Ok", "Voltar", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Editar Cargo", "Error: O Cargo não pode exceder 32 caracteres.\n\nCargo: %s (%d)\n\nPor favor insira um novo nome para este Cargo abaixo:", "Ok", "Voltar", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "Você definiu o nome de Cargo %d para \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}
Dialog:PETITION_DIALOG(playerid, response, listitem, inputtext[])
{
if(response == 1)
    {
		new szMessage[256];
        SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "* %s aceita um pedido.", ReturnName(playerid, 0));
  		if(Petition_ID[playerid] == 15)
   		{
			format(szMessage, sizeof(szMessage), "* %s aceitou seus serviços", ReturnName(playerid, 0));
			Message(LiveOffer[playerid], 0x00FFFFFF, szMessage);
			format(szMessage, sizeof(szMessage), "* Você aceitou o serviço de %s", ReturnName(LiveOffer[playerid], 0));
			Message(playerid, 0x00FFFFFF, szMessage);
			Message(playerid, COLOR_YELLOW, "* Utilize (/dadvogado) para despedir-lo.");
			Defensor[playerid] = LiveOffer[playerid];
  			Defendiendo[LiveOffer[playerid]] = playerid;
			Petition_ID[playerid] = 0;
	}
    else
    {
        SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "* %s recusa um pedido.", ReturnName(playerid, 0));
        if(Petition_ID[playerid] == 15)
       	{
			format(szMessage, sizeof(szMessage), "* %s recusou teus serviços", ReturnName(playerid, 0));
			Message(LiveOffer[playerid], 0x00FFFFFF, szMessage);
			format(szMessage, sizeof(szMessage), "* Você recusou o serviço de %s", ReturnName(LiveOffer[playerid], 0));
			Message(playerid, 0x00FFFFFF, szMessage);
			Defensor[playerid] = 999;
  			Defendiendo[LiveOffer[playerid]] = 999;
			Petition_ID[playerid] = 0;
		 }
	   }
    }
}
Dialog:HELP_MENU(playerid, response, listitem, inputtext[])
{
if(response)
	{
		switch(listitem)
		{

			case 0:
			{
                new cmd1[1500];
                strcat(cmd1, "{FCFF00}CONTA:{FFFFFF} /mudarsenha, /ultimoacesso, /propriedades\n");
                strcat(cmd1, "{FCFF00}CONTA:{FFFFFF} /renunciar, /advertencia");
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Conta", cmd1, "Aceitar", "");
			 }
			case 1:
			{
                new cmd1[2500];
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /acessorios, /me, /do, /(g)ritar, /(s)usurrar, /(o)oc, /inv, /trancarp\n");
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /aceitar, /vender, /pintar, /beber, /banco, /cozinhar, /colete, /quebraralgema.\n");
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /id, /ligar, /desligar, /sms, /drop, /caixas, /usargalao, /pagar, /gps, /abrir, /resetvw\n");
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /boombox, /canal, /tcmds, /desativarcp, /usardroga, /telefone, /maocoldre, /ativarbomba.\n");
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /stopanim, /procurar, /interruptor, /armac, /mostrarreservista, /solicitarrg, /entregarcontrato, /mcs (Mostrar Cartao).\n");
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /cumprimentar, /ml (mostrar licença), /revistar, /toghud, /entregararma, /mercadonegro\n");
                strcat(cmd1, "{FCFF00}GERAL:{FFFFFF} /desamarrar, /amarrar, /vendar, /solicitarcartao, /mrg(Mostrar RG)\n");
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Geral", cmd1, "Aceitar", "");
			}
			case 2:
			{
                new cmd1[1500];
                strcat(cmd1, "{FCFF00}VEÍCULO:{FFFFFF} /estacionar, /trancar, /abandonar, /abastecer, /unmod, /janelas, /bateria, /ligacaodireta, /sh(sair do H), /rcarro, /rcar.\n");
                strcat(cmd1, "{FCFF00}VEÍCULO:{FFFFFF} /portamalas, /vlista, /motor, /luzes, /portamalas, /portamalasver, /capo, /rebocar, /bracojanela, /abrirjanelas, /oficina, /quebrartrava.\n");
                strcat(cmd1, "{FCFF00}VEICULO:{FFFFFF} /vlocalizar, /milha, /neon\n");
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Veiculo", cmd1, "Aceitar", "");
				}
			case 3:
			{
                new cmd1[1500];
                strcat(cmd1, "{FCFF00}CASA:{FFFFFF} /comprar, /abandonar, /fechar, /armazenamento, /moveis, /comprarrack, /destruirrack.\n");
                strcat(cmd1, "{FCFF00}CASA:{FFFFFF} /campanhia, /interruptor, /cozinhar");
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Casa", cmd1, "Aceitar", "");
				}
			case 4:
			{
                new cmd1[1500];
                strcat(cmd1, "{FCFF00}EMPRESA:{FFFFFF} /comprar, /abandonar, /fechar, /cofre, /produtos\n\n");
                strcat(cmd1, "{FCFF00}EMPRESA:{FFFFFF} /binfo, /bnome, /bmensagem, /bprodutos");
                Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Negocio", cmd1, "Aceitar", "");
				}
			case 5:
			{
                new cmd4[1900];
                if (PlayerData[playerid][pFaction] != -1)
				{
				if (GetFactionType(playerid) == FACTION_PCESP) {
 				strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /membros, /(f)ac, /sairfaccao, /armario, /convidar, /despedir, /promover, /mandatocivil, /fspray, /rsolicitacao\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /tazer, /algemar, /desalgemar, /arrastar, /deter, /mdc, /bafometro, /apreender, /radio /d.\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /multar, /prego, /bloqueio, /idg (impressão digital), /confiscar, /rpa, /setarfuncional, /puxarplaca.\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /rmandatocivil, /sirene, /equipar, /rastrearnumero, /transferirp, /usaritem, /entregarrg, /pegarcorpo.\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /confiscar, /derrubarporta, /balasborracha /reforco, /destruirplanta, /prefixo, /siren, /dsiren, /ptrab.\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /rescudo, /escudo, /uniforme, /pericia, /recolhercadaver. /deixarcorpo, /consertarviatura.\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /escreverpran, /mostrarfuncional(mf) /entregarmandatocivil /rasteira, /apoiogrpae, /coldreoff, /coldreon.\n");
 		    	strcat(cmd4, "{FCFF00}CIVIL:{FFFFFF} /controle, /verpresos, /fcontrole, /penapaga, /registrar, /portaop, /portao, /cela1, /cela2, /cela3");
 		    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Facção", cmd4, "Aceitar", "");
				}
				else if (GetFactionType(playerid) == FACTION_GOV) {
				strcat(cmd4, "{FCFF00}GOVERNO:{FFFFFF} /membros, /(f)ac, /sairfaccao, /armario, /crlv, /docempresa, /convidar. /escritura\n");
		    	strcat(cmd4, "{FCFF00}GOVERNO:{FFFFFF} /radio, /despedir, /promover, /fspray, /identificar, /fretirar, /entregarrg, /ingresso, /fdepositar.");
		    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Facção", cmd4, "Aceitar", "");
				}
  				else if (GetFactionType(playerid) == FACTION_MEDICOS) {
  				strcat(cmd4, "{FCFF00}BOMBEIRO:{FFFFFF} /membros, /(f)ac, /sairfaccao, /armario, /convidar, /despedir, /promover, /fspray, /prefixo.\n");
 		    	strcat(cmd4, "{FCFF00}BOMBEIRO:{FFFFFF} /radio, /d, /curativo, /subirpt (Subir Paciente), /deixarpt (Deixar Paciente), /daralta, /maca, /retirarmaca.");
 		    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Facção", cmd4, "Aceitar", "");
 		    	}
 		    	else if (GetFactionType(playerid) == FACTION_JUDICIAL) {
		    	strcat(cmd4, "{FCFF00}FEDERAL:{FFFFFF} /membros, /(f)ac, /radio, /sairfaccao, /armario, /convidar, /despedir, /promover, /revistarm, /procurar, /puxarplaca.\n");
		    	strcat(cmd4, "{FCFF00}FEDERAL:{FFFFFF} /mostrarfun, /mandatofederal, /rmandatofederal, /vermandatosfederal, /entregarmandatofederal, /derrubarporta, /prefixo.\n");
		    	strcat(cmd4, "{FCFF00}FEDERAL:{FFFFFF} /defender, /ddefesa, /pendentes, /darporte, /atacar, /pendentes, /confiscar, /idg(Impressao), /setarfuncional\n");
		    	strcat(cmd4, "{FCFF00}FEDERAL:{FFFFFF} /julgar, /sentenciar, /djulgar, /vj, /impor, /libertar, /intimacao, /deter, /mdc, /transferirp, /ridentificar, /consertarviatura.\n");
		    	strcat(cmd4, "{FCFF00}FEDERAL:{FFFFFF} /condenar, /revestir, /pendentes, /julgamento, /prender, /algemar, /desalgemar, /arrastar, /darmandato, /apoiogrpae, /ptrab.\n");
 		    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Facção", cmd4, "Aceitar", "");
 		    	}
			  }
			}
			case 6:
			{
                new cmd4[1000];
				if (PlayerData[playerid][pJob] == JOB_COURIER) {
	    		strcat(cmd4, "{FCFF00}TRABALHO:{FFFFFF} /iniciarentrega, /pararcarregamento, /descarregar, /entregas.");
	    		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
	    		}
	    		else if (PlayerData[playerid][pJob] == JOB_MECHANIC) {
	    		strcat(cmd4, "{FCFF00}TRABALHO:{FFFFFF} /reparar, /nitro, repararc, /tunar, /blindar, /pintar /tunar /repararc /milha /neon.");
	    		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
	    		}
	    		else if (PlayerData[playerid][pJob] == JOB_TAXI) {
	    		strcat(cmd4, "{FCFF00}TRABALHO:{FFFFFF} /taxi, /aceitarc.");
	    		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
	    		}
	    		else if (PlayerData[playerid][pJob] == JOB_UNLOADER) {
	   			strcat(cmd4, "{FCFF00}TRABALHO:{FFFFFF} /carregarcaixa.");
	   			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
	    		}
	    		else if (PlayerData[playerid][pJob] == JOB_MINER) {
	   			strcat(cmd4, "{FCFF00}TRABALHO:{FFFFFF} /minerar.");
	   			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
	    		}
	    		else if (PlayerData[playerid][pJob] == JOB_GARBAGE) {
	    		strcat(cmd4, "{FCFF00}TRABALHO:{FFFFFF} /confiscarlixo, /despejar, /procurarlixo.");
	    		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
	    		}
	    		else if (PlayerData[playerid][pJob] != JOB_COURIER && PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_UNLOADER &&
				PlayerData[playerid][pJob] != JOB_MINER && PlayerData[playerid][pJob] != JOB_GARBAGE){
	    		strcat(cmd4, "{FCFF00}Você está desempregado no momento.");
	    		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Ajuda {FFFFFF}- Trabalho", cmd4, "Aceitar", "");
			  	}
		  	}
       }
		 }
	 return 1;
}
Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "O jogador especificado desconectou.");

		if (!PlayerData[targetid][pTaxiCalled])
		    return SendErrorMessage(playerid, "Essa corrida ja foi atendida por outro taxista.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pTaxiCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

        SendServerMessage(playerid, "Você aceitou a chamada de %s.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s aceitou a sua chamada de táxi e está a caminho.", ReturnName(playerid, 0));
	}
	return 1;
}
Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = strval(inputtext);

		if (!BusinessData[bizid][bizExists])
		    return 0;

	    if (!BusinessData[bizid][bizShipment])
	        return SendErrorMessage(playerid, "Este negócio não precisa de mais produtos.");

		if (IsShipmentAccepted(bizid))
		    return SendErrorMessage(playerid, "Esta entrega já foi aceita.");

		foreach (new i : Player) if (Business_IsOwner(i, bizid)) {
		    SendServerMessage(i, "%s aceitou o seu pedido de produtos.", ReturnName(playerid, 0));
		}
		PlayerData[playerid][pShipment] = bizid;
		SendServerMessage(playerid, "Você aceitou a entrega. Use /iniciarentrega para iniciar a entrega.");
	}
	return 1;
}
Dialog:RackWeapons(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Rack_Nearest(playerid);

	    if (id == -1)
	        return 0;

	    if (!RackData[id][rackWeapons][listitem])
	    {
			if (!GetWeapon(playerid))
			    return SendErrorMessage(playerid, "Você deve estar segurando uma arma para armazená-lo.");

			RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
			RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

			ResetWeapon(playerid, GetWeapon(playerid));

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a %s na prateleira arma.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
	    }
	    else
	    {
	        GiveWeaponToPlayer(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a %s na prateleira arma.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

            RackData[id][rackWeapons][listitem] = 0;
			RackData[id][rackAmmo][listitem] = 0;

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
	    }
	}
	return 1;
}
Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (!strcmp(inputtext, "Confiscar Armas")) {
	        ResetWeapons(PlayerData[playerid][pTakeItems]);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s confiscou as armas de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Sementes")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Maconha Seeds", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaina Seeds", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroina Seeds", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s confiscou sementes de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Drogas")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Maconha", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaina", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroina", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Steroids", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s confiscou as drogas de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Radio")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Radio Portatil", -1);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s confiscou Rádio de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Porte de Armas")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Porte de Armas", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s confiscou o porte de arma de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Carta de Conducao")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Carta de Conducao", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prender a CNH de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar CRLV")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "CRLV", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prendeu os documentos do veiculo de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
	}
	return 1;
}
Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 9)
		return 0;

	if (response)
	{
	    switch (listitem)
	    {
			case 0:
			{
				if (g_ServerLocked)
				{
				    g_ServerLocked = false;

				    SendRconCommand("password 0");
				    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s destrancou o servidor.", ReturnName(playerid, 0));
				}
				else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Trancar Server", "Digite a senha especificado abaixo para trancar o servidor:", "Trancar", "Voltar");
			}
			case 1:
			    Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Digite o novo nome do servidor abaixo:", "Ok", "Back");

			case 2:
			    Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Executar Query", "Please specify the MySQL query to execute below:", "Executar", "Voltar");
	    }
	}
	return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 9)
		return 0;

	if (response)
	{
	    if (isnull(inputtext) || !strcmp(inputtext, "0"))
	        return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Trancar Server", "Digite a senha especificado abaixo para trancar o servidor:", "Trancar", "Voltar");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Trancar Server", "Error: Por favor, digite uma senha mais curta do que 32 caracteres.\n\nDigite a senha especificado abaixo para trancar o servidor:", "Trancar", "Voltar");

		static
		    str[48];

	    format(str, sizeof(str), "password %s", inputtext);
		g_ServerLocked = true;

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s trancou o servidor (Senha: %s).", ReturnName(playerid, 0), inputtext);
	}
	else cmd_painel(playerid, "\1");
	return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 8)
		return 0;

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Set Hostname", "Digite o novo nome do servidor abaixo:", "Ok", "Back");

		static
		    str[128];

	    format(str, sizeof(str), "hostname %s", inputtext);

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s definiu o nome do servidor para \"%s\".", ReturnName(playerid, 0), inputtext);
	}
	else cmd_painel(playerid, "\1");
	return 1;
}

Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 9)
		return 0;

	if (response)
	{
        if (isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Please specify the MySQL query to execute below:", "Execute", "Back");

        if (strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: You can't execute \"DROP\" or \"DELETE\" queries.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back");

		PlayerData[playerid][pExecute] = 1;
		mysql_tquery(g_iHandle, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
	}
	else cmd_painel(playerid, "\1");
	return 1;
}
Dialog:TuneVehicle(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            ShowModelSelectionMenu(playerid, "Adicionar Roda", MODEL_SELECTION_WHEELS, {1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098}, 17, 0.0, 0.0, 90.0);

            case 1:
			{
			    AddComponent(vehicleid, 1087);
			    SendServerMessage(playerid, "Você adicionou hidráulica para este veículo.");
			}

			case 2:
			    Dialog_Show(playerid, AddNOS, DIALOG_STYLE_LIST, "Adicionar Nitro", "2x NOS\n5x NOS\n10x NOS", "Selecionar", "Cancelar");
			    
       		case 3:
			    Dialog_Show(playerid, AddPAINT, DIALOG_STYLE_LIST, "Adicionar PaintJob", "Paint 1\nPaint 2\nPaint 3", "Selecionar", "Cancelar");

			case 6:
				Dialog_Show(playerid, DIALOG_NEONTYPES, DIALOG_STYLE_LIST, "Adicionar Farol de milha", "Neon/Fixo\nNeon Pisca\nRemover Milha", "Seleciona", "Cancela");
			
			case 7:
			{
			    if (GetVehicleModel(vehicleid) != 428)
					return SendErrorMessage(playerid, "Você precisa está em um carro forte para blindar");
					
			    RepairVehicle(GetPlayerVehicleID(playerid));
	     		SetVehicleHealth(vehicleid, 7000.0);
			    SendClientMessage(playerid, COLOR_RED, "Você colocou uma blindagem no veiculo.");
			    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			}
     	}
	}
	return 1;
}
Dialog:AddPAINT(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
			{
                SetVehiclePaintjob(GetPlayerVehicleID(playerid), 0);
			}
			case 1:
			{
			    SetVehiclePaintjob(GetPlayerVehicleID(playerid), 1);
			}
            case 2:
			{
			    SetVehiclePaintjob(GetPlayerVehicleID(playerid), 2);
			}
		}
	}
	return 1;
}


Dialog:AddNOS(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
			{
			    AddComponent(vehicleid, 1009);
			    SendServerMessage(playerid, "Você adicionou 2x NOS para este veículo.");
			}
			case 1:
			{
			    AddComponent(vehicleid, 1008);
			    SendServerMessage(playerid, "Você adicionou 5x NOS para este veículo.");
			}
            case 2:
			{
			    AddComponent(vehicleid, 1010);
			    SendServerMessage(playerid, "Você adicionou 10x NOS para este veículo.");
			}
		}
	}
	return 1;
}
//////////////////////////////////////////////////////////////////
Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));

		if (id == -1)
		    return SendErrorMessage(playerid, "Você não está no alcance de qualquer entrada.");

		if (strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Senha especificada inválida.");

	    if (!EntranceData[id][entranceLocked])
		{
			EntranceData[id][entranceLocked] = true;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Voce ~r~trancou~w~ a entrada!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			EntranceData[id][entranceLocked] = false;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Voce ~r~destrancou~w~ a entrada!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			carid = ListedVehicles[playerid][listitem],
			id = CarData[carid][carImpounded];

	    if (carid != -1 && id != -1 && CarData[carid][carExists] && CarData[carid][carImpounded] != -1)
	    {
	        if (GetMoney(playerid) < CarData[carid][carImpoundPrice])
	            return SendErrorMessage(playerid, "Você não pode dar ao luxo de liberar este veículo.");

            GiveMoney(playerid, -CarData[carid][carImpoundPrice]);

			SetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
			SetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

			SendServerMessage(playerid, "Você liberou o seu carro %s por %s.", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carImpoundPrice]));

            CarData[carid][carImpounded] = -1;
            CarData[carid][carImpoundPrice] = 0;

            Car_Save(carid);
	    }
	}
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        userid = -1,
			itemid = -1,
			string[32];

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Objeto", "Por favor, insira o nome ou o ID do jogador:", "Ok", "Cancelar");

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Objeto", "Error: Jogador especificado invalido.\n\nPor favor, insira o nome ou o ID do jogador:", "Ok", "Cancelar");

	    if (!IsPlayerNearPlayer(playerid, userid, 6.0))
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Objeto", "Error: Você não está perto do jogador.\n\nPor favor, insira o nome ou o ID do jogador:", "Ok", "Cancelar");

	    if (userid == playerid)
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Objeto", "Error: Você não pode dar itens para si mesmo.\n\nPor favor, insira o nome ou o ID do jogador:", "Ok", "Cancelar");

		itemid = PlayerData[playerid][pInventoryItem];

		if (itemid == -1)
		    return 0;

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (InventoryData[playerid][itemid][invQuantity] == 1)
		{
			if (!strcmp(string, "Mochila") && Inventory_HasItem(userid, "Mochila"))
			    return SendErrorMessage(playerid, "O jogador já está carregando uma mochila.");

		    new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

		    if (id == -1)
				return SendErrorMessage(playerid, "Esse jogador não tem mais slots no inventário.");


		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira um/a \"%s\" e dá-lo para %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
		    SendServerMessage(userid, "%s deu-lhe \"%s\" (adicionado ao inventário).", ReturnName(playerid, 0), string);

			Inventory_Remove(playerid, string);
		    Log_Write("logs/give_log.txt", "[%s] %s (%s) tem dado um/a %s para %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], string, ReturnName(userid, 0), PlayerData[userid][pIP]);
  		}
		else
		{
		    Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Dar Objeto", "Item: %s (Quantidade: %d)\n\nDigite o valor que você quer dar %s:", "Dar", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
		    PlayerData[playerid][pGiveItem] = userid;
		}
	}
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
	{
	    new
	        userid = PlayerData[playerid][pGiveItem],
	        itemid = PlayerData[playerid][pInventoryItem],
			string[32];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (isnull(inputtext))
			return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Dar Objeto", "Item: %s (Quantidade: %d)\n\nDigite o valor que você quer dar %s:", "Dar", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Dar Objeto", "Error: Você não tem essa quantidade.\n\nItem: %s (Quantidade: %d)\n\nDigite o valor que você quer dar %s:", "Dar", "Cancel", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

	    if (id == -1)
			return SendErrorMessage(playerid, "Esse jogador não tem mais slots no inventário.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira um/a \"%s\" e dá-lo para %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
	    SendServerMessage(userid, "%s deu-lhe \"%s\" (adicionado ao inventário).", ReturnName(playerid, 0), string);

		Inventory_Remove(playerid, string, strval(inputtext));
	    Log_Write("logs/give_log.txt", "[%s] %s (%s) deu %d %s para %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), PlayerData[userid][pIP]);
	}
	return 1;
}

Dialog:Tutorial(playerid, response, listitem, inputtext[])
{
	return 1;
}
Dialog:TutorialConfirm(playerid, response, listitem, inputtext[])
{
	return 1;
}
Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "Você não tem multas a pagar.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "Você não tem dinheiro suficiente para pagar a multa.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "Você pagou uma multa de %s por \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Localizar Casa", "Por favor insira o endereço da casa abaixo:", "Enviar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Localizar Empresas", "24/7\nLoja de Armas\nLoja de Roupa\nFast Food\nDealership\nPosto de Gasolina\nLoja De Móveis", "Enviar", "Cancelar");

			case 2:
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Encontre a Entrada", "Auto Escola\nBanco\nArmazém\nCentral do Governo", "Enviar", "Cancelar");

			case 3:
			    Dialog_Show(playerid, FindJob, DIALOG_STYLE_LIST, "Encontrar Emprego", "Caminhoneiro\nMecanico\nTaxista\nMineiro\nLixeiro", "Enviar", "Cancelar");

			case 4:
			{
				static
				    string[MAX_GPS_LOCATIONS * 32];

				string = "Add Local\n";

				for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists]) {
				    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Locais personalizados", string, "Selecionar", "Voltar");
			}
		}
	}
	return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 32)
		    return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Localizar Casa", "Por favor insira o endereço da casa abaixo:", "Enviar", "Cancelar");

		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
	    	{
         		Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
	        	return SendServerMessage(playerid, "GPS marcado para \"%s\" (marcado no radar).", HouseData[i][houseAddress]);
			}
		}
        Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Localizar Casa", "Error: Não há resultados para \"%s\".\n\nPor favor insira o endereço da casa abaixo:", "Enviar", "Cancelar", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if (bizid != -1)
		{
		    Waypoint_Set(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
	        SendServerMessage(playerid, "GPS marcado para \"%s\" (marcado no radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "O GPS não conseguiu localizar qualquer negócio.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestEntrance(playerid, listitem + 1);

		if (id != -1)
		{
		    Waypoint_Set(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
	        SendServerMessage(playerid, "GPS marcado para \"%s\" (marcado no radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "O GPS não conseguiu localizar qualquer entrada.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestJob(playerid, listitem + 1);

		if (id != -1)
		{
		    static
				str[32];

		    format(str, 32, "%s Emprego", inputtext);

		    Waypoint_Set(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
	        SendServerMessage(playerid, "GPS marcado para \"%s\" (marcado no radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "O GPS não conseguiu localizar qualquer trabalho.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
			Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Local", "Digite o nome pretendido da localização abaixo:", "Enviar", "Cancelar");
	    }
	    else
		{
		    new id = Location_GetID(playerid, inputtext);

		    if (id != -1) {
		        PlayerData[playerid][pSelectedSlot] = id;

		        Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Marcar GPS\nDeletar Local", "Selecionar", "Voltar");
			}
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Local", "Digite o nome pretendido da localização abaixo:", "Enviar", "Cancelar");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Add Local", "Error: O nome não pode exceder 32 caracteres.\n\nDigite o nome pretendido da localização abaixo:", "Enviar", "Cancelar");

		static
		    Float:fX,
		    Float:fY,
		    Float:fZ,
			id = -1;

		if ((id = House_Inside(playerid)) != -1) {
		    fX = HouseData[id][housePos][0];
		    fY = HouseData[id][housePos][1];
		    fZ = HouseData[id][housePos][2];
		}
		else if ((id = Business_Inside(playerid)) != -1) {
		    fX = BusinessData[id][bizPos][0];
		    fY = BusinessData[id][bizPos][1];
		    fZ = BusinessData[id][bizPos][2];
		}
        else if ((id = Entrance_Inside(playerid)) != -1) {
		    fX = EntranceData[id][entrancePos][0];
		    fY = EntranceData[id][entrancePos][1];
		    fZ = EntranceData[id][entrancePos][2];
		}
		else GetPlayerPos(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);
		SendServerMessage(playerid, "Você adicionou \"%s\" para seu GPS.", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pSelectedSlot];

	    switch (listitem)
	    {
	        case 0:
	        {
	            Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendServerMessage(playerid, "GPS marcado para \"%s\" (marcado no radar).", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
			    SendServerMessage(playerid, "Você removeu \"%s\" do seu GPS.", LocationData[playerid][id][locationName]);

				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dialog_MainGPS(playerid, 1, 4, "\1");
			}
	    }
	}
	else dialog_MainGPS(playerid, 1, 4, "\1");
	return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP)
	    return 0;

	if (response)
	{
	    static
	        name[64],
			targetid = INVALID_PLAYER_ID;

		strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

		if ((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "O jogador já não está conectado.");

		if (PlayerData[targetid][pWarrants] < 1)
		    return SendErrorMessage(playerid, "O cidadão não tem nenhum B.O.");

		PlayerData[playerid][pMDCPlayer] = targetid;

		format(name, sizeof(name), "MDC: %s", name);
		Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Rastrear Jogador(Inativo)\nLimpar Ficha Criminal", "Selecionar", "Voltar");
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}
Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP || !Computador(playerid) && !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {

			case 1:
			{
       			if (GetFactionType(playerid) !=  FACTION_PCESP )
					return SendErrorMessage(playerid, "Você deve ser Policial Civil.");

			    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

			    SendServerMessage(playerid, "Você limpou a ficha criminal de %s.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
			    SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, "CEPOL: %s limpou a ficha criminal de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

			    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
			}
	    }
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    dialog_MainMDC(playerid, 1, 0, "\1");
	}
	return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
 	if(GetFactionType(playerid) !=  FACTION_PCESP || !IsACruiser(GetPlayerVehicleID(playerid)))
 	return 0;

	if (response)
	{
	    new targetid;

	    if (sscanf(inputtext, "u", targetid))
	        return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Sistema Integrado", "Error: Por favor, verifique o QRA novamente.\n\nPor favor, digite o nome ou ID do suspeito:", "Enviar", "Voltar");

		if (targetid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Sistema Integrado", "Error: Dados especificados invalidos.\n\nPor favor, digite o nome ou ID do suspeito:", "Enviar", "Voltar");

        if (PlayerData[targetid][pWarrants] > 14)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Sistema Integrado", "Error: ATENÇÃO QRA já tem 15 mandados ativos.\n\nPor favor, digite o nome ou ID do suspeito:", "Enviar", "Voltar");

		PlayerData[playerid][pMDCPlayer] = targetid;
		Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Sistema Integrado", "Informe o QRU ou Codigo Penas para aplicar em %s:", "Enviar", "Voltar", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	}
	else cmd_mdc(playerid, "\1");
	return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
if(GetFactionType(playerid) !=  FACTION_PCESP || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Sistema Integrado", "Digite a descrição do crime cometido por %s:", "Enviar", "Voltar", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

	    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

	    AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
	    //SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s colocou um(uns) crime sobre %s por \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);
	    SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, "MARE: %s colocou um(uns) artigos sobre %s por \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

	    cmd_mdc(playerid, "\1");
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if(GetFactionType(playerid) !=  FACTION_PCESP || !IsACruiser(GetPlayerVehicleID(playerid)))
  	return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            static
	                string[512];

				string[0] = 0;

				foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
				    format(string, sizeof(string), "%s%s (%d crimes)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
				}
				if (!strlen(string))
				    return SendErrorMessage(playerid, "Não há mandados ativos.");

				Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Crimes", string, "Selecionar", "Voltar");
    		}
    		case 1:
    		{
    		    Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Colocar Crime", "Por favor, insira o nome ou ID do suspeito:", "Enviar", "Voltar");
			}
			case 2:
    		{
    		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Ver Crimes", "Por favor, insira o nome ou ID do suspeito:", "Enviar", "Voltar");
			}
			case 3:
    		{
    		    Dialog_Show(playerid, RegistroVeiculos, DIALOG_STYLE_LIST, "Dados Veiculares", "Checar Veiculo\nChecar Multa", "Esolher", "Cancelar");
			}
	    }
	}
	return 1;
}
//
Dialog:RegistroVeiculos(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
			        new targetid;
			        PlayerData[playerid][pMDCPlayer] = targetid;
					Dialog_Show(playerid, VeiculosRegistrados, DIALOG_STYLE_INPUT, "Dados Veiculares", "Por favor, digite o nome do proprietario do veiculo:", "Enviar", "Voltar");
			}
			case 1:
			{
				Dialog_Show(playerid, VeiculoCharge, DIALOG_STYLE_INPUT, "Sistema Integrado", "Digite a a Placa do Veiculo", "Enviar", "Voltar" );
			}
		}
	}
	return 1;
}
//
Dialog:VeiculosRegistrados(playerid, response, listitem, inputtext[])
{
	if(GetFactionType(playerid) !=  FACTION_PCESP || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	return 0;

	if (response)
	{
	    	new targetid;

	    	if (isnull(inputtext) || IsNumeric(inputtext))
			return Dialog_Show(playerid, VeiculosRegistrados, DIALOG_STYLE_INPUT, "Sistema Integrado", "Por favor, digite o QRA:", "Enviar", "Voltar");

			if (sscanf(inputtext, "u", targetid))
	        return Dialog_Show(playerid, VeiculosRegistrado, DIALOG_STYLE_INPUT, "Sistema Integrado", "Error: Por favor, digite o QRA novamente.\n\nPor favor, digite o QRA:", "Enviar", "Voltar");

			if (targetid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, VeiculosRegistrado, DIALOG_STYLE_INPUT, "Sistema Integrado", "Error: QRA digitado e inválido.\n\nPor favor, digite o QRA:", "Enviar", "Voltar");

            new count;

	   		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(targetid, i)) {
	   		
			SendClientMessageEx(playerid, COLOR_DEPARTMENT, "** PLACA:  - 2%d | Modelo: %s ", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]));
			count++;
		}
	    cmd_mdc(playerid, "\1");
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_mdc(playerid, "\1");
	}
	return 1;
}
//
Dialog:VeiculoCharge(playerid, response, listitem, inputtext[])
{
	if(GetFactionType(playerid) !=  FACTION_PCESP)
	return 0;

	if (response)
	{
	    if (isnull(inputtext) || !IsNumeric(inputtext))
			return Dialog_Show(playerid, VeiculoCharge, DIALOG_STYLE_INPUT, "Sistema Integrado", "Digite a a Placa do Veiculo", "Enviar", "Voltar" );

		new carid;
		carid = strval(inputtext);
      	PlacaCarro(playerid, carid);
 		//
	    //SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s colocou um(uns) crime sobre %s por \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);
	    //SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, "RADIO: %s esta verificando CRLV %s por \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);
	    cmd_mdc(playerid, "\1");
		}
		return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    static
	        skins[8],
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
	                if (!PlayerData[playerid][pOnDuty])
	                {
	                    PlayerData[playerid][pOnDuty] = true;
	                    SetPlayerArmour(playerid, 100.0);

	                    SetFactionColor(playerid);
	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s está de serviço.", ReturnName(playerid, 0));
	                }
	                else
	                {
	                    PlayerData[playerid][pOnDuty] = false;
	                    SetPlayerArmour(playerid, 0.0);
	                    ResetPlayerWeapons(playerid);
	                    

	                    SetPlayerColor(playerid, DEFAULT_COLOR);
	                    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
	                    new skinid = PlayerData[playerid][pSkin];
                        PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][84], skinid);
                        PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][84]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s está fora de serviço.", ReturnName(playerid, 0));
	                }
				}
				case 1:
				{
				
					if (!PlayerData[playerid][pOnDuty])
        				return SendErrorMessage(playerid, "Você precisa entrar em serviço");
        				
				    SetPlayerArmour(playerid, 100.0);
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre o armário e pega um colete.", ReturnName(playerid, 0));
				}
				case 2:
				{
					if (!PlayerData[playerid][pOnDuty])
        				return SendErrorMessage(playerid, "Você precisa entrar em serviço");
        				
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Escolher Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 3:
				{
					if (!PlayerData[playerid][pOnDuty])
        				return SendErrorMessage(playerid, "Você precisa entrar em serviço");
        				
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sSlot Vazio\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armário de armas", string, "Selecionar", "Cancelar");
				}
				case 4:
				{
					return SendErrorMessage(playerid, "Opção desativada");

				}
				case 5:
				{
					if (!PlayerData[playerid][pOnDuty])
        				return SendErrorMessage(playerid, "Você precisa entrar em serviço");
        				
					Dialog_Show(playerid, LSPDClothes, DIALOG_STYLE_LIST, "Acessorios Policais", "Chapeu 1\nChapeu 2\nChapeu 3\nBone 1\nBone 2\nBone 3\nCapacete\nEscudo\nColete\nColdre\nRadio PX\nLanterna\nTaser\nDistintivo\nRemover Equipamento", "Selecionar", "Cancelar");
				}
			}
	    }
	    else
	    {
	        switch (listitem)
	        {
				case 0:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Escolher Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG)
							format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG)
							format(string, sizeof(string), "%sArma %d: %s (%d munição)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sSlot Vazio\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armário de armas", string, "Selecionar", "Cancelar");
				}
			}
	    }
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
	        if (PlayerHasWeapon(playerid, weaponid))
	            return SendErrorMessage(playerid, "Você já esta equipado.");

	        GiveWeaponToPlayer(playerid, weaponid, ammo);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre o armário e uma equipa com um/a %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

			if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        FactionData[factionid][factionWeapons][listitem] = 0;
		        FactionData[factionid][factionAmmo][listitem] = 0;

		        Faction_Save(factionid);
			}
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "Você não esta segurando uma arma.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s devolve %s para dentro do armario.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "O slot selecionado está vazio.");
			}
	    }
	}
	else {
	    cmd_armario(playerid, "\1");
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
			    static
			        Float:x,
			        Float:y,
			        Float:z;

				GetPlayerPos(playerid, x, y, z);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

				Faction_Refresh(PlayerData[playerid][pFactionEdit]);
				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendServerMessage(playerid, "Você ajustou a posição do armário da facção ID: %d.", PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
				static
				    string[512];

				string[0] = 0;

			    for (new i = 0; i < 10; i ++)
				{
			        if (FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
						format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));

					else format(string, sizeof(string), "%sSlot Vazio\n", string);
			    }
			    Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Armário de armas", string, "Selecionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    PlayerData[playerid][pSelectedSlot] = listitem;
	    Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Definir Arma (%d)\nDefinir Munições (%d)\nLimpar Slot", "Selecionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        	Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Definir Arma", "Arma Atual: %s (%d)\n\nigite o novo ID arma para o Slot %d:", "Enviar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 1:
	            Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Definir Munição", "Munição Atual: %d\n\nDigite a nova munição para a arma no slot %d:", "Enviar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dialog_FactionLocker(playerid, 1, 1, "\1");
				SendServerMessage(playerid, "Você removeu a arma do slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
	    }
	}
	else {
	    dialog_FactionLocker(playerid, 1, 1, "\1");
	}
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new weaponid = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Definir Arma", "Arma Atual: %s (%d)\n\nDigite o novo ID arma para o Slot %d:", "Enviar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (weaponid < 0 || weaponid > 46)
		    return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Definir Arma", "Error: A arma ID não pode ser inferior a 0 ou acima de 46.\n\nArma Atual: %s (%d)\n\nPDigite o novo ID arma para o Slot %d:", "Enviar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Definir Arma", "Definir Arma (%d)\nDefinir Munição (%d)\nLimpar Slot", "Selecionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

	    if (weaponid) {
		    SendServerMessage(playerid, "Você definiu a arma do slot %d para %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else {
		    SendServerMessage(playerid, "Você removeu a arma do slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new ammo = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Definir Munição", "Munição Atual: %d\n\nDigite a nova munição para a arma no slot %d:", "Enviar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (ammo < 1 || ammo > 15000)
		    return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Definir Munição", "Error:A munição não pode estar abaixo de 1 ou acima de 15.000.\n\nMunição Atual: %d\n\nDigite a nova munição para a arma no slot %d:", "Enviar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

			Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Definir Arma", "Definir Arma (%d)\nDefinir Munição (%d)\nLimpar Slot", "Selecionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		SendServerMessage(playerid, "Você definiu a munição do slot %d para %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    static
	        skins[311];

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Adicionar pelo Modelo ID", "Digite o ID do modelo da Skin abaixo (0-299):", "Add", "Cancel");

			case 1:
			{
			    for (new i = 0; i < sizeof(skins); i ++)
			        skins[i] = i + 1;

				ShowModelSelectionMenu(playerid, "SKIN", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

			    Faction_Save(PlayerData[playerid][pFactionEdit]);
			    SendServerMessage(playerid, "Você removeu a Skin ID do slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new skin = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Adicionar Por ID", "Por favor digite ID de (0-311):", "Adicionar", "Cancelar");

		if (skin < 0 || skin > 30000)
		    return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Adicionar Por Modelo", "Erro a skin selecionada é invalida. \n\nDigite os modelos de (0-311):", "Adicionar", "Cancelar");

        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if (skin) {
		    SendServerMessage(playerid, "Voce setou a skin de %d para %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else {
		    SendServerMessage(playerid, "Voce removeu a skin de %d do slot.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}


Dialog:Caixa(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pCaixa] != 0)
	        return SendErrorMessage(playerid, "Você já está carregando uma caixa.");

	    new id = strfind(inputtext, "#");

	    if (id != -1) {
	        id = strval(inputtext[id + 1]);

	        CaixaData[id][caixaVehicle] = INVALID_VEHICLE_ID;
	        PlayerData[playerid][pCaixa] = id;

            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma caixa de dentro do caminhão.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        if (isnull(inputtext))
	            return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Veiculo", "Por favor, insira o nome ou o ID do modelo de veículo:", "Add", "Cancel");

			new model = GetVehicleModelByName(inputtext);

			if (!model)
			    return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Veiculo", "Error: Modelo especificado inválido.\n\nPor favor, insira o nome ou o ID do modelo de veículo:", "Add", "Cancel");

        	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == model)
	            	return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Veiculo", "Error: Este modelo já é vendido a esta concessionária.\n\nPor favor, insira o nome ou o ID do modelo de veículo:", "Add", "Cancel");
			}
			PlayerData[playerid][pDealerCar] = model;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Digite o Preço", "Por favor insira um preço para '%s':", "Enviar", "Cancel", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
	    }
	}
	return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
			if (!listitem)
			{
				Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Add Veiculo", "Por favor, insira o nome ou o ID do modelo de veículo:", "Add", "Cancel");
			}
		    else
			{
				static
					cars[212];

				for (new i = 0; i < sizeof(cars); i ++)
  					cars[i] = i + 400;

				ShowModelSelectionMenu(playerid, "Add Veiculo", MODEL_SELECTION_DEALER_ADD, cars, sizeof(cars), -16.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        name[32],
			string[128];

		strunpack(name, PlayerData[playerid][pEditingItem]);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Número De Contato", "Nome De Contato: %s\n\nPor favor, indique o número de telefone para o contato:", "Enviar", "Voltar", name);

		for (new i = 0; i != MAX_CONTACTS; i ++)
		{
			if (!ContactData[playerid][i][contactExists])
			{
            	ContactData[playerid][i][contactExists] = true;
            	ContactData[playerid][i][contactNumber] = strval(inputtext);

				format(ContactData[playerid][i][contactName], 32, name);

				format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
				mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

				SendServerMessage(playerid, "Você adicionou \"%s\" para seus contatos.", name);
                return 1;
			}
	    }
	    SendErrorMessage(playerid, "Não há espaço para digitamos mais contatos.");
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Novo Contato", "Error: Digite um nome de contato.\n\nDigite o nome do contato abaixo:", "Enviar", "Voltar");

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Novo Contato", "Error: O nome do contato não pode exceder 32 caracteres.\n\nDigite o nome do contato abaixo:", "Enviar", "Voltar");

		strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

     Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Número De Contato", "Nome De Contato: %s\n\nPor favor, indique o número de telefone para o contato:", "Enviar", "Voltar", "Back", inputtext);
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			id = PlayerData[playerid][pContact],
			string[72];

		switch (listitem)
		{
		    case 0:
		    {
		        format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
				cmd_ligar(playerid, string);
		    }
		    case 1:
		    {
		        format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
		        mysql_tquery(g_iHandle, string);

		        SendServerMessage(playerid, "Você excluiu \"%s\" de seus contatos.", ContactData[playerid][id][contactName]);

		        ContactData[playerid][id][contactExists] = false;
		        ContactData[playerid][id][contactNumber] = 0;
		        ContactData[playerid][id][contactID] = 0;

		        ShowContacts(playerid);
		    }
		}
	}
	else {
	    ShowContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
	        Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Novo Contato", "Error: Digite um nome de contato.\n\nDigite o nome do contato abaixo:", "Enviar", "Voltar");
	    }
	    else {
		    PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

	        Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Contactar\nExcluir Contato", "Seleionar", "Voltar");
	    }
	}
	else {
		cmd_telefone(playerid, "\1");
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ListedContacts[playerid][i] = -1;
	}
	return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        string[16];

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Disque o número", "Por favor insira o número que você deseja discar abaixo:", "Discar", "Voltar");

        format(string, 16, "%d", strval(inputtext));
		cmd_ligar(playerid, string);
	}
	else {
		cmd_telefone(playerid, "\1");
	}
	return 1;
}


Dialog:SendText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new number = strval(inputtext);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Por favor insira o número que você deseja enviar uma mensagem de texto:", "Discar", "Voltar");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Error: Esse número não está disponivel agora.\n\nPor favor insira o número que você deseja enviar uma mensagem de texto:", "Discar", "Voltar");

		PlayerData[playerid][pContact] = GetNumberOwner(number);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Mensagem De Texto", "Por favor insira a mensagem para enviar para %s:", "Enviar", "Voltar", ReturnName(PlayerData[playerid][pContact], 0));
	}
	else {
		cmd_telefone(playerid, "\1");
	}
	return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
			return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Mensagem De Texto", "Por favor insira a mensagem para enviar para %s:", "Enviar", "Voltar", ReturnName(PlayerData[playerid][pContact], 0));

		new targetid = PlayerData[playerid][pContact];

		if (!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
		    return SendErrorMessage(playerid, "Esse número não está disponivel agora.");

		GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Voce tem sido ~r~cobrado~w~ $1 por enviar um SMS.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[TEXTO]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TEXTO]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu telefone e envia um SMS.", ReturnName(playerid, 0));
	}
	else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Por favor insira o número que você deseja enviar uma mensagem de texto:", "Discar", "Voltar");
	}
	return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "O telefone deve estar ligado.");

				Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Disque o número", "Por favor insira o número que você deseja discar abaixo:", "Discar", "Voltar");
			}
			case 1:
			{
			    if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "O telefone deve estar ligado.");

			    ShowContacts(playerid);
			}
		    case 2:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "O telefone deve estar ligado.");

		        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Por favor insira o número que você deseja enviar uma mensagem de texto:", "Discar", "Voltar");
			}
			case 3:
			{
			    if (!PlayerData[playerid][pPhoneOff])
			    {
           			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
			        	CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desliga seu telefone celular.", ReturnName(playerid, 0));
				}
				else
				{
				    PlayerData[playerid][pPhoneOff] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s liga seu telefone celular.", ReturnName(playerid, 0));
				}
			}
		}
	}
	return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	        PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];

			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Editar Posição\nPegar Móveis\nDestroir Móveis", "Selecionar", "Cancelar");
	    }
	}
	for (new i = 0; i != MAX_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	   		switch (listitem)
		    {
		        case 0:
				{
					EditDynamicObject(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureObject]);
					SendServerMessage(playerid, "Você agora está editando a posição do item \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				}
				case 1:
				{
				    new item = Inventory_Add(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]);

				    if (item == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a \"%s\".", ReturnName(playerid, 0), FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				    SendServerMessage(playerid, "Você pegou o seu \"%s\". O item foi adicionado ao seu inventário.", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
					CancelEdit(playerid);

				    PlayerData[playerid][pEditFurniture] = -1;
				}
				case 2:
				{
				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
				    SendServerMessage(playerid, "Você destruiu o móvel \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    CancelEdit(playerid);
				    PlayerData[playerid][pEditFurniture] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditFurniture] = -1;
		}
	}
	else {
	    PlayerData[playerid][pEditFurniture] = -1;
	}
	return 1;
}

Dialog:Trunk(playerid, response, listitem, inputtext[])
{
    new carid = Car_Nearest(playerid);

	if (CarData[carid][carImpounded] != -1)
    	return SendErrorMessage(playerid, "Este veículo é apreendido e você não pode usá-lo.");

	if (carid != -1 && !CarData[carid][carLocked])
 	{
		if (response)
		{
			if (!CarData[carid][carWeapons][listitem])
			{
			    if (!GetWeapon(playerid))
			        return SendErrorMessage(playerid, "Você não está segurando qualquer arma.");

       			if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "Você não pode armazenar um tazer em seu porta-malas.");

                if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "Você não pode armazenar uma espingarda beanbag em seu porta-malas.");

				if (!Car_IsOwner(playerid, carid) && GetFactionType(playerid) == FACTION_PCESP)
        			return SendErrorMessage(playerid, "Você não pode armazenar armas já que você é um policial.");

	   			CarData[carid][carWeapons][listitem] = GetWeapon(playerid);
	            CarData[carid][carAmmo][listitem] = GetPlayerAmmo(playerid);

	            ResetWeapon(playerid, CarData[carid][carWeapons][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a %s de dentro de seu porta-malas.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            Car_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
			else
			{
			    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][listitem], CarData[carid][carAmmo][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um/a %s de dentro de seu porta-malas.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            CarData[carid][carWeapons][listitem] = 0;
	            CarData[carid][carAmmo][listitem] = 0;

	            Car_Save(carid);
	            Car_WeaponStorage(playerid, carid);
			}
	    }
		else {
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			bizid = Business_Inside(playerid),
			carid = PlayerData[playerid][pDealerCar],
			price = DealershipCars[bizid][carid][vehPrice];

		if (bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
		{
			if (GetMoney(playerid) < price)
			    return SendErrorMessage(playerid, "Você tem fundos suficientes para a compra.");

			if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			    return SendErrorMessage(playerid, "Você já tem %d veiculos (server limite).", MAX_OWNABLE_CARS);

			new id = Car_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], BusinessData[bizid][bizSpawn][0], BusinessData[bizid][bizSpawn][1], BusinessData[bizid][bizSpawn][2], BusinessData[bizid][bizSpawn][3], 1, 1);

			if (id != -1)
			{
			    Tax_AddPercent(price);

			    BusinessData[bizid][bizVault] += Tax_Percent(price);
			    Business_Save(bizid);

				SendServerMessage(playerid, "Você comprou um %s por %s!", ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
				GiveMoney(playerid, -price);
				if (!Inventory_HasItem(playerid, "CRLV"))
				{
                	Inventory_Add(playerid, "CRLV", 1581);
				}

				ShowPlayerFooter(playerid, "~w~Veiculo ~p~comprado!");
				Log_Write("logs/car_log.txt", "[%s] %s adquiriu um %s por %s.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			}
		}
	}
	return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Digite o Preço", "Por favor insira um preço para '%s':", "Enviar", "Cancelar", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));

		    Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
	        Business_EditCars(playerid, id);

		    SendServerMessage(playerid, "Você adicionou uma '%s' para a concessionária.", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		    return 1;
		}
	}
	return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Definir Preço", "O preço atual de '%s' é %s.\n\nDigite o novo preço para este modelo de veículo abaixo:", "Enviar", "Cancelar", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

			new
			    string[128];

			DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
			mysql_tquery(g_iHandle, string);

			SendServerMessage(playerid, "Você definiu o preço do '%s' para %s.", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			Business_EditCars(playerid, id);
		}
		return 1;
	}
	return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (listitem == 0)
		    {
		        Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Definir Preço", "O preço atual de '%s' é %s.\n\nDigite o novo preço para este modelo de veículo abaixo:", "Enviar", "Cancelar", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
		    }
		    else if (listitem == 1)
		    {
			    new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
			    Business_RemoveVehicle(id, model);

				SendServerMessage(playerid, "Você removeu o'%s' da concessionária.", ReturnVehicleModelName(model));
				Business_EditCars(playerid, id);
			}
		}
	}
	return 1;
}

Dialog:BankAccount(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Depositar fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 2:
			{
			    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Saldo de sua conta bancária: %s\n\nPor favor, insira o nome ou ID do player abaixo:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Conta Bancária", "Saldo Bancário: %s\nPoupança Saldo: %s", "Selecionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    static
	        userid;

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Saldo de sua conta bancária: %s\n\nPor favor, insira o nome ou ID do player abaixo:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Error: Jogador especificado inválido.\n\nSaldo de sua conta bancária: %s\n\nPor favor, insira o nome ou ID do player abaixo:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == playerid)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Error: Você não pode transferir fundos para si mesmo.\n\nSaldo de sua conta bancária: %s\n\nPor favor, insira o nome ou ID do player abaixo:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pTransfer] = userid;
		Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro a transferir para %s:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
	}
    else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Conta Bancária", "Retirar Fundos\nDepositar Fundos\nFazer uma transferência", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro a transferir para %s:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Fazer uma transferência", "Error: Fundos insuficientes!\n\nSaldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro a transferir para %s:", "Continuar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (!strcmp(PlayerData[playerid][pIP], PlayerData[PlayerData[playerid][pTransfer]][pIP])) {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) transferiu %s para %s (%s).", ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[playerid][pIP]);
		}
		PlayerData[playerid][pBankMoney] -= amount;
		PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

	    SendServerMessage(playerid, "Você transferiu %s para %s da conta bancária.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
	    SendServerMessage(PlayerData[playerid][pTransfer], "%s transferiu %s para sua conta bancária.", ReturnName(playerid, 0), FormatNumber(amount));

        Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Conta Bancária", "Retirar Fundos\nDepositar Fundos\nFazer uma transferência", "Selecionar", "Voltar");
        Log_Write("logs/transfer_log.txt", "[%s] %s (%s) transferiu %s para %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), PlayerData[PlayerData[playerid][pTransfer]][pIP]);
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Conta Bancária", "Retirar Fundos\nDepositar Fundos\nFazer uma transferência", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:Savings(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Depositar Fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Conta Bancária", "Saldo Bancário: %s\nPoupança Saldo: %s", "Selecionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar fundos", "Error: Fundos insuficientes!\n\nSaldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Você retirou %s da sua conta bancária.", FormatNumber(amount));
        Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Conta Bancária", "Retirar Fundos\nDepositar Fundos\nFazer uma transferência", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Depositar fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Depositar fundos", "Error: Você não tem essa quantidade.\n\nSaldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Você depositou %s em sua conta bancária.", FormatNumber(amount));
        Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Depositar fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Conta Bancária", "Retirar Fundos\nDepositar Fundos\nFazer uma transferência", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:SavingsWithdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > PlayerData[playerid][pSavings])
			return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fundos", "Error: Fundos insuficientes!\n\nSaldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Você retirou %s de sua conta poupança.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja retirar:", "Retirar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Caderneta de poupança", "Retirar fundos\nDepositar fundos", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:SavingsDeposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Depositar Fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Depositar Fundos", "Error: Você não tem essa quantidade.\n\nSaldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Você depositou %s em sua conta poupança.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Depositar Fundos", "Saldo de sua conta bancária: %s\n\nPor favor, indique a quantidade de dinheiro que você deseja depositar:", "Depositar", "Voltar", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Caderneta de poupança", "Retirar fundos\nDepositar fundos", "Selecionar", "Voltar");
	}
	return 1;
}
Dialog:Bank(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Conta Bancária", "Retirar Fundos\nDepositar Fundos\nFazer uma transferência", "Selecionar", "Voltar");
			}
			case 1:
			{
				Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Caderneta de Poupança", "Retirar fundos\nDepositar fundos", "Selecionar", "Voltar");
			}
		}
	}
	return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
	    SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
	}
	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			itemid = PlayerData[playerid][pInventoryItem],
			string[64];

	    strunpack(string, InventoryData[playerid][itemid][invItem]);

	    switch (listitem)
	    {
	        case 0:
	        {
		            CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, string);
	        }
	        case 1:
	        {
				PlayerData[playerid][pInventoryItem] = itemid;
				Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Objeto", "Por favor, insira o nome ou o ID do jogador:", "Ok", "Cancelar");
	        }
	        case 2:
	        {
	            new id = -1;

	            if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
	                return SendErrorMessage(playerid, "Você não pode soltar itens agora.");

				else if ((id = Garbage_Nearest(playerid)) != -1)
				{
				    if (GarbageData[id][garbageCapacity] >= 20)
				        return SendErrorMessage(playerid, "Esta lata de lixo está cheio de lixo.");

                    GarbageData[id][garbageCapacity]++;
                    Garbage_Save(id);

					Inventory_Remove(playerid, string);
                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s lança um/a \"%s\" para o caixote do lixo.", ReturnName(playerid, 0), string);

                    format(string, sizeof(string), "[Container %d]\n{FFFFFF}Capacidade do container: %d/30", id, GarbageData[id][garbageCapacity]);
                    UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, string);
				}
				else if (InventoryData[playerid][itemid][invQuantity] == 1)
					DropPlayerItem(playerid, itemid);

				else
					Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantidade: %d\n\nPor favor especificar quanto desse item que deseja deixar no chão:", "Drop", "Cancelar", string, InventoryData[playerid][itemid][invQuantity]);
	        }
	    }
	}
	return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
	new
	    itemid = PlayerData[playerid][pInventoryItem],
	    string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Quantidade: %d\n\nPor favor especificar quanto desse item que deseja deixar no chão:", "Drop", "Cancelar", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Error: Quantidade insuficiente.\n\nItem: %s - Quantidade: %d\n\nPor favor especificar quanto desse item que deseja deixar no chão:", "Drop", "Cancelar", string, InventoryData[playerid][itemid][invQuantity]);

		DropPlayerItem(playerid, itemid, strval(inputtext));
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1,
		price,
		string[64];

    if ((bizid = Business_Inside(playerid)) != -1 && response)
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if (GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "Voce nao tem dinheiro suficienta para comprar.");

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Esta empresa esta sem mercadoria no momento.");

		if (BusinessData[bizid][bizType] == 1 || BusinessData[bizid][bizType] == 6)
		{
		    switch (listitem)
		    {
		        case 0:
		        {
		            if (Inventory_HasItem(playerid, "Telefone"))
		                return SendErrorMessage(playerid, "Você já tem um celular.");

					new id = Inventory_Add(playerid, "Telefone", 330);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					PlayerData[playerid][pPhone] = random(90000) + 10000;

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um telefone celular.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Seu novo numero e ~p~%d.", PlayerData[playerid][pPhone]);
					ShowPlayerFooter(playerid, string);

					SendServerMessage(playerid, "Seu novo numero e %d.", PlayerData[playerid][pPhone]);
				}
				case 1:
		        {
		            if (Inventory_HasItem(playerid, "Sistema de GPS"))
		                return SendErrorMessage(playerid, "Você já tem um GPS .");

					new id = Inventory_Add(playerid, "Sistema de GPS", 18875);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um GPS.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            if (Inventory_Count(playerid, "Spray") >= 3)
		                return SendErrorMessage(playerid, "Você tem 3 latas de spray, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Spray", 365);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um spray paint.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
					return SendErrorMessage(playerid, "Não tem mais o produto");
			    }
				case 4:
		        {
		            if (Inventory_Count(playerid, "Guarrafa de Agua") >= 10)
		                return SendErrorMessage(playerid, "Você tem 10 garrafas de água, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Guarrafa de Agua", 2958);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma garrafa de água.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
		        {
              		if (Inventory_Count(playerid, "Guarrafa de Refrigerante") >= 5)
		                return SendErrorMessage(playerid, "Você tem 5 garrafas de refrigerante, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Guarrafa de Refrigerante", 1543);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma garrafa de refrigerante.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 6:
				{
				    if (PlayerData[playerid][pLottery])
				        return SendErrorMessage(playerid, "Você já tem um bilhete de loteria.");

					Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Número da Loteria", "Digite seu número de loteria desejado abaixo(de 1-60):", "Enviar", "Cancelar");
				}
				case 7:
		        {
		            if (Inventory_HasItem(playerid, "Radio Portatil"))
		                return SendErrorMessage(playerid, "Você já tem esse item.");

					new id = Inventory_Add(playerid, "Radio Portatil", 18868);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um radio portátil.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 8:
		        {
		            if (Inventory_Count(playerid, "Lata de Gasolina") >= 3)
		                return SendErrorMessage(playerid, "Você tem 3 latas de combustível, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Lata de Gasolina", 1650);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um lata de combustivél.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 9:
		        {
		            if (Inventory_HasItem(playerid, "Pe de Cabra"))
		                return SendErrorMessage(playerid, "Você já tem um pé de cabra.");

					new id = Inventory_Add(playerid, "Pe de Cabra", 18634);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um pé de cabra.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 10:
		        {
		            if (Inventory_HasItem(playerid, "Boombox"))
		                return SendErrorMessage(playerid, "Você já tem um boombox.");

					new id = Inventory_Add(playerid, "Boombox", 2226);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um boombox.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 11:
		        {
		            if (Inventory_HasItem(playerid, "Mascara"))
		                return SendErrorMessage(playerid, "Você já tem uma máscara.");

					if (PlayerData[playerid][pPlayingHours] < 5)
					    return SendErrorMessage(playerid, "Você deve ter pelo menos 5 horas jogando.");

					new id = Inventory_Add(playerid, "Mascara", 19036);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma máscara.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 12:
		        {
		            if (Inventory_Count(playerid, "Primeiros Socorros") >= 3)
		                return SendErrorMessage(playerid, "Você tem 3 kits de primeiros socorros, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Primeiros Socorros", 11738);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um kit de primeiros socorros.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 13:
		        {
		            if (Inventory_Count(playerid, "Ferramentas") >= 3)
		                return SendErrorMessage(playerid, "Você já tem 3 Caixas de Ferramentas e não pode comprar mais.");

					new id = Inventory_Add(playerid, "Ferramentas", 19624);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma Caixa de Ferramentas.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 14:
		        {
		            if (Inventory_Count(playerid, "Nitrogenio") >= 5)
		                return SendErrorMessage(playerid, "Você tem 5 canisters, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Nitrogenio", 1010);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um NOS canister.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 15:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "Você já tem esse item.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um bastao baseball.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 16:
		        {
		            if (Inventory_Count(playerid, "Pizza Congelada") >= 3)
		                return SendErrorMessage(playerid, "Você tem 3 pizzas congeladas, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Pizza Congelada", 2814);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma pizza congelada.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 17:
		        {
		            if (Inventory_Count(playerid, "Hamburguer Congelado") >= 5)
		                return SendErrorMessage(playerid, "Você tem 5 hambúrgueres congelados, você não pode comprar mais.");

					new id = Inventory_Add(playerid, "Hamburguer Congelado", 2768);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um hambúrguer congelado.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 18:
		        {
		            if (Inventory_Count(playerid, "Bateria") >= 3)
		                return SendErrorMessage(playerid, "Você já tem 3 Baterias e não pode comprar mais.");

					new id = Inventory_Add(playerid, "Bateria", 1252);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma Bateria.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
   			}
		}
		else if (BusinessData[bizid][bizType] == 2)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
					new id = Inventory_Add(playerid, "Cerveja", 19822);
					
					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um catucho de bala.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {

					new id = Inventory_Add(playerid, "Pinga", 2958);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um cartucho de munição.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {

					new id = Inventory_Add(playerid, "whisky", 1667);

					if (id == -1)
        				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um colete.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
				{

					new id = Inventory_Add(playerid, "vodka", 1668);
					
					if (id == -1)
      				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");


					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma Desert Eagle.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
				}
		    }
		}
		else if (BusinessData[bizid][bizType] == 3)
		{
		    switch (listitem)
		    {
		        case 0:
				{
				    PlayerData[playerid][pClothesType] = 1;

					switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Roupas", MODEL_SELECTION_CLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Roupas", MODEL_SELECTION_CLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
		        case 1:
				{
				    PlayerData[playerid][pClothesType] = 2;
					ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_CLOTHES, {19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035}, 30, 0.0, 0.0, 90.0);
				}
			    case 2:
				{
				    PlayerData[playerid][pClothesType] = 3;
     				//ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_CLOTHES, {18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951}, 18, -20.0, -90.0, 0.0);
                    ShowModelSelectionMenu(playerid, "Chapéus", MODEL_SELECTION_HATS, {19300, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18924, 18921, 18922, 18923, 18940, 19093, 18976, 18645, 19069, 19114}, 29, -20.0, -90.0, 0.0);
				}
				case 3:
				{
				    PlayerData[playerid][pClothesType] = 4;
					ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_CLOTHES, {18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920}, 10, 80.0, -173.0, 0.0);
				}
		    }
		}
		else if (BusinessData[bizid][bizType] == 4)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "Você não está com sede agora.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um pouco de água.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 1:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "Você não está com sede agora.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 20 > 100) ? (100) : (PlayerData[playerid][pThirst] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma garrafa de refrigerante.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 2:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Você não está com fome agora.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu algumas batatas fritas.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Você não está com fome agora.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um cheeseburger.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Você não está com fome agora.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 30 > 100) ? (100) : (PlayerData[playerid][pHunger] + 30);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu um hambúrguer de frango.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Você não está com fome agora.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu alguns nuggets de frango.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "Você não está com fome agora.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagou %s e recebeu uma salada.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 7)
		{
		    new
				items[50] = {-1, ...},
				count;

		    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
				items[count++] = g_aFurnitureData[i][e_FurnitureModel];
		    }
		    PlayerData[playerid][pFurnitureType] = listitem;

			if (listitem == 3) {
				ShowModelSelectionMenu(playerid, "Móveis", MODEL_SELECTION_FURNITURE, items, count, -12.0, 0.0, 0.0);
			}
			else {
			    ShowModelSelectionMenu(playerid, "Móveis", MODEL_SELECTION_FURNITURE, items, count);
			}
		}
	}
    return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    static
		        item[24];

		    strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
		    strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
      		Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Negócio: Definir Preço", "Digite o novo preço do produto para \"%s\":", "Modificar", "Voltar", item);
		}
	}
	return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		item[32];

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    strunpack(item, PlayerData[playerid][pEditingItem]);

			if (isnull(inputtext))
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Negócio: Definir Preço", "Digite o novo preço do produto para \"%s\":", "Modificar", "Voltar", item);

			if (strval(inputtext) < 1 || strval(inputtext) > 2000)
			   return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Negócio: Definir Preço", "Digite o novo preço do produto para \"%s\" ($1 para $2,000):", "Modificar", "Voltar", item);

			BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
			Business_Save(bizid);

			SendServerMessage(playerid, "Você ajustou o preço de \"%s\" para: %s!", item, FormatNumber(strval(inputtext)));
			Business_ProductMenu(playerid, bizid);
		}
		else
		{
		    Business_ProductMenu(playerid, bizid);
		}
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Porta-Malas", "Item: %s (Quantidade: %d)\n\nPor favor, indique a quantidade que você deseja armazenar para este item:", "Guardar", "Voltar", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um \"%s\" em seu porta-malas.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
			    return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Porta-Malas", "Item: %s (Quantidade: %d)\n\nPor favor, indique a quantidade que você deseja pegar para este item:", "Pegar", "Voltar", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

			Car_RemoveItem(carid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um/a \"%s\" do porta-malas do veiculo.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
		string[64];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
		    if (listitem == MAX_CAR_STORAGE) {
    			Car_WeaponStorage(playerid, carid);
		    }
		    else if (CarStorage[carid][listitem][cItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Quantidade: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Pegar Item\nGuardar Item", "Selecionar", "Voltar");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
    static
	    carid = -1,
		itemid = -1,
		string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, CarStorage[carid][itemid][cItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (CarStorage[carid][itemid][cItemQuantity] == 1)
			        {

			            new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

			            Car_RemoveItem(carid, string);

			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a \"%s\" do porta-malas do veiculo.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
			        }
			        else
			        {
			            Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Porta-Malas", "Item: %s (Quantidade: %d)\n\nPor favor, indique a quantidade que você deseja pegar para este item:", "Pegar", "Voltar", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Mochila")) {
					    Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Você só pode armazenar uma mochila em seu porta-malas.");
					}
					else if (id == -1) {
						Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Você não tem mais deste item para armazenar!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a \"%s\" no porta-malas do veiculo.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Porta Malas", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Guardar:", "Guardar", "Voltar", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
					}
				}
			}
		}
		else
		{
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
		{
		if (response)
		{
		    if (HouseData[houseid][houseWeapons][listitem] != 0)
		    {
				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem]);

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a \"%s\" do seu armario de armas.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));
                Log_Write("logs/storage_log.txt", "[%s] %s pegou um/a \"%s\" da Casa ID: %d (Dono: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Sim") : ("Nao"));

				HouseData[houseid][houseWeapons][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
			    new
					weaponid = GetWeapon(playerid),
					ammo = GetPlayerAmmo(playerid);

			    if (!weaponid)
			        return SendErrorMessage(playerid, "Você não está segurando qualquer arma!");

       			if (weaponid == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "Você não pode guardar um tazer.");

                if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "Você não pode guardar uma Espingarda de Balas de borracha.");

                ResetWeapon(playerid, weaponid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a \"%s\" no seu armario de armas.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				HouseData[houseid][houseWeapons][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
		}
		else
		{
		    House_OpenStorage(playerid, houseid);
		}
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Deposito", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Guardar:", "Guardar", "Voltar", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a \"%s\" em sua casa.", ReturnName(playerid, 0), string);
			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
	{
	    strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
			    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Deposito", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Pegar:", "Pegar", "Voltar", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

			new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");

			House_RemoveItem(houseid, string, amount);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a \"%s\" em sua casa.", ReturnName(playerid, 0), string);

			House_ShowItems(playerid, houseid);
			Log_Write("logs/storage_log.txt", "[%s] %s pegou um/a %d \"%s\" da Casa ID: %d (Dono: %s).", ReturnDate(), ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Sim") : ("Nao"));
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Cofre", "Seguro: %s\n\nPor favor, indique o quanto dinheiro você deseja retirar do cofre:", "Retirar", "Voltar", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > HouseData[houseid][houseMoney])
			    return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Cofre", "Error: Fundos insuficientes.\n\nSeguro: %s\n\nPor favor, indique o quanto dinheiro você deseja retirar do cofre:", "Retirar", "Voltar", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s retirou %s do cofre de sua casa.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Cofre", "Retirar Dinheiro\nDepositar Dinheiro", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Cofre", "Seguro: %s\n\nPor favor, indique o quanto dinheiro você deseja depositar do cofre:", "Depositar", "Voltar", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > GetMoney(playerid))
			    return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT,  "Cofre", "Error: Fundos insuficientes.\n\nSeguro: %s\n\nPor favor, indique o quanto dinheiro você deseja depositar do cofre:", "Depositar", "Voltar", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s depositou %s no cofre de sua casa.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Cofre", "Retirar Dinheiro\nDepositar Dinheiro", "Selecionar", "Voltar");
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			switch (listitem)
			{
			    case 0: {
					Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Cofre", "Seguro: %s\n\nPor favor, indique o quanto dinheiro você deseja retirar do cofre:", "Retirar", "Voltar", FormatNumber(HouseData[houseid][houseMoney]));
				}
				case 1: {
				    Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Cofre", "Seguro: %s\n\nPor favor, indique o quanto dinheiro você deseja depositar do cofre:", "Depositar", "Voltar", FormatNumber(HouseData[houseid][houseMoney]));
				}
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		string[64];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
	{
		if (response)
		{
    		if (HouseStorage[houseid][listitem][hItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, HouseStorage[houseid][listitem][hItemName]);

				format(string, sizeof(string), "%s (Quantidade: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Pegar Item\nGuardar Item", "Selecionar", "Voltar");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
	{
		if (response)
		{
		    if (listitem == 0) {
		        House_ShowItems(playerid, houseid);
		    }
      		else if (listitem == 1) {
				House_WeaponStorage(playerid, houseid);
		    }
		    else if (listitem == 2) {
		        Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Cofre", "Retirar Dinheiro\nDepositar Dinheiro", "Selecionar", "Voltar");
			}
		}
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		itemid = -1,
		string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, HouseStorage[houseid][itemid][hItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (HouseStorage[houseid][itemid][hItemQuantity] == 1)
			        {
			            new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "Você não tem nenhum slots de inventário vazio.");


			            House_RemoveItem(houseid, string);
			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou um/a \"%s\" do armario de sua casa.", ReturnName(playerid, 0), string);

						House_ShowItems(playerid, houseid);
						Log_Write("logs/storage_log.txt", "[%s] %s pegou um/a \"%s\" da Casa ID: %d (Dono: %s).", ReturnDate(), ReturnName(playerid, 0), string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Sim") : ("Nao"));
			        }
			        else
			        {
			            Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Deposito", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Pegar:", "Pegar", "Voltar", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Mochila")) {
					    House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "Você só pode armazenar uma mochila em sua casa.");
					}
					else if (id == -1) {
						House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "Você não tem mais deste item para armazenar!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardou um/a \"%s\" no armario de sua casa.", ReturnName(playerid, 0), string);
						House_ShowItems(playerid, houseid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Deposito", "Item: %s (Quantidade: %d)\n\nDigite o valor que deseja Guardar:", "Guardar", "Voltar", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
					}
				}
			}
		}
		else
		{
		    House_ShowItems(playerid, houseid);
		}
	}
	return 1;
}

Dialog:EditGlasses(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 0))
	            {
	                PlayerData[playerid][pToggleGlasses] = 0;
	                SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);
					ShowPlayerFooter(playerid, "Voce tem ~g~anexado~w~ seus oculos.");
				}
				else
				{
				    PlayerData[playerid][pToggleGlasses] = 1;
	                RemovePlayerAttachedObject(playerid, 0);
					ShowPlayerFooter(playerid, "Voce tem ~g~tirado~w~ seus oculos.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleGlasses] = 0;
       			SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

			    EditAttachedObject(playerid, 0);
			    PlayerData[playerid][pEditType] = 1;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 0);
			    PlayerData[playerid][pGlasses] = 0;
			    SendServerMessage(playerid, "Você apagou seus óculos.");
			}
		}
	}
	return 1;
}

Dialog:EditHat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 1))
            	{
	                PlayerData[playerid][pToggleHat] = 0;
	                SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);
					ShowPlayerFooter(playerid, "Voce tem ~g~anexado~w~ seu chapeu.");
				}
				else
				{
				    PlayerData[playerid][pToggleHat] = 1;
	                RemovePlayerAttachedObject(playerid, 1);
					ShowPlayerFooter(playerid, "Voce tem ~g~tirado~w~ seu chapeu.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleHat] = 0;
	            SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

			    EditAttachedObject(playerid, 1);
			    PlayerData[playerid][pEditType] = 2;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerData[playerid][pHat] = 0;
			    SendServerMessage(playerid, "Você excluiu seu chapéu.");
			}
		}
	}
	return 1;
}

Dialog:EditBandana(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 2))
	            {
	                PlayerData[playerid][pToggleBandana] = 0;
	                SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);
					ShowPlayerFooter(playerid, "Voce tem ~g~anexado~w~ sua bandana.");
				}
				else
				{
				    PlayerData[playerid][pToggleBandana] = 1;
	                RemovePlayerAttachedObject(playerid, 2);
					ShowPlayerFooter(playerid, "Voce tem ~g~tirado~w~ sua bandana.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleBandana] = 0;
       			SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

			    EditAttachedObject(playerid, 2);
			    PlayerData[playerid][pEditType] = 3;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerData[playerid][pBandana] = 0;
			    SendServerMessage(playerid, "Você excluiu sua bandana.");
			}
		}
	}
	return 1;
}
Dialog:Accessory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!PlayerData[playerid][pGlasses])
	                return SendErrorMessage(playerid, "Você não possui um par de óculos.");

	            Dialog_Show(playerid, EditGlasses, DIALOG_STYLE_LIST, "Oculos", "Alternar Óculos\nEditar Óculos\nExcluir Óculos", "Selecionar", "Cancelar");
			}
			case 1:
			{
			    if (!PlayerData[playerid][pHat])
	                return SendErrorMessage(playerid, "Você não possui um chapéu.");

			    Dialog_Show(playerid, EditHat, DIALOG_STYLE_LIST, "Chapeu", "Alternar Chapeu\nEditar Chapeu\nExcluir Chapeu", "Selecionar", "Cancelar");
			}
			case 2:
			{
			    if (!PlayerData[playerid][pBandana])
	                return SendErrorMessage(playerid, "Você não possui uma bandana.");

			    Dialog_Show(playerid, EditBandana, DIALOG_STYLE_LIST, "Bandana", "Alternar Bandana\nEditar Bandana\nExcluir Bandana", "Selecionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:CharList(playerid, response, listitem, inputtext[])
{
    SetTimerEx("SelectTD", 200, false, "d", playerid);

	if (response)
	{
		if (!PlayerCharacters[playerid][listitem][0])
		    return SendErrorMessage(playerid, "O slot selecionado está vazio.");

		new
		    string[160];

		format(string, sizeof(string), "SELECT `Admin`, `Skin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][listitem]);
		mysql_tquery(g_iHandle, string, "OnCharacterLookup", "dds", playerid, listitem + 1, PlayerCharacters[playerid][listitem]);
	}
	return 1;
} 
Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
		return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Registrar Conta", "Bem Vindo ao Max City Roleplay, %s.\n\nNotice: A sua conta ainda não está registrada. Digite a senha desejada:", "Registrar", "Cancelar", ReturnName(playerid));

	else
	{
		SQL_CreateAccount(PlayerData[playerid][pUsername], inputtext);
        TextDrawHideForPlayer(playerid, TDIntro[0]);
		TextDrawHideForPlayer(playerid, TDIntro[1]);
		TextDrawHideForPlayer(playerid, TDIntro[2]);
		TextDrawHideForPlayer(playerid, TDIntro[3]);
		ShowCharacterMenu(playerid);
		SendServerMessage(playerid, "Sua conta foi criada e salva com sucesso.");
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Login", "Max City Roleplay!\n\nSua conta foi visto pela última vez em: %s.\n\nPor favor digite sua senha abaixo para acessar sua conta:", "Login", "Cancelar", PlayerData[playerid][pLoginDate]);

	else
	{
	    TextDrawHideForPlayer(playerid, TDIntro[0]);
		TextDrawHideForPlayer(playerid, TDIntro[1]);
		TextDrawHideForPlayer(playerid, TDIntro[2]);
		TextDrawHideForPlayer(playerid, TDIntro[3]);
		SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

Dialog:DeleteChar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Você excluiu \"%s\" da sua conta.", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1][0] = 0;

        ShowCharacterMenu(playerid);
	}
	return 1;
}

Dialog:DeleteCharacter(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Você excluiu \"%s\" da sua conta.", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1][0] = 0;

        for (new i = 50; i < 58; i ++) {
        	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		PlayerData[playerid][pDisplayStats] = false;
		CancelSelectTextDraw(playerid);
	}
	return 1;
}
Dialog:CreateChar(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return PlayerData[playerid][pCharacter] = 0;

	else if (isnull(inputtext) || strlen(inputtext) > 20)
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Criar Personagem", "Digite o nome de seu novo personagem abaixo:\n\nAviso: Seu nome deve estar no formato Nome_SobreNome e não exceder 20 caracteres.", "Criar", "Cancelar");

	else if (!IsValidRoleplayName(inputtext))
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Criar Personagem", "Error: Você digitou um nome roleplay inválido.\n\nDigite o nome de seu novo personagem abaixo:\n\nAviso: Seu nome deve estar no formato Nome_SobreNome e não exceder 20 caracteres", "Criar", "Cancelar");

	else
	{
	    static
	        query[128];

		format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", inputtext);
		mysql_tquery(g_iHandle, query, "OnCharacterCheck", "ds", playerid, inputtext);
	}
	return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    PlayerData[playerid][pGender] = listitem + 1;

	    switch (listitem) {
	        case 0: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Genero:~w~ Masculino");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
	        case 1: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Genero:~w~ Feminino");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 233);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
		}
		PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
		SetTimerEx("SelectTD", 200, false, "d", playerid);
	}
	else SetTimerEx("SelectTD", 200, false, "d", playerid);
	return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			iDay,
			iMonth,
			iYear,
			str[64];

	    static const
	        arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	    if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Data de nascimento", "Error: Formato especificado inválido!\n\nDigite sua data de nascimento abaixo (DD/MM/YYYY):", "Enviar", "Cancelar");
		}
		else if (iYear < 1900 || iYear > 2015) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Data de nascimento", "Error: Ano inválido!\n\nDigite sua data de nascimento abaixo (DD/MM/YYYY):", "Enviar", "Cancelar");
		}
		else if (iMonth < 1 || iMonth > 12) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Data de nascimento", "Error: Mês inválido!\n\nDigite sua data de nascimento abaixo (DD/MM/YYYY):", "Enviar", "Cancelar");
		}
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Data de nascimento", "Error: Dia inválido!\n\nDigite sua data de nascimento abaixo (DD/MM/YYYY):", "Enviar", "Cancelar");
		}
		else {
		    format(PlayerData[playerid][pBirthdate], 24, inputtext);

		    format(str, sizeof(str), "~r~Nascimento:~w~ %s", inputtext);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][15], str);
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new str[64];

	    if (isnull(inputtext) || strlen(inputtext) > 32) {
	        Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origem", "Por favor, indique a origem geográfica do seu personagem abaixo:", "Selecionar", "Cancelar");
		}
		else for (new i = 0, len = strlen(inputtext); i != len; i ++) {
		    if ((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
				continue;

			else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origem", "Error: Somente letras os números não são aceitos na origem.\n\nPor favor, indique a origem geográfica do seu personagem abaixo:", "Selecionar", "Cancelar");
		}
		format(PlayerData[playerid][pOrigin], 32, inputtext);

  		format(str, sizeof(str), "~r~Origem:~w~ %s", inputtext);
  		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][17], str);
	}
	return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Insira A Nova Senha", "Digite sua nova senha abaixo.\n\nNote: Por favor, use uma senha forte e segura para segurança.", "Mudar", "Cancelar");

		static
		    buffer[129],
		    query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "UPDATE `accounts` SET `Password` = '%s' WHERE `Username` = '%s'", buffer, PlayerData[playerid][pUsername]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Você alterou sua senha.");
	}
	return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return cmd_mudarsenha(playerid, "\1");

		static
		    buffer[129],
			query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "SELECT `Password` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_PASS);
		
	}
	return 1;
}

stock BC_MoneyControl(amount)
{
	BancoCentral_Dinheiro = BancoCentral_Dinheiro + amount;

	BancoCentral_Save();

	return 0;
}
CMD:entrar(playerid, params[])
{
	static
 		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
 	{
  		if (HouseData[id][houseLocked])
    	return SendErrorMessage(playerid, "Você não pode entrar em uma casa trancada.");

		SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);
		SetPlayerInterior(playerid, HouseData[id][houseInterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);
		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = HouseData[id][houseID];

		TogglePlayerControllable(playerid,0);
		SetTimerEx("CongelarPlayer",3 * 1000,false,"i",playerid);
		return 1;
	}
	
	if ((id = Business_Nearest(playerid)) != -1)
 	{
  		if (BusinessData[id][bizLocked])
    		return SendErrorMessage(playerid, "Este negócio está fechado pelo proprietário.");

		SetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

		TogglePlayerControllable(playerid,0);
		SetTimerEx("CongelarPlayer",3 * 1000,false,"i",playerid);

		if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
  			SendClientMessage(playerid, COLOR_DARKBLUE, BusinessData[id][bizMessage]);
		}
		return 1;
	}
	
	if ((id = Entrance_Nearest(playerid)) != -1)
 	{
  		if (EntranceData[id][entranceLocked])
    	return SendErrorMessage(playerid, "Esta entrada está trancada no momento.");
		
			if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			else
			    SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];

            TogglePlayerControllable(playerid,0);
			SetTimerEx("CongelarPlayer",3 * 1000,false,"i",playerid);
			return 1;
	}

	return 1;
}

CMD:sair(playerid, params[])
{
	static
 		id = -1;

	if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	{
		SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

		SetPlayerInterior(playerid, HouseData[id][houseExterior]);
		SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pHouse] = -1;
		return 1;
	}
	

	if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
 	{
		SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

		SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
		SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pBusiness] = -1;
		return 1;
	}

	if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
 	{
  		if (EntranceData[id][entranceCustom])
			SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		else
   			SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

		SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);

		TogglePlayerControllable(playerid,0);
		SetTimerEx("CongelarPlayer",3 * 1000,false,"i",playerid);
			return 1;
	}

	return 1;
}

CMD:setpos(playerid, params[])
{

	if(PlayerData[playerid][pAdmin] >= 9)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "USE: /setpos [coordenada x] [coordenada y] [coordenada z] [interior]");
		SendClientMessageEx(playerid, COLOR_WHITE, "SERVER: Você foi teletransportado para as coordenadas estabelecidas.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
return 1;
}

CMD:dash(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 9) return SendClientMessage(playerid, COLOR_RED, "Erro: Você não tem permissão para usar este comando.");
    
    new Float: fX, Float: fY, Float: fZ, Float: fA;
    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);
    fX += (2.0 * floatsin(-fA, degrees));
    fY += (2.0 * floatcos(-fA, degrees));
    SetPlayerPos(playerid, fX, fY, fZ);

    return 1;
}

CMD:b(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [local OOC]");
	if (strlen(params) > 64)
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_GREY, "(( {FF0000}%s{FAFAFF} [%d]: %.64s", PlayerData[playerid][pNomeOOC], playerid, params);
	    	SendNearbyMessage(playerid, 20.0, COLOR_GREY, "{FAFAFF}...%s ))", params[64]);
	        return 1;
		}
	    SendNearbyMessage(playerid, 20.0, COLOR_GREY, "(( %s [%d]: %.64s", ReturnName(playerid, 0), playerid, params);
	    SendNearbyMessage(playerid, 20.0, COLOR_GREY, "...%s ))", params[64]);
	}
	else
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_GREY, "(( {FF0000}%s{FAFAFF} [%d]: %s ))", PlayerData[playerid][pNomeOOC], playerid, params);
			return 1;
		}
	    SendNearbyMessage(playerid, 20.0, COLOR_GREY, "(( %s [%d]: %s ))", ReturnName(playerid, 0), playerid, params);
	}
	return 1;
}

CMD:me(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [açao]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);
	}

	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/do [descrição]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %.64s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s (( %s ))", params[64], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s (( %s ))", params, ReturnName(playerid, 0));
	}

	return 1;
}

CMD:ame(playerid, params[])
{
	static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ame [açao]");

	format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);
	return 1;
}

CMD:ado(playerid, params[])
{
    static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ado [descrição]");

	format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s (( %s ))", params, ReturnName(playerid, 0));
	return 1;
}

CMD:g(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(g)rita [texto mensagem]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s Grita: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "...%s!", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, "%s Grita: %s!", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:baixo(playerid, params[])
{


	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/baixo [texto mensagem]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[Baixo] %s diz: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[Baixo] %s diz: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:ooc(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
        return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");
		
	if (g_StatusOOC && PlayerData[playerid][pAdmin] < 2)
		return SendErrorMessage(playerid, "O administrador, desabilitou o CHAT OOC.");

	if (isnull(params))
 		return SendSyntaxMessage(playerid, "/o [global OOC]");

	if (PlayerData[playerid][pDisableOOC])
 		return SendErrorMessage(playerid, "O Chat OOC está desativado.");

	if (strlen(params) > 64)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xAAC4E5FF, "(( [OOC] %s: %.64s", PlayerData[playerid][pNomeOOC], params);
		    SendClientMessageEx(i, 0xAAC4E5FF, "...%s ))", params[64]);
		}
	}
	else
	{
    	foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
			SendClientMessageEx(i, 0xAAC4E5FF, "(( [OOC] %s: %s ))", PlayerData[playerid][pNomeOOC], params);
		}
	}
	return 1;
}
CMD:anrp(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
        return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (isnull(params))
 		return SendSyntaxMessage(playerid, "/anrp [Anúncio RP]");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) {
			SendClientMessageEx(i, 0xFF0000FF, "**ANRP: %.64s", params);
		    SendClientMessageEx(i, 0xFF0000FF, "...%s", params[64]);
		}
	}
	else
	{
    	foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
			SendClientMessageEx(i, 0xFF0000FF, "**ANRP: %s", params);
		}
	}
	return 1;
}

CMD:megafone(playerid, params[])
	return cmd_m(playerid, params);

CMD:gritar(playerid, params[])
	return cmd_g(playerid, params);

CMD:ajuda(playerid, params[])
{
    #pragma unused params
	if(IsPlayerConnected(playerid))
	{
    	new help[] = "Conta\nGeral\nVeiculo\nCasa\nNegocios\nFacção\nTrabalho\nProsegur";
    	Dialog_Show(playerid, HELP_MENU, DIALOG_STYLE_LIST, "MC:RP", help, ">", "Sair");
	}
	return 1;
}
CMD:aa(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin] && !PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Você não é um Administrador.");

    if (PlayerData[playerid][pTester])
    {
        SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
        SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORTER]: {FFFFFF} /a, /spec, /ajail, /aojail, /mutar, /desmutar.");
        SendClientMessage(playerid, COLOR_YELLOW, "[SUPPORTER]: {FFFFFF} /ah, /dh, /kickar, /ir, /spec.");
        SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 1)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 1]: {FFFFFF} /atrabalhar, /ban, /skin, /arreforco, /congelar, /descongelar");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 1]: {FFFFFF} /liberarajail");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 1]: {FFFFFF} /respawncar");
	    SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 2)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 2]: {FFFFFF} /respawn, /avisar, /verstatus, /atirador, /trazer, /setinterior, /setvw.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 2]: {FFFFFF} /enviarpara, /limparchat, /spawn, /reviver, /mascarados, /trazerveiculo, /irveiculo.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 2]: {FFFFFF} /afalar, /armas.");
	    SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
 	}
	if (PlayerData[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 3]: {FFFFFF} /restaurarfs, /togooc, /setarvida, /setarcolete, /resetweps.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 3]: {FFFFFF} /entrarveiculo, /respawnperto, /flipcar, /tapa, /destruirveh, /vidatodos.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 3]: {FFFFFF} /atunar, /respawncars, /acorveiculo, /adestruirbox.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 3]: {FFFFFF} /arastrearnumero, /listaavisados, /areparar.");
	    SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 4)
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 4]: {FFFFFF} /baninfo, /setnome, /asetarfaccao, /asetarcargo, /esconder, /destruiritem, /setarlider");
        SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 4]: {FFFFFF} /avecasa, /avenegocio, /jetpack, /setfuel, /aceitarnome, /recusarnome.");
        SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 5)
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[Game Admin 5]: {FFFFFF} /limparinventario, /limparavisos");
        SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 6)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Head Admin]: {FFFFFF} /listanegra, /desbanir, /getip.");
	    SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 7)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Faction Team]:{FFFFFF} /salvarcontas, /CRIARfaccao, /EDITARfaccao, /asetarfaccao, /asetarcargo.");
        SendClientMessage(playerid, COLOR_YELLOW, "[Faction Team]:{FFFFFF} /facmod, /setararma, /deletarconta, /vercasa, /deletarpersonagem.");
        SendClientMessage(playerid, COLOR_YELLOW, "[Faction Team]:{FFFFFF} /destruiritem, /criarrack, /editarrack, /adestruirrack, /deletar ");
        SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 8)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Chefe Admin]:{FFFFFF} /criarcasa, /editarcasa, /criarportao, /editarportao, /criarcarro, /negocioestado.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Chefe Admin]:{FFFFFF} /destruircarro, /editarentrada, /setaradmin, /setarplayer.");
        SendClientMessage(playerid, COLOR_YELLOW, "[Chefe Admin]:{FFFFFF} /criarprisao, /editarcarro");
        SendClientMessage(playerid, COLOR_YELLOW, "[Chefe Admin]:{FFFFFF} /criardetector, /criaremprego, /criarlixo ");
        SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	if (PlayerData[playerid][pAdmin] >= 9)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[Developer]:{FFFFFF} /setaritem.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Developer]:{FFFFFF} /setardinheiro, /darcarro, /facmod, /setararma, /gmx /gmx");
	    SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	
	if (PlayerData[playerid][pAdmin] >= 10)
	{
     	SendClientMessage(playerid, COLOR_YELLOW, "[Developer]: {FFFFFF} /criarempresa, /criarentrada, /criarbomba, /criaremprego.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Developer]: {FFFFFF} /criaratm, /criarvendedor, /editarempresa, /adinamico.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Developer]: {FFFFFF} /setbomba");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Developer]: {FFFFFF} /criarcamera, /destruircamera.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Developer]: {FFFFFF} /adestruirplanta");
	    SendClientMessage(playerid, COLOR_DARKBLUE, "¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯");
	}
	return 1;
}

CMD:mudarsenha(playerid, params[])
{
	Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Alterar A Senha", "Digite sua senha atual abaixo:", "Enviar", "Cancelar");
	return 1;
}

CMD:ultimoacesso(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/ultimoacesso [username]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnLoginDate", "ds", playerid, params);

 	return 1;
}
CMD:farol(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Você não está em um veículo.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Você não é o motorista.");

    if(bateria[vehicleid] == 1)
	    return SendErrorMessage(playerid, "Você não está conseguindo ligar os farois, pode ser a bateria.");
    if(SemBateria[vehicleid] == 1)
	    return SendErrorMessage(playerid, "Você não consegue ligar os farois, pois o veículo está sem bateria.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        PlayerPlaySound(playerid, 1063, 0.0, 0.0, 0.0);
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    PlayerPlaySound(playerid, 1063, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}


CMD:capo(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "Este veículo não tem um capo.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abriu o capô do veículo.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Voce ~g~abriu~w~ o capo!");
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s fechou o capô do veículo.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Voce ~g~fechou~w~ o capo!");
		}
	    return 1;
	}
	SendErrorMessage(playerid, "Você não está no alcance de qualquer veículo.");
	return 1;
}
CMD:usaritem(playerid, params[])
{
	static
	    type[24];

	if (sscanf(params, "s[24]", type))
	{
	    SendSyntaxMessage(playerid, "/usaritem [item]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ITENS]:{FFFFFF} distintivo, colete, chapeu, coldre, bigode, coletetransito, oculos, retirarobjetos.");
	    return 1;
	}
	if (!strcmp(type, "distintivo", true))
	{
    if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19775, 1);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu distintivo!");
	}
	else if (!strcmp(type, "colete", true))
	{
		if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19142, 1);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu colete!");
	}
	else if (!strcmp(type, "cape", true))
	{
	    if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19521, 2);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu chapéu!");
	}
	else if (!strcmp(type, "chapeu", true))
	{
	    if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19161, 2);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu chapéu!");
	}
	else if (!strcmp(type, "coldre", true))
	{
		if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19773, 8);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu coldre!");
	}
	else if (!strcmp(type, "bigode", true))
	{
		if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19351, 2);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu bigode!");
	}
	else if (!strcmp(type, "coletetransito", true))
	{
		if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19904, 1);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu colete de tránsito!");
	}
	else if (!strcmp(type, "oculos", true))
	{
		if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	SetPlayerAttachedObject(playerid, 0, 19138, 1);
    	EditAttachedObject(playerid, 0);
    	SendClientMessage(playerid, COLOR_WHITE, "Você pegou seu óculos!");
	}
	else if (!strcmp(type, "retirarobjetos", true))
	{
		if (GetFactionType(playerid) != FACTION_PCESP)
			return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    	for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
    	{
        	if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
   		}
	}
	return 1;
}
CMD:janelas(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new string[124];
	new driver, passenger, backleft, backright;

	if (!IsWindowedVehicle(vehicleid))
		return SendErrorMessage(playerid, "Este veículo não possui janelas.");

	switch (CoreVehicles[vehicleid][vehWindowsDown])
	{
	    case false:
	    {
	        CoreVehicles[vehicleid][vehWindowsDown] = true;
	        ShowPlayerFooter(playerid, "Voce ~g~abaixou as janelas~w~ do veiculo!");
	        format(string, sizeof(string), "** %s pressiona um botão e abaixa as janelas do veículo.", ReturnName(playerid, 0));
 			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
			SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
		}
		case true:
		{
		    CoreVehicles[vehicleid][vehWindowsDown] = false;
		    ShowPlayerFooter(playerid, "Voce ~r~fechou as janelas~w~ do veiculo!");
		    format(string, sizeof(string), "** %s pressiona um botão e fecha as janelas do veículo.", ReturnName(playerid, 0));
 			SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
 			SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), backright, passenger, backleft, backright);
 			GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
		}
	}
	return 1;
}
CMD:a(playerid, params[])
{
	if (!PlayerData[playerid][pTester] && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Você não é um administrador.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/a [text]");

    new admin[20];
    if(PlayerData[playerid][pTester] == 1)
    {
		admin = "Tester";
	}
    if(PlayerData[playerid][pAdmin] == 1)
    {
		admin = "GM 1";
	}
	if(PlayerData[playerid][pAdmin] == 2)
	{
		admin = "GM 2";
	}
	if(PlayerData[playerid][pAdmin] == 3)
	{
		admin = "GM 3";
	}
	if(PlayerData[playerid][pAdmin] == 4)
	{
		admin = "GM 4";
	}
	if(PlayerData[playerid][pAdmin] == 5)
	{
		admin = "GM 5";
	}
	if(PlayerData[playerid][pAdmin] == 6)
	{
		admin = "Lead Admin";
	}
	if(PlayerData[playerid][pAdmin] == 7)
	{
		admin = "Head Supervisory";
	}
	if(PlayerData[playerid][pAdmin] == 8)
	{
		admin = "Chefe Administração";
	}
	if(PlayerData[playerid][pAdmin] == 9)
	{
		admin = "Scripter";
	}
	if (strlen(params) > 64) {
	    SendAdminAlert(COLOR_ADMINCHAT, "** %s [%s] %s: %.64s", admin, PlayerData[playerid][pNomeOOC], ReturnName(playerid, 0), params);
	    SendAdminAlert(COLOR_ADMINCHAT, "...%s **", params[64]);
	}
	else {
	    SendAdminAlert(COLOR_ADMINCHAT, "** %s [%s] %s: %s **", admin, PlayerData[playerid][pNomeOOC], ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:atrabalhar(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (!PlayerData[playerid][pAdminDuty])
	{
		SetPlayerColor(playerid, 0xFF0000FF);

		PlayerData[playerid][pAdminDuty] = 1;
		SetPlayerHealth(playerid, 9999999.0);
	}
	else
	{
	    SetPlayerColor(playerid, DEFAULT_COLOR);

		PlayerData[playerid][pAdminDuty] = 0;
		SetPlayerHealth(playerid, 100.0);
		SendServerMessage(playerid, "Você não está mais no dever de administrador.");
	}
	return 1;
}

CMD:spec(playerid, params[])
{
	new userid;

 	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (!isnull(params) && !strcmp(params, "off", true))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			return SendErrorMessage(playerid, "Você não está espiando qualquer jogador.");

	    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
	    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

	    SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
	    TogglePlayerSpectating(playerid, false);

	    return SendServerMessage(playerid, "Você não está mais no modo espectador.");
	}
	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/spec [playerid/nome] - \"/spec off\" para parar de espiar.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	}
	SetPlayerInterior(playerid, GetPlayerInterior(userid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));

	TogglePlayerSpectating(playerid, 1);

	if (IsPlayerInAnyVehicle(userid))
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));

	else
		PlayerSpectatePlayer(playerid, userid);

	SendServerMessage(playerid, "Você agora está espiando a %s (ID: %d).", ReturnName(userid, 0), userid);
	PlayerData[playerid][pSpectator] = userid;

	return 1;
}

CMD:ajail(playerid, params[])
{
	static
		userid,
		minutes,
		reason[128];

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	    return SendSyntaxMessage(playerid, "/ajail [playerid/nome] [minutos] [razão]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (minutes < 1)
		return SendErrorMessage(playerid, "Você não pode encarcerar um jogador por menos de 0 minutos.");

	if (minutes > 30 && PlayerData[playerid][pAdmin] <= 1 && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Supporters NÃO PODE colocar jogadores mais de 30 minutos na prisão .");

	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

    SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3); // cadeia interior

	SetPlayerVirtualWorld(userid, (playerid + 100));
 	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);

    ShowHungerTextdraw(userid, 0);
	ResetPlayer(userid);

	PlayerData[userid][pJailTime] = minutes * 60;
	PlayerData[userid][pPrisoned] = 0;

    SendAdminAction(playerid, "Você prendeu %s por %d minutos (motivo: %s).", ReturnName(userid, 0), minutes, reason);
	SendAdminAction(userid, "%s lhe prendeu por %d minutos (motivo: %s).", PlayerData[playerid][pNomeOOC], minutes, reason);

    SendAdminAction(playerid, "Aplicou ajail em %s por %d minutos (motivo: %s).", ReturnName(userid, 0), minutes, reason);
	SendAdminAction(userid, "%s lhe prendeu por %d minutos (motivo: %s).", PlayerData[playerid][pNomeOOC], minutes, reason);
	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s aplicou ajail em %s por %d minutos motivo: %s", PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), minutes, reason);
	Log_Write("logs/jail_log.txt", "[%s] %s aplicou ajail em %s por %d minutos, motivo: %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), minutes, reason);
	return 1;
}
CMD:liberarajail(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/liberarajail [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pJailTime])
	    return SendErrorMessage(playerid, "Você não pode liberar um jogador que não está na cadeia.");

	PlayerData[userid][pJailTime] = 1;

	SendAdminAction(playerid, "Você liberou a %s da cadeia.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te liberou da cadeia.", PlayerData[playerid][pNomeOOC]);
	Log_Write("logs/jail_log.txt", "[%s] %s libertou %s da prisão.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}
CMD:tapa(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/tapa [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(userid, x, y, z);
	SetPlayerPos(userid, x, y, z + 5);

	PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s golpeou a %s.", PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}

CMD:kickar(playerid, params[])
{
	static
	    userid,
	    reason[128];

    if (PlayerData[playerid][pAdmin] <= 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/kickar [playerid/nome] [razão]");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "O jogador especificado tem autoridade superior.");

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s kickou a %s por: %s.", PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), reason);
	Log_Write("logs/kickar_log.txt", "[%s] %s kickou a %s por: %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), reason);

	KickEx(userid);
	return 1;
}

CMD:mutar(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/mutar [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode silenciar-se!");

	if (PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "O jogador que você está tentando silenciar já está mudo.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "O jogador especificado tem autoridade superior.");

	PlayerData[userid][pMuted] = 1;

	SendAdminAction(playerid, "Você mutou a %s do uso de texto e comandos.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te mutou de usar texto e comandos.", PlayerData[playerid][pNomeOOC]);

	return 1;
}

CMD:desmutar(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/desmutar [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "O jogador que você está desmutar não esta mutado.");

	PlayerData[userid][pMuted] = 0;

	SendAdminAction(playerid, "Você desmutou a %s do uso de texto e comandos.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te desmutou de usar texto e comandos.", PlayerData[playerid][pNomeOOC]);

	return 1;
}

CMD:congelar(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/congelar [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	TogglePlayerControllable(userid, 0);
	SendAdminAction(playerid, "Você congelou os movimentos de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:descongelar(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/descongelar [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	TogglePlayerControllable(userid, 1);
	SendAdminAction(playerid, "Você descongelou os movimentos de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:reviver(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/reviver [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Você não pode reviver um jogador que não está ferido.");

	ShowHungerTextdraw(userid, 1);
	PlayerData[userid][pInjured] = 0;

	ClearAnimations(userid);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);

	SendAdminAction(playerid, "Você reviveu o personagem %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s reviveu seu personagem.", PlayerData[playerid][pNomeOOC]);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s reviveu o %s.", PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}
CMD:respawn(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/respawn [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "Você não pode respawn um jogador que não está spwanado.");

	RespawnPlayer(userid);

	SendAdminAction(playerid, "Você respawned a %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Você foi respawned por %s.", PlayerData[playerid][pNomeOOC]);

	return 1;
}

CMD:restaurarfs(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/restaurarfs [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	PlayerData[userid][pHunger] = 100;
	PlayerData[userid][pThirst] = 100;

	SendAdminAction(playerid, "Você encheu a fome e a sede de %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Sua fome e sede foi abastecida por %s.", PlayerData[playerid][pNomeOOC]);
	return 1;
}
CMD:skin(playerid, params[])
{
	static
	    userid,
		skinid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, skinid))
	    return SendSyntaxMessage(playerid, "/skin [playerid/nome] [skin id]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (skinid < 0 || skinid > 30000)
	    return SendErrorMessage(playerid, "Skin Invalida. Skins são de 0 a 311.");

	SetPlayerSkin(userid, skinid);
	new skin = PlayerData[userid][pSkin];
    PlayerTextDrawSetPreviewModel(userid, PlayerData[userid][pTextdraws][84], skin);
    PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][84]);
	PlayerData[userid][pSkin] = skinid;

	SendAdminAction(playerid, "Você mudou a skin de %s para ID: %d.", ReturnName(userid, 0), skinid);
	SendAdminAction(userid, "%s mudou sua skin para a ID: %d.", PlayerData[playerid][pNomeOOC], skinid);

	return 1;
}

CMD:ban(playerid, params[])
{
	static
	    userid,
		reason[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/ban [playerid/nome] [razão]");

    if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode se banir do servidor.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "O jogador especificado tem autoridade superior.");

 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Banido", "Sua conta foi banida do servidor.\n\nUsuario: %s\nRazão: %s\nAdministrador que baniu: %s\n\nPress F8 para tirar um screenshot e solicitar um ban appeal em nossos fórum.", "Fechar", "", PlayerData[userid][pUsername], reason, ReturnName(playerid, 0));

    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s foi banido por %s motivo: %s.", ReturnName(userid, 0),PlayerData[playerid][pNomeOOC], reason);
	Log_Write("logs/ban_log.txt", "[%s] %s foi banido por %s motivo: %s.", ReturnDate(), ReturnName(userid, 0), PlayerData[playerid][pNomeOOC], reason);

	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
	KickEx(userid);

	return 1;
}
CMD:stats(playerid, params[])
{
	ShowStatsTextForPlayer(playerid, playerid);
	//ShowStatsForPlayer(playerid, playerid);
	return 1;
}
CMD:verstats(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/verstats [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Esse jogador não está logado ainda.");

	ShowStatsTextForPlayer(playerid, userid);
	return 1;
}
CMD:acessorios(playerid, params[])
{
	new
	    string[128];

	format(string, sizeof(string), "Óculos: %s\nChapéu: %s\nBandana: %s", (PlayerData[playerid][pGlasses]) ? ("Sim") : ("Nao"), (PlayerData[playerid][pHat]) ? ("Sim") : ("Nao"), (PlayerData[playerid][pBandana]) ? ("Sim") : ("Nao"));
	Dialog_Show(playerid, Accessory, DIALOG_STYLE_LIST, "Acessórios", string, "Selecionar", "Cancelar");

	return 1;
}

CMD:atirador(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/atirador [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (PlayerData[userid][pLastShot] == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador não tem sido baleado uma vez que se juntou.");

    SendServerMessage(playerid, "%s levou o ultimo tiro de %s (%s).", ReturnName(userid, 0), ReturnName(PlayerData[userid][pLastShot]), GetDuration(gettime() - PlayerData[userid][pShotTime]));
    return 1;
}
		
CMD:ir(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (PlayerData[playerid][pAdmin] <= 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", id))
 	{
	 	SendSyntaxMessage(playerid, "/ir [jogador ou nome]");
		SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} spawn, prisao, casa, negocio, entrada, emprego, portao, interior, letreiro");
		return 1;
	}
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    SendSyntaxMessage(playerid, "/ir [jogador ou nome]");
			SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} spawn, prisao, casa, negocio, entrada, emprego, portao, interior, letreiro");
			return 1;
	    }
	    if (!strcmp(type, "spawn", true)) {
	        SetDefaultSpawn(playerid);

	        return SendServerMessage(playerid, "You have teleported to the default spawn.");
		}
		else if (!strcmp(type, "prisao", true))
		{
	        SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
	        SetPlayerFacingAngle(playerid, 180.0000);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "Você foi teletransportado para o estabelecimento prisional.");
		}
		else if (!strcmp(type, "casa", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [casa] [casa ID]");

			if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			    return SendErrorMessage(playerid, "Você especificou uma casa ID inválida.");

		    SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		    SetPlayerInterior(playerid, HouseData[id][houseExterior]);

			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
		    SendServerMessage(playerid, "Você foi teletransportado para a casa ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "negocio", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [negocio] [negocio ID]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
			     return SendErrorMessage(playerid, "Você especificou um negocio ID inválida.");

		    SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		    SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
		    SendServerMessage(playerid, "Você foi teletransportado para o negocio ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "entrada", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [entrada] [entrada ID]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return SendErrorMessage(playerid, "Você especificou uma entrada ID inválida.");

		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		    SendServerMessage(playerid, "Você foi teletransportado para a entrada ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "emprego", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [emprego] [emprego ID]");

			if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
			    return SendErrorMessage(playerid, "Você especificou um emprego ID inválido.");

		    SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
		    SetPlayerInterior(playerid, JobData[id][jobInterior]);

			SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
		    SendServerMessage(playerid, "Você foi teletransportado para o emprego ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "portao", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [portao] [portao ID]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return SendErrorMessage(playerid, "Você especificou um portao ID inválido.");

		    SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
		    SendServerMessage(playerid, "Você foi teletransportado para o portao ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1536];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Teleporte: Interior Lista", str, "Selecionar", "Cancelar");
		    return 1;
		}
	    else return SendErrorMessage(playerid, "Você especificou um jogador inválido.");
	}
	if (!IsPlayerSpawned(id))
		return SendErrorMessage(playerid, "Você não pode se teletransportar para um jogador que não está spawned.");

	SendPlayerToPlayer(playerid, id);

	format(string, sizeof(string), "Voce se ~y~teleportou~w~ para %s.", ReturnName(id, 0));
	ShowPlayerFooter(playerid, string);

	return 1;
}
CMD:enviar(playerid, params[])
{
	static
	    userid,
	    type[24];

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/enviar [player] [nome]");
		SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} spawn, prisao");
		return 1;
	}
    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

 	if (!strcmp(type, "spawn", true))
	 {
  		SetDefaultSpawn(userid);

		SendServerMessage(playerid, "Você teleportou %s para o spawn padrão.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s te teleportou para o spawn padrão.", PlayerData[playerid][pNomeOOC]);
	}
	else if (!strcmp(type, "prisao", true))
	{
		SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
  		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
  		SetPlayerVirtualWorld(playerid, 0);

		SendServerMessage(playerid, "Você teleportou %s para a prisao.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s te teleportou para a prisao.", PlayerData[playerid][pNomeOOC]);
	}
	return 1;
}

CMD:trazer(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/trazer [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!IsPlayerSpawned(userid))
		return SendErrorMessage(playerid, "Você não pode teletransporta um jogador que não está spwaned.");

	SendPlayerToPlayer(userid, playerid);
	SendServerMessage(playerid, "Você teletransportou %s até você.", ReturnName(userid, 0));
	return 1;
}

CMD:inv(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode abrir seu inventário agora.");

	if (PlayerData[playerid][pJailTime] > 0)
		return SendErrorMessage(playerid, "Você não pode abrir seu inventário enquanto preso.");

	OpenInventory(playerid);
	return 1;
}

CMD:inv2(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode abrir seu inventário agora.");

	if (PlayerData[playerid][pJailTime] > 0)
		return SendErrorMessage(playerid, "Você não pode abrir seu inventário enquanto preso.");

	OpenInventory2(playerid);
	return 1;
}


CMD:setinterior(playerid, params[])
{
	static
		userid,
	    interior;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, interior))
		return SendSyntaxMessage(playerid, "/setinterior [playerid/nome] [interior]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	SetPlayerInterior(userid, interior);
	PlayerData[userid][pInterior] = interior;

	SendServerMessage(playerid, "Você setou a %s o interior %d.", ReturnName(userid, 0), interior);
	return 1;
}

CMD:setvw(playerid, params[])
{
	static
		userid,
	    world;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, world))
		return SendSyntaxMessage(playerid, "/setvw [playerid/name] [world]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	SetPlayerVirtualWorld(userid, world);
	PlayerData[userid][pWorld] = world;

    SendServerMessage(playerid, "Você setou a %s o virtual world %d.", ReturnName(userid, 0), world);
	return 1;
}

CMD:afalar(playerid, params[])
{
	static
	    userid,
	    text[128];

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/afalar [playerid/nome] [messagem]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	SendClientMessageEx(userid, COLOR_YELLOW, "[ADMIN]: %s diz: %s", PlayerData[playerid][pNomeOOC], text);

	if (playerid != userid) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "[ADMIN]: %s diz: %s", PlayerData[playerid][pNomeOOC], text);
	}
	return 1;
}

CMD:enviarpara(playerid, params[])
{
	static
	    userid,
	    targetid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "uu", userid, targetid))
	    return SendSyntaxMessage(playerid, "/enviarpara [playerid/nome] [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Os usuários especificado(s) não está conectado.");

	SendPlayerToPlayer(userid, targetid);

	SendServerMessage(playerid, "Você teletransportou %s para %s.", ReturnName(userid, 0), ReturnName(targetid));
	SendServerMessage(userid, "%s teletransportou %s até você.", PlayerData[playerid][pNomeOOC], ReturnName(targetid));
	return 1;
}

CMD:desbanir(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");



	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/desbanir [usuario]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Use \"/username\" para resolver o nome de utilizador do nome de um personagem.");
	}
	else
	{
	    Blacklist_Remove(params);

	    SendServerMessage(playerid, "Você desbaniu \"%s\" com sucesso.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s desbaniu a conta de \"%s\".", PlayerData[playerid][pNomeOOC], params);
		Log_Write("logs/ban_log.txt", "[%s] %s desbaniu a conta de \"%s\".", ReturnDate(), PlayerData[playerid][pNomeOOC], params);
	}
	return 1;
}

CMD:listanegra(playerid, params[])
{
	static
		type[24];

    if (PlayerData[playerid][pAdmin] < 6)
    	return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "s[24]s[128]", type, params))
 	{
	 	SendSyntaxMessage(playerid, "/listanegra [nome] [parameter]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} ban, banip, unbanip");
	 	return 1;
	}
	if (!strcmp(type, "ban", true))
	{
	    if (!IsValidPlayerName(params))
	        return SendErrorMessage(playerid, "O nome que você colocou não está no formato correto.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params) || !strcmp(ReturnName(i), params, true)) {
		    KickEx(i);
		}
		Blacklist_Add("0.0.0.0", params, PlayerData[playerid][pUsername], "Nome Ban (/listanegra)");

	    SendServerMessage(playerid, "Você baniu \"%s\" com sucesso.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s baniu a \"%s\".", PlayerData[playerid][pNomeOOC], params);

	    Log_Write("logs/ban_log.txt", "[%s] %s baniu a \"%s\".", ReturnDate(), PlayerData[playerid][pNomeOOC], params);
	}
	else if (!strcmp(type, "banip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "O endereço IP que você colocou não está no formato correto.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], params)) {
		    KickEx(i);
		}
		Blacklist_Add(params, "", PlayerData[playerid][pUsername], "IP Ban (/listanegra)");

	    SendServerMessage(playerid, "Você baniu o IP \"%s\" com sucesso.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s baniu o IP \"%s\".", PlayerData[playerid][pNomeOOC], params);

	    Log_Write("logs/ban_log.txt", "[%s] %s baniu o IP \"%s\".", ReturnDate(), PlayerData[playerid][pNomeOOC], params);
	}
	else if (!strcmp(type, "unbanip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "O endereço IP que você colocou não está no formato correto.");

		Blacklist_RemoveIP(params);

	    SendServerMessage(playerid, "Você desbaniu o IP \"%s\" com sucesso.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s desbaniu o IP \"%s\".", PlayerData[playerid][pNomeOOC], params);

	    Log_Write("logs/ban_log.txt", "[%s] %s desbaniu o IP \"%s\".", ReturnDate(), PlayerData[playerid][pNomeOOC], params);
	}
	return 1;
}

CMD:getip(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/getip [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	SendServerMessage(playerid, "O IP de %s é %s.", ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:togooc(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (!g_StatusOOC)
	{
	    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s desabilitou o bate-papo OOC global.", PlayerData[playerid][pNomeOOC]);
	    g_StatusOOC = true;
	}
	else
	{
	    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s habilitou o bate-papo OOC global.", PlayerData[playerid][pNomeOOC]);
	    g_StatusOOC = false;
	}
	return 1;
}
CMD:setarvida(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/setarvida [playerid/nome] [quantidade]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	SetPlayerHealth(userid, amount);
	SendServerMessage(playerid, "Você setou a vida de %s para %.2f.", ReturnName(userid, 0), amount);
	Log_Write("logs/vida_log.txt", "[%s] %s setou vida para %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}

CMD:setarcolete(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/setarcolete [playerid/nome] [quantidade]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

    SetPlayerArmour(userid, amount);
	SendServerMessage(playerid, "Você setou o colete de %s para %.2f.", ReturnName(userid, 0), amount);
	return 1;
}

CMD:resetweps(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/resetweps [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	ResetWeapons(userid);
	SendAdminAction(playerid, "Você resetou as armas de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:areparar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (vehicleid > 0 && isnull(params))
	{
		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "Você reparou seu veículo atual.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/areparar [vehicle ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "Você reparou o veículo ID: %d.", vehicleid);
	}
	return 1;
}

CMD:trazerveiculo(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/trazerveiculo [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 2, y - 2, z);

 	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	return 1;
}

CMD:entrarveiculo(playerid, params[])
{
	new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/entrarveiculo [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	seatid = GetAvailableSeat(vehicleid, 0);

	if (seatid == -1)
	    return SendErrorMessage(playerid, "Não há lugares no veiculo para entrar.");

	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:irveiculo(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/irveiculo [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
			return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:respawncar(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/respawncar [veiculo]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "Você respawnou o veículo ID: %d.", vehicleid);

	return 1;
}

CMD:respawncars(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
	    {
	        RespawnVehicle(i);
			count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Não há veículos para respawnar.");

	SendServerMessage(playerid, "Você respawnou %d veículos desocupados.", count);
	return 1;
}
CMD:veh(playerid, params[])
{
	static
	    model[32],
		color1,
		color2;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "s[32]I(-1)I(-1)", model, color1, color2))
	    return SendSyntaxMessage(playerid, "/veh [modelo id/nome] <cor 1> <cor 2>");

	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Modelo Inválido.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:a,
		vehicleid;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = CreateVehicle(model[0], x, y + 2, z, a, color1, color2, 0);

	if (GetPlayerInterior(playerid) != 0)
	    LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	if (GetPlayerVirtualWorld(playerid) != 0)
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	if (IsABoat(vehicleid) || IsAPlane(vehicleid) || IsAHelicopter(vehicleid))
	    PutPlayerInVehicle(playerid, vehicleid, 0);

	ResetVehicle(vehicleid);

	CoreVehicles[vehicleid][vehTemporary] = true;
	SendServerMessage(playerid, "Você criou um %s (%d, %d).", ReturnVehicleModelName(model[0]), color1, color2);
	return 1;
}

CMD:destruirveh(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (!isnull(params) && !strcmp(params, "all", true))
	{
	    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && CoreVehicles[i][vehTemporary])
		{
	        CoreVehicles[i][vehTemporary] = false;

	        DestroyVehicle(i);
	        ResetVehicle(i);
	    }
	    SendServerMessage(playerid, "Você destruiu os veículos temporários.");
	    return 1;
	}
	else if (IsPlayerInAnyVehicle(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    if (CoreVehicles[vehicleid][vehTemporary])
		{
	        CoreVehicles[vehicleid][vehTemporary] = false;
	        DestroyVehicle(vehicleid);

	        ResetVehicle(vehicleid);
	        SendServerMessage(playerid, "Você destruiu o veículo de administração.");
		}
		else
		{
		    SendErrorMessage(playerid, "Você não pode destruir um veículo que não é temporário.");
		}
	}
	return 1;
}
CMD:setararma(playerid, params[])
{
	static
	    userid,
	    weaponid,
	    ammo;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "udI(500)", userid, weaponid, ammo))
	    return SendSyntaxMessage(playerid, "/setararma [playerid/nome] [weaponid] [ammo]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você não pode dar armas para jogadores desconectados.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "Você não pode dar armas para os jogadores não logados.");

	if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
		return SendErrorMessage(playerid, "Você especificou uma arma inválida.");

	GiveWeaponToPlayer(userid, weaponid, ammo);
	SendServerMessage(playerid, "Você deu a %s um/a %s com %d munição.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    Log_Write("logs/setarmas_log.txt", "[%s] %s setou armas para %s id: %s, com %d munição.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s setou armas para o %s.", PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}
CMD:setarplayer(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	static
	    userid,
	    type[16],
	    amount[32];

	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
 	{
	 	SendSyntaxMessage(playerid, "/setarplayer [playerid/name] [nome]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} genero, nascimento, origem, banco, poupanca, fome, sede, horasjogadas");
		SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} emprego, warrants, frequencia");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!strcmp(type, "genero", true))
	{
	    if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [genero] [1: masculino - 2: feminino]");

		PlayerData[userid][pGender] = strval(amount);
		if (PlayerData[userid][pGender] == 1)
			SendServerMessage(playerid, "Você setou a %s o genero masculino.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
			SendServerMessage(playerid, "Você setou a %s o genero feminino.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "nascimento", true))
	{
	    if (isnull(amount) || strlen(amount) > 24)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [nascimento] [data de nascimento]");

		format(PlayerData[userid][pBirthdate], 24, amount);
		SendServerMessage(playerid, "Você setou a %s nascimento para \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "origem", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [origem] [nova origem]");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendServerMessage(playerid, "Você setou a %s a origem para \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "banco", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [banco] [fundo bancario]");

		PlayerData[userid][pBankMoney] = strval(amount);
		SendServerMessage(playerid, "Você setou a %s fundo bancario para %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "poupanca", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [poupanca] [fundos da poupança]");

		PlayerData[userid][pSavings] = strval(amount);
		SendServerMessage(playerid, "Você setou a %s fundos da poupança %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "fome", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [fome] [quantidade]");

		if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "Você não pode especificar um valor inferior a 0 ou acima de 1.000.");

		PlayerData[userid][pHunger] = strval(amount);
		SendServerMessage(playerid, "Você setou a fome de %s para %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "sede", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [sede] [quantidade]");

        if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "Você não pode especificar um valor inferior a 0 ou acima de 1.000.");

		PlayerData[userid][pThirst] = strval(amount);
		SendServerMessage(playerid, "Você setou a sede de %s para %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "horasjogadas", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [horasjogadas] [quantidade]");

		PlayerData[userid][pPlayingHours] = strval(amount);
		SendServerMessage(playerid, "Você setou a horas jogadas de %s para %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
    else if (!strcmp(type, "emprego", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/nome] [emprego] [quantidade]");

		if (strval(amount) < 0 || strval(amount) > 15)
		    return SendErrorMessage(playerid, "Você especificou um ID de trabalho inválido.");

		PlayerData[userid][pJob] = strval(amount);
		SendServerMessage(playerid, "Você setou a %s emprego para %s.", ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob]));
	}
    else if (!strcmp(type, "warrants", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [warrants] [quantidade]");

		PlayerData[userid][pWarrants] = strval(amount);
		SendServerMessage(playerid, "Você setou a %s warrants para %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "frequencia", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setplayer [playerid/name] [frequencia] [radio canal]");

		PlayerData[userid][pChannel] = strval(amount);
		SendServerMessage(playerid, "Você setou a %s radio canal para %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	return 1;
}//////////////////////////////////////// PARA HACKERS /////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

CMD:baninfo(playerid, params[])
{
    static
		string[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/baninfo [nome de usuário]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Use \"/username\" para resolver o nome de utilizador de um personagem.");
	}
	else
	{
	    format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	    mysql_tquery(g_iHandle, string, "OnBanLookup", "ds", playerid, params);
	}
	return 1;
}
CMD:facmod(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/facmod [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (PlayerData[userid][pFactionMod])
	{
	    PlayerData[userid][pFactionMod] = false;

		SendAdminAction(playerid, "Você retirou o %s de moderador de facção.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s te kickou da equipe de moderador de facção.", PlayerData[playerid][pNomeOOC]);
		Log_Write("logs/facmod_log.txt", "[%s][ADMIN:] %s retirou facmod para %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pFactionMod] = true;

        SendAdminAction(playerid, "Você convidou o %s de moderador de facção .", ReturnName(userid, 0));
		SendAdminAction(userid, "%s te convidou a participar da equipe de moderador de facção.", PlayerData[playerid][pNomeOOC]);
		Log_Write("logs/facmod_log.txt", "[%s][ADMIN:] %s setou facmod para %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	}
	return 1;
}

CMD:setnome(playerid, params[])
{
	static
	    userid,
	    newname[24],
		query[128];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/setnome [playerid/nome] [novo nome]");

	if (userid == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Esse jogador ainda não definiu um personagem.");

	if (!IsValidPlayerName(newname))
	    return SendErrorMessage(playerid, "Você especificou um formato de nome inválido.");

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname)) {
	    return SendErrorMessage(playerid, "O nome especificado está em uso.");
	}
	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(newname));
	mysql_tquery(g_iHandle, query, "OnNameChange", "dds", playerid, userid, newname);
    Log_Write("logs/setnome_log.txt", "[%s] %s setou o nome do %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}

CMD:limparchat(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	for (new i = 0; i < 100; i ++) {
	    SendClientMessageToAll(-1, "");
	}
	return 1;
}

CMD:spawn(playerid, params[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		interior;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "dfff", interior, x, y, z))
	    return SendSyntaxMessage(playerid, "/spawn [interior] [x] [y] [z]");

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);

	return 1;
}
CMD:criarcasa(playerid, params[])
{
	static
	    price,
	    id,
	    address[32];

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[32]", price, address))
	    return SendSyntaxMessage(playerid, "/criarcasa [preço] [endereço]");

	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true)) {
	    return SendErrorMessage(playerid, "O endereço \"%s\" está em uso na casa (ID: %d).", address, i);
	}
	id = House_Create(playerid, address, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para casas.");

	SendServerMessage(playerid, "Você criou com sucesso a casa ID: %d.", id);
	return 1;
}

CMD:comprar(playerid, params[])
{
	static
		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
	{
		if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
			return SendErrorMessage(playerid, "Você só pode ter %d casas.", MAX_OWNABLE_HOUSES);

		if (HouseData[id][houseOwner] != 0)
		    return SendErrorMessage(playerid, "Esta casa ja tem Dono.");

		if (HouseData[id][housePrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "Você não tem dinheiro suficiente.");

	    HouseData[id][houseOwner] = GetPlayerSQLID(playerid);

		House_Refresh(id);
		House_Save(id);
		
		Tax_AddMoney(HouseData[id][housePrice]);
	    GiveMoney(playerid, -HouseData[id][housePrice]);
	    SendServerMessage(playerid, "Você comprou a casa no endereço \"%s\" por %s!", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));

		ShowPlayerFooter(playerid, "¡Voce ~g~comprou~w~ uma casa!");
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
	    if (Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES)
			return SendErrorMessage(playerid, "Você só pode ter %d negocios.", MAX_OWNABLE_BUSINESSES);

		if (BusinessData[id][bizOwner] != 0)
		    return SendErrorMessage(playerid, "Este negocio ja tem Dono.");

		if (BusinessData[id][bizPrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "Você não tem dinheiro suficiente.");

	    BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);

		Business_Refresh(id);
		Business_Save(id);

        Tax_AddMoney(BusinessData[id][bizPrice]);
	    GiveMoney(playerid, -BusinessData[id][bizPrice]);
	    SendServerMessage(playerid, "Você comprou a empresa \"%s\" por %s!", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

		ShowPlayerFooter(playerid, "¡Voce ~g~comprou~w~ uma Empresa!");
        if (!Inventory_HasItem(playerid, "Escritura"))
		{
	    	Inventory_Add(playerid, "Escritura", 1581);
	    }
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		if (BusinessData[id][bizLocked] != 0 || !BusinessData[id][bizOwner])
		    return SendErrorMessage(playerid, "¡Esta empresa esta fechado!");

		if (BusinessData[id][bizType] == 5) {
		    Business_CarMenu(playerid, id);
		} else {
			Business_PurchaseMenu(playerid, id);
		}
	}
	return 1;
}
CMD:abandonar(playerid, params[])
{
	static
	    id = -1;

    if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandonar [confirmar]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Você está prestes a abandonar a sua casa, sem reembolso.");
		}
		else if (!strcmp(params, "confirmar", true))
		{
			HouseData[id][houseOwner] = 0;

			House_Refresh(id);
			House_Save(id);

			SendServerMessage(playerid, "Você abandonou sua casa no endereço: %s.", HouseData[id][houseAddress]);
			Log_Write("logs/abandonado_log.txt", "[%s] %s abandonou sua casa ID: %d.", ReturnDate(), ReturnName(playerid), id);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandonar [confirmar]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Você está prestes a abandonar a seu negocio, sem reembolso.");
		}
		else if (!strcmp(params, "confirmar", true))
		{
			BusinessData[id][bizOwner] = 0;

			Business_Refresh(id);
			Business_Save(id);

			SendServerMessage(playerid, "Você abandonou seu negocio: %s.", BusinessData[id][bizName]);
			Log_Write("logs/biz_log.txt", "[%s] %s abandonou seu negocio ID: %d.", ReturnDate(), ReturnName(playerid), id);
		}
	}
	else if ((id = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandonar [confirmar]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[AVISO]:{FFFFFF} Você está prestes a abandonar a seu veiculo, sem reembolso.");
		}
		else if (CarData[id][carImpounded] != -1)
    		return SendErrorMessage(playerid, "Este veículo está apreendido e você não pode usá-lo.");

		else if (!strcmp(params, "confirmar", true))
		{
			new
			    model = CarData[id][carModel];

			Car_Delete(id);

			SendServerMessage(playerid, "Você abandonou o seu %s.", ReturnVehicleModelName(model));
			Log_Write("logs/car_log.txt", "[%s] %s abandonou o seu %s.", ReturnDate(), ReturnName(playerid), ReturnVehicleModelName(model));
		}
	}
	else SendErrorMessage(playerid, "Você não está perto de qualquer coisa que você pode abandonar.");
	return 1;
}

CMD:luzes(playerid, params[])
{
	static
	    id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		if (!HouseData[id][houseLights])
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aperta o interruptor e liga as luzes.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = true;
		}
		else
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aperta o interruptor e desliga as luzes.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = false;
		}
	}
	else {
	    SendErrorMessage(playerid, "Você deve estar em uma casa para ligar as luzes.");
	}
	return 1;
}
CMD:fechar(playerid, params[])
{
	static
	    id = -1;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
	{
		if (!HouseData[id][houseLocked])
		{
			HouseData[id][houseLocked] = true;
			House_Save(id);

			ShowPlayerFooter(playerid, "Voce ~r~fechou~w~ sua casa!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "Voce ~r~abriu~w~ sua casa!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
		if (Business_IsOwner(playerid, id))
		{
			if (!BusinessData[id][bizLocked])
			{
				BusinessData[id][bizLocked] = true;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "Voce ~r~fechou~w~ seu negocio!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
  			else
			{
				BusinessData[id][bizLocked] = false;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "Voce ~r~abriu~w~ seu negocio!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid))) != -1)
	{
		if (strlen(EntranceData[id][entrancePass]))
		{
			Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Senha", "Digite a senha para esta entrada:", "Enviar", "Cancelar");
			}
		}
	}
	else SendErrorMessage(playerid, "Você não está perto de qualquer coisa que você pode trancar.");
	return 1;
}
CMD:trancarp(playerid, params[])
{
	static
	    id = -1;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid))) != -1)
	{
		if (strlen(EntranceData[id][entrancePass]))
		{
			Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Senha", "Digite a senha para esta entrada:", "Enviar", "Cancelar");
			}
		}
	else SendErrorMessage(playerid, "Você não está perto de qualquer coisa que você pode trancar.");
	return 1;
}
CMD:trancar(playerid, params[])
{
	static
	    id = -1,
		str[128];
	    
 	if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

	   	if (Car_IsOwner(playerid, id) || (PlayerData[playerid][pFaction] != -1 && CarData[id][carFaction] == GetFactionType(playerid)))
	    {
			if (!CarData[id][carLocked])
			{
				CarData[id][carLocked] = true;
				Car_Save(id);

				ShowPlayerFooter(playerid, "~r~Alarme Ativado");
				SendServerMessage(playerid, "%s ativou o alarme do veiculo.", ReturnName(playerid, 0));
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
				format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Alarme Ativado");
				GameTextForPlayer(playerid, str, 1000, 3);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				CarData[id][carLocked] = false;
				Car_Save(id);

				ShowPlayerFooter(playerid, "~w~Alarme Desativado");
				SendServerMessage(playerid, "%s desativou o alarme do veiculo.", ReturnName(playerid, 0));
				format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Alarme Desativado");
				GameTextForPlayer(playerid, str, 1000, 3);
				PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
   		}
	  }
	}
	//else SendErrorMessage(playerid, "Você não está perto de qualquer coisa que você pode trancar.");
	else SendErrorMessage(playerid, "Você não está perto de um veiculo para ativar o alarme.");
	return 1;
}
CMD:vender(playerid, params[])
{
	static
	    targetid,
	    type[24],
	    string[128];

	if (sscanf(params, "us[24]S()[128]", targetid, type, string))
	{
	    SendSyntaxMessage(playerid, "/vender [playerid/nome] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} casa, negocio, veiculo");
	    return 1;
	}
	if (targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0))
	{
		SendErrorMessage(playerid, "O jogador está desconectado ou não está perto de você.");
		return 1;
	}
	if (targetid == playerid)
	{
		SendErrorMessage(playerid, "Você não pode vender a si mesmo.");
		return 1;
	}
	if (!strcmp(type, "casa", true))
	{
		static
		    price,
			houseid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/vender [playerid/nome] [casa] [preço]");

		if (price < 1)
		    return SendErrorMessage(playerid, "O preço que você digitou não pode abaixo do valor de $1.");

		if ((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid)) {
			PlayerData[targetid][pHouseSeller] = playerid;
			PlayerData[targetid][pHouseOffered] = houseid;
			PlayerData[targetid][pHouseValue] = price;

		    SendServerMessage(playerid, "Você ofereceu a %s para comprar sua casa por (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s lhe ofereceu sua casa por %s (use \"/aceitar casa\" para aceitar).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Você não está no alcance de qualquer uma de suas casas.");
	}
	else if (!strcmp(type, "negocio", true))
	{
		static
		    price,
			bizid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/vender [playerid/nome] [negocio] [preço]");

		if (price < 1)
		    return SendErrorMessage(playerid, "O preço que você digitou não pode abaixo do valor de $1.");

		if ((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
			PlayerData[targetid][pBusinessSeller] = playerid;
			PlayerData[targetid][pBusinessOffered] = bizid;
			PlayerData[targetid][pBusinessValue] = price;

		    SendServerMessage(playerid, "Você ofereceu a %s para comprar seu negocio por (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s lhe ofereceu seu negocio por %s (use \"/aceitar negocio\" para aceitar).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Você não está no alcance de qualquer um de seus negócios.");
	}
	else if (!strcmp(type, "veiculo", true))
	{
		static
		    price,
			carid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/vender [playerid/nome] [veiculo] [preço]");

		if (price < 1)
		    return SendErrorMessage(playerid, "O preço que você digitou não pode abaixo do valor de $1.");

		if (Car_GetCount(targetid) >= MAX_OWNABLE_CARS)
	    	return SendErrorMessage(playerid, "Este jogador já possui carros suficiente.");

		if ((carid = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, carid)) {
			PlayerData[targetid][pCarSeller] = playerid;
			PlayerData[targetid][pCarOffered] = carid;
			PlayerData[targetid][pCarValue] = price;

		    SendServerMessage(playerid, "Você ofereceu a %s para comprar seu %s por (%s).", ReturnName(targetid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
            SendServerMessage(targetid, "%s lhe ofereceu seu %s por %s (use \"/aceitar veiculo\" para aceitar).", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "Você não está dentro de qualquer um dos seus veículos.");
	}
	return 1;
}

CMD:aceitar(playerid, params[])
{
	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/aceitar [nome]");
		SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} casa, negocio, veiculo, comida, faccao, cumprimento, revista");
		return 1;
	}
	if (!strcmp(params, "casa", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pHouseSeller],
	        houseid = PlayerData[playerid][pHouseOffered],
	        price = PlayerData[playerid][pHouseValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Você não está perto do jogador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Você tem fundos suficientes para comprar esta casa.");

		if (House_Nearest(playerid) != houseid)
		    return SendErrorMessage(playerid, "Você deve ser perto da casa para comprá-la.");

		if (!House_IsOwner(sellerid, houseid))
		    return SendErrorMessage(playerid, "Esta oferta não é mais válida.");

		SendServerMessage(playerid, "Você adquiriu com sucesso a oferta de %s em sua casa por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s adquiriu com sucesso a oferta de sua casa por %s.", ReturnName(playerid, 0), FormatNumber(price));

		HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
		House_Save(houseid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) vendeu sua casa para %s (%s) por %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pHouseOffered] = -1;
		PlayerData[playerid][pHouseValue] = 0;
	}
	if (!strcmp(params, "negocio", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pBusinessSeller],
	        bizid = PlayerData[playerid][pBusinessOffered],
	        price = PlayerData[playerid][pBusinessValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Você não está perto do jogador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Você tem fundos suficientes para comprar esta casa.");

		if (Business_Nearest(playerid) != bizid)
		    return SendErrorMessage(playerid, "Você tem fundos suficientes para comprar este negocio.");

		if (!Business_IsOwner(sellerid, bizid))
		    return SendErrorMessage(playerid, "Você deve ser perto do negocio para comprá-lo.");

		SendServerMessage(playerid, "Você adquiriu com sucesso a oferta de %s em seu negocio por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s adquiriu com sucesso a oferta de seu negocio por %s.", ReturnName(playerid, 0), FormatNumber(price));

		BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
		Business_Save(bizid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) vendeu seu negocio para %s (%s) por %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pBusinessOffered] = -1;
		PlayerData[playerid][pBusinessValue] = 0;
	}
	if (!strcmp(params, "veiculo", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pCarSeller],
	        carid = PlayerData[playerid][pCarOffered],
	        price = PlayerData[playerid][pCarValue];

		if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
	    	return SendErrorMessage(playerid, "Você ja possui dois veiculos, venda uma deles para poder comprar.");

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Você não está perto do jogador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Você tem fundos suficientes para comprar esta casa.");

		if (Car_Nearest(playerid) != carid)
		    return SendErrorMessage(playerid, "Você deve estar perto do veiculo para comprá-lo.");

		if (!Car_IsOwner(sellerid, carid))
		    return SendErrorMessage(playerid, "Esta oferta não é mais válida.");

		SendServerMessage(playerid, "Você adquiriu com sucesso a oferta de %s no seu %s por %s.", ReturnName(sellerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		SendServerMessage(sellerid, "%s adquiriu com sucesso a oferta de seu %s por %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));

		CarData[carid][carOwner] = GetPlayerSQLID(playerid);
		Car_Save(carid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) vendeu a %s seu %s (%s) por %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCarOffered] = -1;
		PlayerData[playerid][pCarValue] = 0;
	}
	if (!strcmp(params, "comida", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pFoodSeller],
			type = PlayerData[playerid][pFoodType],
	        price = PlayerData[playerid][pFoodPrice];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "Você não está perto do jogador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "Você tem fundos suficientes para comprar esta casa.");

		switch (type)
		{
		    case 1:
		    {
				new id = Inventory_Add(playerid, "Guarrafa de Agua", 2958);

				if (id == -1)
				    return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

		        SendServerMessage(playerid, "Você adquiriu um litro de água de %s por $%d (adicionado ao inventário).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s aceitou a água por $%d.", ReturnName(playerid, 0), price);
			}
			case 2:
		    {
				new id = Inventory_Add(playerid, "Guarrafa de Refrigerante", 1543);

				if (id == -1)
				    return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

		        SendServerMessage(playerid, "Você adquiriu um litro de refrigerante de %s por $%d (adicionado ao inventário).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s aceitou a refrigerante por $%d.", ReturnName(playerid, 0), price);
			}
			case 3:
		    {
				new id = Inventory_Add(playerid, "Hamburguer Cozido", 2703);

				if (id == -1)
				    return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

		        SendServerMessage(playerid, "Você adquiriu um hambúrguer de %s por $%d (adicionado ao inventário).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s aceitou o hambúrguer por $%d.", ReturnName(playerid, 0), price);
			}
			case 4:
		    {
				new id = Inventory_Add(playerid, "Pizza Cozida", 2702);

				if (id == -1)
				    return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

		        SendServerMessage(playerid, "Você adquiriu uma fatia de pizza de %s por $%d (adicionado ao inventário).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s aceitou a fatia de pizza por for $%d.", ReturnName(playerid, 0), price);
			}
			case 5:
		    {
				new id = Inventory_Add(playerid, "Hamburguer de Frango", 2663);

				if (id == -1)
				    return SendErrorMessage(playerid, "Você não tem mais espaço em seu inventário.");

		        SendServerMessage(playerid, "Você adquiriu o Hambúrguer de Frango a partir de %s por $%d (adicionado ao inventário).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s aceitou o Hambúrguer de Frango por $%d.", ReturnName(playerid, 0), price);
			}
		}
		PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFoodType] = 0;
		PlayerData[playerid][pFoodPrice] = 0;
	}
	if (!strcmp(params, "faccao", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;

		SendServerMessage(playerid, "Você aceitou a oferta de %s para se juntar a facção \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendServerMessage(targetid, "%s aceitou sua oferta para se juntar a facção \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	if (!strcmp(params, "cumprimento", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pShakeOffer],
	        type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "Você não está perto do jogador.");

		SetPlayerToFacePlayer(playerid, targetid);
		SetPlayerToFacePlayer(targetid, playerid);

		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pShakeType] = 0;

		switch (type)
		{
		    case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			    ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			}
	    }
	    SendServerMessage(playerid, "Você aceitou o cumprimento de %s.", ReturnName(targetid, 0));
	    SendServerMessage(targetid, "%s aceitou o seu cumprimento.", ReturnName(playerid, 0));
	}
	if (!strcmp(params, "revista", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
	{
	    new
			targetid = PlayerData[playerid][pFriskOffer];

	    if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "Você não está perto do jogador.");

		new
		    models[MAX_INVENTORY],
		    amount[MAX_INVENTORY];

		for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
		{
	 		if (InventoryData[playerid][i][invExists]) {
	   			models[i] = InventoryData[playerid][i][invModel];
	   			amount[i] = InventoryData[playerid][i][invQuantity];
			}
			else {
			    models[i] = -1;
			    amount[i] = -1;
			}
		}
		SendServerMessage(targetid, "%s aceitou sua revista.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Você aceitou que o/a %s te revista-se.", ReturnName(targetid, 0));
		PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
		ShowModelSelectionMenu(targetid, ReturnName(playerid), MODEL_SELECTION_FRISK, models, sizeof(models), 0.0, 0.0, 0.0, 1.0, -1, true, amount);
	}
	return 1;
}
CMD:armazenamento(playerid, params[])
{
	static
	    houseid = -1;

		if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_PCESP))
		{
	    House_OpenStorage(playerid, houseid);
		}

	else SendErrorMessage(playerid, "Você não está ao alcance do interior de sua casa.");
	return 1;
}

CMD:editarcasa(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarcasa [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} local, interior, preco, endereco, tipo");
		return 1;
	}
	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "Você especificou uma casa inválida.");

	if (!strcmp(type, "local", true))
	{
		GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

		HouseData[id][houseExterior] = GetPlayerInterior(playerid);
		HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a localização da casa ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o spawn interior da casa ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "preco", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editarcasa [id] [preco] [novo preço]");

	    HouseData[id][housePrice] = price;

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o preço da casa ID: %d para %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "endereco", true))
	{
	    new address[32];

	    if (sscanf(string, "s[32]", address))
	        return SendSyntaxMessage(playerid, "/editarcasa [id] [endereco] [novo endereço]");

	    format(HouseData[id][houseAddress], 32, address);

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o endereço da casa ID: %d para \"%s\".", ReturnName(playerid, 0), id, address);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/editarcasa [id] [tipo] [interior tipo]");

		if (typeint < 1 || typeint > sizeof(arrHouseInteriors))
			return SendErrorMessage(playerid, "O tipo especificado deve estar entre 1 e %d.", sizeof(arrHouseInteriors));

	    HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
	    HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
	    HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
	    HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

		foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo de casa ID: %d para %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:perto(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if ((id = House_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto da casa ID: %d.", id);

    if ((id = Business_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto do negocio ID: %d.", id);

    if ((id = Entrance_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto da entrada ID: %d.", id);

    if ((id = Job_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto do emprego ID: %d.", id);

    if ((id = Pump_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto da Bomba ID: %d.", id);

    if ((id = Gate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto do portao ID: %d.", id);

    if ((id = ATM_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto do Caixa Eletronico ID: %d.", id);

    if ((id = Garbage_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto do Container ID: %d.", id);

    if ((id = Vendor_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Você está perto do fornecedor ID: %d.", id);

	if ((id = Rack_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Você está perto do armario de armas ID: %d.", id);

    if ((id = Graffiti_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Você está perto do graffiti ID: %d.", id);

    if ((id = Detector_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Você está perto do detector ID: %d.", id);

	return 1;
}

CMD:criarempresa(playerid, params[])
{
    static
		type,
	    price,
	    id;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "dd", type, price))
 	{
	 	SendSyntaxMessage(playerid, "/criarempresa [tipo] [preço]");
    	SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: 24/7 | 2: Bar/Boate | 3: Loja de Roupas | 4: Fast Food | 5: Concessionaria | 6: Posto de Gasolina | 7: Loja de Moveis");
    	return 1;
	}
	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Tipo especificado inválido. Tipos pode variar desde 1 até 7.");

	id = Business_Create(playerid, type, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para os negocios.");

	SendServerMessage(playerid, "Você criou com sucesso o negócio ID: %d.", id);
	return 1;
}

CMD:editarempresa(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarempresa [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} local, interior, entrega, nome, preco, stock, tipo, veiculos, spawn");
		return 1;
	}
	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "Você especificou uma ID da empresa inválida.");

	if (!strcmp(type, "local", true))
	{
 		GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
		BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

		Business_Refresh(id);
		Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a localização do negócio ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o spawn interior do negócios ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "entrega", true))
	{
	    if (BusinessData[id][bizType] == 5)
	        return SendErrorMessage(playerid, "Este negócio não aceita entregas.");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Você só pode colocar o ponto de entrega do lado fora.");

	    GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
		Business_Refresh(id);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o ponto de entrega do negócio ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "preco", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editarempresa [id] [preco] [novo preço]");

	    BusinessData[id][bizPrice] = price;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o preço do negócio ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "stock", true))
	{
	    new amount;

	    if (sscanf(string, "d", amount))
	        return SendSyntaxMessage(playerid, "/editarempresa [id] [stock] [quantidade de produtos]");

	    BusinessData[id][bizProducts] = amount;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o stock do negócio ID: %d para %s produtos.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
	}
	else if (!strcmp(type, "nome", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarempresa [id] [nome] [novo nome]");

	    format(BusinessData[id][bizName], 32, name);

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o nome do negócio ID: %d para \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editarempresa [id] [tipo] [tipo de negócio]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: 24/7 | 2: Loja de Armas | 3: Loja de Roupas | 4: Fast Food | 5: Concessionaria | 6: Posto de Gasolina | 7: Loja de Moveis");
			return 1;
		}
		if (typeint < 1 || typeint > 7)
			return SendErrorMessage(playerid, "Tipo especificado inválido. Tipos pode variar desde 1 até 7.");

        BusinessData[id][bizType] = typeint;

        switch (typeint) {
            case 1: {
            	BusinessData[id][bizInt][0] = -27.3074;
           		BusinessData[id][bizInt][1] = -30.8741;
            	BusinessData[id][bizInt][2] = 1003.5573;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 4;
            }
            case 2: {
            	BusinessData[id][bizInt][0] = 316.3963;
            	BusinessData[id][bizInt][1] = -169.8375;
            	BusinessData[id][bizInt][2] = 999.6010;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 3: {
            	BusinessData[id][bizInt][0] = 161.4801;
            	BusinessData[id][bizInt][1] = -96.5368;
            	BusinessData[id][bizInt][2] = 1001.8047;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 18;
			}
			case 4: {
            	BusinessData[id][bizInt][0] = 363.3402;
            	BusinessData[id][bizInt][1] = -74.6679;
            	BusinessData[id][bizInt][2] = 1001.5078;
            	BusinessData[id][bizInt][3] = 315.0000;
				BusinessData[id][bizInterior] = 10;
			}
			case 5: {
            	BusinessData[id][bizInt][0] = 1494.5612;
            	BusinessData[id][bizInt][1] = 1304.2061;
            	BusinessData[id][bizInt][2] = 1093.2891;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
			case 6: {
				BusinessData[id][bizInt][0] = -27.3383;
   				BusinessData[id][bizInt][1] = -57.6909;
			   	BusinessData[id][bizInt][2] = 1003.5469;
      			BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 7: {
				BusinessData[id][bizInt][0] = -2240.4954;
   				BusinessData[id][bizInt][1] = 128.3774;
			   	BusinessData[id][bizInt][2] = 1035.4210;
      			BusinessData[id][bizInt][3] = 270.0000;
				BusinessData[id][bizInterior] = 6;
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Refresh(id);

	    Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo do negócio ID: %d para %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "veiculos", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Este negócio não é uma concessionária!");

		PlayerData[playerid][pDealership] = id;
		Business_EditCars(playerid, id);
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Este negócio não é uma concessionária!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Você só pode colocar o spawn dos veículos no lado fora.");

	    GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o spawn veículo do negócios ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:produtos(playerid, params[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
	    Business_ProductMenu(playerid, bizid);
	}
	else SendErrorMessage(playerid, "Você não está no interior do seu negócio.");
	return 1;
}
CMD:comandos(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "EMPRESA:{FFFFFF} /comprar, /abandonar, /fechar, /cofre, /produtos, /binfo, /bnome, /bmensagem, /bprodutos.");
	return 1;
}
CMD:negocioestado(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/negocioestado [negócio ID]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "Você especificou uma ID da empresa inválida.");

	Business_Refresh(id);
	Business_Save(id);

	SendServerMessage(playerid, "Este negócio agora é propriedade do Estado (/comandos).", id);
	return 1;
}

CMD:beber(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode usar este comando agora.");

	if (isnull(params))
	     return SendSyntaxMessage(playerid, "/beber [agua - refrigerante - cerveja - pinga - whisky - vodka - Absinto]");

	if (PlayerData[playerid][pDrinking])
	    return SendErrorMessage(playerid, "Você já está bebendo uma garrafa.");

	if (!strcmp(params, "refrigerante", true))
	{
	    if (!Inventory_HasItem(playerid, "Guarrafa de Refrigerante"))
	    	return SendErrorMessage(playerid, "Você não tem nenhuma garrafas de refrigerante com você.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com sede agora.");

        PlayerData[playerid][pDrinking] = 1;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "Guarrafa de Refrigerante");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		
		if(PlayerDrunk[playerid] >= 1)
		{
			SetTimerEx("PassarEfeitoBebida", 300000, false, "d", playerid);
			SendClientMessage(playerid, COLOR_GREEN, "[Info]:{FFFFFF} Com a soda, o alcool no seu sangue passara em 5 minutos");
		}

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de refrigerante e abre.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para tomar um gole.");
	}
	else if (!strcmp(params, "agua", true))
	{
	    if (!Inventory_HasItem(playerid, "Guarrafa de Agua"))
	    	return SendErrorMessage(playerid, "Você não tem nenhum garrafas de água com você.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com sede agora.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "Guarrafa de Agua");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de água e abre.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para tomar um gole.");
	}
	else if (!strcmp(params, "Cerveja", true))
	{
	    if (!Inventory_HasItem(playerid, "Cerveja"))
	    	return SendErrorMessage(playerid, "Você não tem nenhuma garrafa de cerveja com você.");
	    	
        if (PlayerData[playerid][pDrinking])
	    	return SendErrorMessage(playerid, "Você já está bebendo a cerveja.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com vontade de beber agora.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
        ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "Cerveja");

		//bebado /bafometro
		new Float:health;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
  		PlayerDrunk[playerid] += 1;
	    SetPlayerSpecialAction(playerid, 20);
	    if(PlayerDrunk[playerid] >= 5)
			GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

	    if(GetPlayerHealth(playerid, health) < 100)
	    {
        	if(PlayerData[playerid][pAlcoholPerk] > 0)
			{
				PlayerDrunk[playerid] += 1;
				new hp = 2 * PlayerData[playerid][pAlcoholPerk];
				hp += 5;
				SetPlayerHealth(playerid, health + hp);
			}
	        else
      	SetPlayerHealth(playerid, 100);
  		}
  		//
 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de cerveja, para beber.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para pegar uma bebida");
	}
	else if (!strcmp(params, "pinga", true))
	{
	    if (!Inventory_HasItem(playerid, "pinga"))
	    	return SendErrorMessage(playerid, "Você não tem nenhuma garrafa de pinga com você.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com vontade de beber agora.");
	    	
        if (PlayerData[playerid][pDrinking])
	    	return SendErrorMessage(playerid, "Você já está bebendo a pinga.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
        ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "pinga");

		//bebado /bafometro
		new Float:health;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
  		PlayerDrunk[playerid] += 1;
	    SetPlayerSpecialAction(playerid, 20);
	    if(PlayerDrunk[playerid] >= 5)
			GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

	    if(GetPlayerHealth(playerid, health) < 100)
	    {
        	if(PlayerData[playerid][pAlcoholPerk] > 0)
			{
				PlayerDrunk[playerid] += 1;
				new hp = 2 * PlayerData[playerid][pAlcoholPerk];
				hp += 5;
				SetPlayerHealth(playerid, health + hp);
			}
	        else
      	SetPlayerHealth(playerid, 100);
  		}
  		//
 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de pinga, e começa a tomar.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para beber a bebida");
	}
	else if (!strcmp(params, "whisky", true))
	{
	    if (!Inventory_HasItem(playerid, "whisky"))
	    	return SendErrorMessage(playerid, "Você não tem nenhuma garrafa de whisky com você.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com vontade de beber agora.");
	    	
        if (PlayerData[playerid][pDrinking])
	    	return SendErrorMessage(playerid, "Você já está bebendo a Whisky.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
        ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "whisky");

		//bebado /bafometro
		new Float:health;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
  		PlayerDrunk[playerid] += 1;
	    SetPlayerSpecialAction(playerid, 20);
	    if(PlayerDrunk[playerid] >= 5)
			GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

	    if(GetPlayerHealth(playerid, health) < 100)
	    {
        	if(PlayerData[playerid][pAlcoholPerk] > 0)
			{
				PlayerDrunk[playerid] += 1;
				new hp = 2 * PlayerData[playerid][pAlcoholPerk];
				hp += 5;
				SetPlayerHealth(playerid, health + hp);
			}
	        else
      	SetPlayerHealth(playerid, 100);
  		}
  		//
 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de whisky, e começa a tomar.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para beber a bebida");
	}
	else if (!strcmp(params, "vodka", true))
	{
	    if (!Inventory_HasItem(playerid, "vodka"))
	    	return SendErrorMessage(playerid, "Você não tem nenhuma garrafa de vodka com você.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com vontade de beber agora.");
	    	
        if (PlayerData[playerid][pDrinking])
	    	return SendErrorMessage(playerid, "Você já está bebendo a Vodka.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);
        ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "vodka");

		//bebado /bafometro
		new Float:health;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
  		PlayerDrunk[playerid] += 1;
	    SetPlayerSpecialAction(playerid, 20);
	    if(PlayerDrunk[playerid] >= 5)
			GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

	    if(GetPlayerHealth(playerid, health) < 100)
	    {
        	if(PlayerData[playerid][pAlcoholPerk] > 0)
			{
				PlayerDrunk[playerid] += 1;
				new hp = 2 * PlayerData[playerid][pAlcoholPerk];
				hp += 5;
				SetPlayerHealth(playerid, health + hp);
			}
	        else
      	SetPlayerHealth(playerid, 100);
  		}
  		//
 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de vodka, e começa a tomar.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para beber a bebida");
	}
	else if (!strcmp(params, "Absinto", true))
	{
	    if (!Inventory_HasItem(playerid, "Absinto"))
	    	return SendErrorMessage(playerid, "Você não tem nenhuma garrafa de Absinto com você.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Você não está com vontade de beber agora.");
	    	
        if (PlayerData[playerid][pDrinking])
	    	return SendErrorMessage(playerid, "Você já está bebendo Absinto.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);
        ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Garrafa Vazia", 1484);
		Inventory_Remove(playerid, "Absinto");

		//bebado /bafometro
		new Float:health;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
  		PlayerDrunk[playerid] += 1;
	    SetPlayerSpecialAction(playerid, 20);
	    if(PlayerDrunk[playerid] >= 5)
			GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

	    if(GetPlayerHealth(playerid, health) < 100)
	    {
        	if(PlayerData[playerid][pAlcoholPerk] > 0)
			{
				PlayerDrunk[playerid] += 1;
				new hp = 2 * PlayerData[playerid][pAlcoholPerk];
				hp += 5;
				SetPlayerHealth(playerid, health + hp);
			}
	        else
      	SetPlayerHealth(playerid, 100);
  		}
  		//
 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma garrafa de Absinto, e começa a tomar.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pressione ~y~LMB~w~ para beber a bebida");
	}
	return 1;
}

CMD:cozinhar(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1)
	    return SendErrorMessage(playerid, "Você deve estar dentro de uma casa para cozinhar refeições.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/cozinhar [hamburger/pizza]");

    if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Você não pode usar este comando no momento.");

	if (!strcmp(params, "hamburger", true))
	{
	    if (!Inventory_HasItem(playerid, "Hamburguer Congelado"))
	        return SendErrorMessage(playerid, "Você não tem nenhum hambúrguer congelado.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Você já está cozinhando uma refeição.");

		Inventory_Add(playerid, "Cartao", 928);

		PlayerData[playerid][pCooking] = 1;
		PlayerData[playerid][pCookingTime] = 20;
		PlayerData[playerid][pCookingHouse] = houseid;

		Inventory_Remove(playerid, "Hamburguer Congelado");
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prepara o micro-ondas e aquece um hambúrguer congelado (20 segundos).", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "pizza", true))
	{
	    if (!Inventory_HasItem(playerid, "Pizza Congelada"))
	    	return SendErrorMessage(playerid, "Você não tem nenhum pizza congelada.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Você já está cozinhando uma refeição.");

        Inventory_Add(playerid, "Cartao", 928);

		PlayerData[playerid][pCooking] = 2;
		PlayerData[playerid][pCookingTime] = 55;
		PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Pizza Congelada");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prepara o micro-ondas e aquece um pizza congelada (55 segundos).", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:colete(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode usar este comando agora.");

	if (!Inventory_HasItem(playerid, "Colete"))
	    return SendErrorMessage(playerid, "Você não tem um colete.");

	if (ReturnArmour(playerid) > 49)
	    return SendErrorMessage(playerid, "Você já tem um colete cheio.");

	SetPlayerArmour(playerid, 50.0);

	Inventory_Remove(playerid, "Colete");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira um colete da mochila e coloca-o no corpo.", ReturnName(playerid, 0));
	return 1;
}

CMD:cofre(playerid, params[])
{
    static
	    bizid = -1,
		type[24],
		str[12],
		amount;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
	    if (sscanf(params, "s[24]S()[12]", type, str))
	    {
			SendSyntaxMessage(playerid, "/cofre [nome] (%s disponível)", FormatNumber(BusinessData[bizid][bizVault]));
	        SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} sacar, depositar, balance");
	        return 1;
		}
		if (!strcmp(type, "sacar", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/cofre [sacar] [quantidade]");

			if (amount < 1 || amount > BusinessData[bizid][bizVault])
			    return SendErrorMessage(playerid, "Quantidade especificada inválida!");

            BusinessData[bizid][bizVault] -= amount;
            Business_Save(bizid);

            GiveMoney(playerid, amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s retira %s do cofre da empresa.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "depositar", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/cofre [depositar] [quantidade]");

			if (amount < 1 || amount > GetMoney(playerid))
			    return SendErrorMessage(playerid, "Quantidade especificada inválida!");

            BusinessData[bizid][bizVault] += amount;
            Business_Save(bizid);

            GiveMoney(playerid, -amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s deposita %s do cofre da empresa.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "balance", true))
		{
		    SendServerMessage(playerid, "\"%s\" tem um saldo total de: %s.", BusinessData[bizid][bizName], FormatNumber(BusinessData[bizid][bizVault]));
		}
	}
	else SendErrorMessage(playerid, "Você não está ao alcance do seu negócio.");
	return 1;
}

CMD:tirarcnh(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "Você já começou o exame da CNH!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2032.8875,-117.3979,1035.1719))
	    return SendErrorMessage(playerid, "Você não está no alcance do captador.");

	if (Inventory_HasItem(playerid, "Carta de Conducao"))
	    return SendErrorMessage(playerid, "Você já tem uma CNH!");
	    
	GiveMoney(playerid, -1500);
	SendServerMessage(playerid, "Você tirou sua Carteira de Habilitação.");
	Inventory_Add(playerid, "Carta de Conducao", 1581);


	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{


	}
	return 1;
}

CMD:criarentrada(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/criarentrada [nome]");

	new id = Entrance_Create(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para entradas.");

	SendServerMessage(playerid, "Você criou com sucesso a entrada ID: %d.", id);
	return 1;
}

CMD:editarentrada(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarentrada [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} local, interior, senha, nome, trancado, mapicon, tipo, custom, virtual");
		return 1;
	}
	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "Você especificou uma entrada inválida.");

	if (!strcmp(type, "local", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

		EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
		EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

		Entrance_Refresh(id);
		Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a localização da entrada ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o spawn interior da entrada ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "custom", true))
	{
	    new status;

	    if (sscanf(string, "d", status))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [custom] [0/1]");

		if (status < 0 || status > 1)
		    return SendErrorMessage(playerid, "Você deve especificar pelo menos 0 ou 1.");

	    EntranceData[id][entranceCustom] = status;
	    Entrance_Save(id);

	    if (status) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s permitiu modo personalizado do interior para a entrada ID: %d.", ReturnName(playerid, 0), id);
		}
		else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s retirou o modo personalizado do interior para a entrada ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "virtual", true))
	{
	    new worldid;

	    if (sscanf(string, "d", worldid))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [virtual] [interior world]");

	    EntranceData[id][entranceWorld] = worldid;

		foreach (new i : Player) if (Entrance_Inside(i) == id) {
			SetPlayerVirtualWorld(i, worldid);
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o virtual da entrada ID: %d para %d.", ReturnName(playerid, 0), id, worldid);
	}
	else if (!strcmp(type, "mapicon", true))
	{
	    new icon;

	    if (sscanf(string, "d", icon))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [mapicon] [map icon]");

		if (icon < 0 || icon > 63)
		    return SendErrorMessage(playerid, "Ícone do mapa inválido! Ícones válidos mapa pode ser encontrada em \"wiki.sa-mp.com/wiki/MapIcons\".");

	    EntranceData[id][entranceIcon] = icon;

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o map icon de entrada ID: %d to %d.", ReturnName(playerid, 0), id, icon);
	}
	else if (!strcmp(type, "senha", true))
	{
	    new password[32];

	    if (sscanf(string, "s[32]", password))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [senha] [Digite a senha] (use 'none' para disabilitar)");

		if (!strcmp(password, "none", true)) {
			EntranceData[id][entrancePass][0] = 0;
		}
		else {
		    format(EntranceData[id][entrancePass], 32, password);
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a senha da entrada ID: %d para \"%s\".", ReturnName(playerid, 0), id, password);
	}
	else if (!strcmp(type, "trancado", true))
	{
	    new locked;

	    if (sscanf(string, "d", locked))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [trancado] [trancado 0/1]");

		if (locked < 0 || locked > 1)
		    return SendErrorMessage(playerid, "Valor inválido. Use 0 para destrancado e 1 para trancado.");

	    EntranceData[id][entranceLocked] = locked;
	    Entrance_Save(id);

	    if (locked) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s trancou a entrada ID: %d.", ReturnName(playerid, 0), id);
		} else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s destrancou a entrada ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "nome", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [nome] [novo nome]");

	    format(EntranceData[id][entranceName], 32, name);

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o nome da entrada ID: %d para \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editarentrada [id] [tipo] [tipo de entrada]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 0: None | 1: Auto Escola | 2: Banco | 3: Armazém | 4: Central do Governo | 5: Campo De Tiro");
			return 1;
		}
		if (typeint < 0 || typeint > 5)
			return SendErrorMessage(playerid, "O tipo especificado deve estar entre 0 e 5.");

		if (EntranceData[id][entranceType] == 3 && typeint != 3) {
		    DestroyForklifts(id);
		}
		else if (EntranceData[id][entranceType] != 3 && typeint == 3) {
		    CreateForklifts(id);
		}
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
            	EntranceData[id][entranceInt][0] = -2029.5531;
           		EntranceData[id][entranceInt][1] = -118.8003;
            	EntranceData[id][entranceInt][2] = 1035.1719;
            	EntranceData[id][entranceInt][3] = 0.0000;
				EntranceData[id][entranceInterior] = 3;
            }
			case 2: {
            	EntranceData[id][entranceInt][0] = 1456.1918;
           		EntranceData[id][entranceInt][1] = -987.9417;
            	EntranceData[id][entranceInt][2] = 996.1050;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 6;
            }
            case 3: {
                EntranceData[id][entranceInt][0] = 1291.8246;
           		EntranceData[id][entranceInt][1] = 5.8714;
            	EntranceData[id][entranceInt][2] = 1001.0078;
            	EntranceData[id][entranceInt][3] = 180.0000;
				EntranceData[id][entranceInterior] = 18;
			}
			case 4: {
			    EntranceData[id][entranceInt][0] = 390.1687;
           		EntranceData[id][entranceInt][1] = 173.8072;
            	EntranceData[id][entranceInt][2] = 1008.3828;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 3;
			}
			case 5: {
			    EntranceData[id][entranceInt][0] = 304.0165;
           		EntranceData[id][entranceInt][1] = -141.9894;
            	EntranceData[id][entranceInt][2] = 1004.0625;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 7;
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo da entrada ID: %d para %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:atm(playerid, params[])
{
	if (ATM_Nearest(playerid) == -1)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer Caixa Eletronico.");

    if (ATMData[0][atmDinheiro] == 0)
	    return SendErrorMessage(playerid, "Esse Caixa Eletronico não possui notas suficiente");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Conta Bancária", "Saldo Bancário: %s", "Selecionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}
CMD:explodiratm(playerid, params[])
{
    new id = ATM_Nearest(playerid);
    if (id == -1 || ATMData[id][atmDanificado] == 1)
        return SendErrorMessage(playerid, "Você não está no alcance de qualquer Caixa Eletrônico, ou ele já está danificado.");

    if (!Inventory_HasItem(playerid, "Dinamite"))
        return SendErrorMessage(playerid, "Você não tem uma dinamite.");

    new Float:atmPosX = ATMData[id][atmPos][0];
    new Float:atmPosY = ATMData[id][atmPos][1];
    new Float:atmPosZ = ATMData[id][atmPos][2];
   	new string[128];

    gTimerRouboATM[playerid] = INVALID_TIMER;
    Inventory_Remove(playerid, "Dinamite");
    ATMData[id][atmDinamiteObject] = CreateDynamicObject(1654, atmPosX, atmPosY, atmPosZ + 0.3, 0.0, 0.0, 0.0);

    SetTimerEx("PrepareATMExplosion", 180000, false, "dd", playerid, id);
    SendClientMessage(playerid, COLOR_YELLOW, "Você plantou uma dinamite no caixa eletrônico. Fique por perto, a bomba será ativada em 3 minutos.");

	format(string, sizeof(string), "* %s está plantando uma dinamite no caixa eletrônico", ReturnName(playerid, 0));
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);
 	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s está plantando uma dinamite no caixa eletrônico", ReturnName(playerid, 0));

    return 1;
}

CMD:roubaratm(playerid, params[])
{
    new id = ATM_Nearest(playerid);
    if (ATMData[id][atmDanificado] == 0) {
        SendClientMessage(playerid, COLOR_RED, "Você precisa estar perto de um caixa eletrônico danificado.");
        return 1;
    }

    if (gTimerRouboATM[playerid] != INVALID_TIMER) {
        SendClientMessage(playerid, COLOR_RED, "Você já está roubando um caixa eletrônico.");
        return 1;
    }

    gTimerRouboATM[playerid] = SetTimerEx("RouboATM", 1000, true, "dd", playerid, id);
    SendClientMessage(playerid, COLOR_YELLOW, "Você começou a roubar o caixa eletrônico. Fique por perto!");
    return 1;
}

forward RouboATM(playerid, id);
public RouboATM(playerid, id)
{
    new Float:atmPosX = ATMData[id][atmPos][0];
    new Float:atmPosY = ATMData[id][atmPos][1];
    new Float:atmPosZ = ATMData[id][atmPos][2];

    if (!IsPlayerConnected(playerid) || !ATMData[id][atmExists] || !IsPlayerInRangeOfPoint(playerid, 3.0, atmPosX, atmPosY, atmPosZ)) {
        KillTimer(gTimerRouboATM[playerid]);
        gTimerRouboATM[playerid] = INVALID_TIMER;
        SendClientMessage(playerid, COLOR_RED, "Você parou de roubar o caixa eletrônico.");
        return 0;
    }

    if (ATMData[id][atmDinheiro] == 0) {
        KillTimer(gTimerRouboATM[playerid]);
        gTimerRouboATM[playerid] = INVALID_TIMER;
        SendClientMessage(playerid, COLOR_GREEN, "Você roubou o máximo possível do caixa eletrônico.");
        return 0;
    }
    
    ATMData[id][atmDinheiro] -= 100;
    GiveMoney(playerid, 100);
    ATM_Save(id);
    
    return 1;
}

forward PrepareATMExplosion(playerid, id);
public PrepareATMExplosion(playerid, id)
{

    new Float:atmPosX = ATMData[id][atmPos][0];
    new Float:atmPosY = ATMData[id][atmPos][1];
    new Float:atmPosZ = ATMData[id][atmPos][2];
    
    if (!IsPlayerConnected(playerid) || !ATMData[id][atmExists])
    {
        if (IsValidDynamicObject(ATMData[id][atmDinamiteObject]))
        {
            DestroyDynamicObject(ATMData[id][atmDinamiteObject]);
        }
        return 0;
    }

    new Float:playerPosX, Float:playerPosY, Float:playerPosZ;
    GetPlayerPos(playerid, playerPosX, playerPosY, playerPosZ);

    if (IsPlayerInRangeOfPoint(playerid, 3, atmPosX, atmPosY, atmPosZ)) // Verifique se o jogador ainda está perto do caixa eletrônico
    {
        SetTimerEx("ExplodeATM", 30000, false, "dd", playerid, id); // Timer para 30 segundos (30000 ms)
        SendClientMessage(playerid, COLOR_YELLOW, "A bomba será ativada em 30 segundos. Afastem-se!");
    }
    else
    {
        SendClientMessage(playerid, COLOR_RED, "Você se afastou muito do caixa eletrônico. A operação foi cancelada.");
        // Remover o objeto de dinamite
        if (IsValidDynamicObject(ATMData[id][atmDinamiteObject]))
        {
            DestroyDynamicObject(ATMData[id][atmDinamiteObject]);
        }
    }

    return 1;
}

forward ExplodeATM(playerid, id);
public ExplodeATM(playerid, id)
{
    if (!ATMData[id][atmExists]) // Verificar se o caixa eletrônico existe
        return 0;

    new Float:atmPosX = ATMData[id][atmPos][0];
    new Float:atmPosY = ATMData[id][atmPos][1];
    new Float:atmPosZ = ATMData[id][atmPos][2];

    CreateExplosion(atmPosX, atmPosY, atmPosZ, 7, 10.0); // Cria uma explosão
    
    if (IsValidDynamicObject(ATMData[id][atmDinamiteObject]))
    {
        DestroyDynamicObject(ATMData[id][atmDinamiteObject]);
        ATMData[id][atmDinamiteObject] = INVALID_OBJECT_ID; // Definir como um ID inválido após a destruição
    }
    // Verificar jogadores próximos e aplicar dano ou matá-los
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i, 7.0, atmPosX, atmPosY, atmPosZ)) // Raio de 10.0 para a explosão
        {
            // Matar o jogador ou aplicar dano aqui
            SetPlayerHealth(i, 0.0); // Exemplo: Matar o jogador
        }
    }
    
	ATMData[id][atmDanificado] = 1;
	ATM_Save(id);
	ATM_Refresh(id);
	
	// Enviar mensagem para todos os policiais online
    SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "|__Alerta de Segurança__|");
    SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "Atenção todas as unidades: Possível ataque a um caixa eletrônico.");
	SendFactionMessageEx(FACTION_PCESP, COLOR_LIGHTBLUE, "Localização: %s", GetPlayerLocation(playerid));
    return 1;
}

CMD:banco(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	    return SendErrorMessage(playerid, "Você não está em uma agencia bancaria.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Conta Bancária", "Saldo Bancário: %s\nSaldo Poupança %s", "Selecionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:estacionar(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Você deve ser dentro de seu veículo.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Este veículo é apreendido e você não pode usá-lo.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Você deve ser o motorista!");

	    static
			g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
			g_arrDamage[4],
			Float:health,
			seatid;

        for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
		GetVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		GetVehicleHealth(CarData[carid][carVehicle], health);

		foreach (new i : Player) if (IsPlayerInVehicle(i, CarData[carid][carVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
		}
		GetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
		GetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

		Car_Spawn(carid);
		Car_Save(carid);

		SendServerMessage(playerid, "Você estacionou com sucesso o seu %s.", ReturnVehicleName(CarData[carid][carVehicle]));

        UpdateVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		SetVehicleHealth(CarData[carid][carVehicle], health);

		for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
		    PutPlayerInVehicle(g_arrSeatData[i], CarData[carid][carVehicle], i);

		    g_arrSeatData[i] = INVALID_PLAYER_ID;
		}
	}
	else SendErrorMessage(playerid, "Você não está dentro de qualquer veiculo que você pode estacionar.");
	return 1;
}

CMD:vestacionar(playerid, params[])
{
    new carid = GetPlayerVehicleID(playerid);

    if (!carid)
        return SendErrorMessage(playerid, "Você deve estar dentro de um veículo para estacionar.");

    carid = Car_GetID(carid);
    if (carid == -1 || !Car_IsOwner(playerid, carid))
        return SendErrorMessage(playerid, "Você não é o dono deste veículo ou o veículo é inválido.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendErrorMessage(playerid, "Você deve ser o motorista do veículo!");

    CarData[carid][carParked] = 1; // Marca o veículo como estacionado
    Car_Save(carid); // Salva o estado do veículo no banco de dados

    DestroyVehicle(CarData[carid][carVehicle]);
    CarData[carid][carVehicle] = INVALID_VEHICLE_ID;

    SendClientMessage(playerid, COLOR_GREEN, "Você estacionou seu veículo com sucesso.");
    return 1;
}

CMD:criarbomba(playerid, params[])
{
	static
	    id,
		bizid = -1;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/criarbomba [Negocio ID]");

	if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "You have specified an invalid business ID.");

	if (BusinessData[bizid][bizType] != 6)
	    return SendErrorMessage(playerid, "Este negócio não é um posto de gasolina!");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		return SendErrorMessage(playerid, "Você só pode criar bombas de gasolina fora de interiores.");

	id = Pump_Create(playerid, bizid);

	if (id == -1)
	    return SendErrorMessage(playerid, "O negócio atingiu o limite para as bombas de gasolina.");

	SendServerMessage(playerid, "Você criou com sucesso bomba de gasolina ID: %d.", id);
	EditDynamicObject(playerid, PumpData[id][pumpObject]);

	PlayerData[playerid][pEditPump] = id;
	return 1;
}
CMD:editarbomba(playerid, params[])
{
    static
	    id;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	id = Pump_Nearest(playerid);

    if (id != -1)
	{
		SendServerMessage(playerid, "Você está editando a bomba de gasolina: %d.", id);
		EditDynamicObject(playerid, PumpData[id][pumpObject]);

		PlayerData[playerid][pEditPump] = id;
	}
	else
	{
	    SendErrorMessage(playerid, "Você precisa está perto de uma bomba de combustivel.");
	}
	return 1;
}

CMD:setbomba(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 9)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "dd", id, amount))
	    return SendSyntaxMessage(playerid, "/setbomba [bomba ID] [quantidade de gasolina]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "Bomba ID invalida.");

	PumpData[id][pumpFuel] = amount;

	Pump_Refresh(id);
	Pump_Save(id);

	SendServerMessage(playerid, "Você definiu o combustível para %d da bomba ID: %d.", amount, id);
	return 1;
}

CMD:abastecer(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
	{
	    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
		Business_Save(PlayerData[playerid][pGasStation]);

        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

		SendServerMessage(playerid, "Você reabasteceu seu veículo por $%d.", PlayerData[playerid][pRefillPrice]);
        StopRefilling(playerid);

        return 1;
	}
	if (!vehicleid)
	    return SendErrorMessage(playerid, "Você não está dentro de qualquer veículo!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Você deve ser o condutor do veículo!");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Você deve desligar o motor primeiro.");

	new id = Pump_Nearest(playerid);

	if (id != -1)
	{
		if (CoreVehicles[vehicleid][vehFuel] > 95)
			return SendErrorMessage(playerid, "Este veículo não necessita de qualquer tipo de combustível.");

		if (IsPumpOccupied(id))
		    return SendErrorMessage(playerid, "Esta bomba de combustível já está ocupada.");

		if (PumpData[id][pumpFuel] < 1)
   			return SendErrorMessage(playerid, "Esta bomba não tem combustível o suficiente.");

		PlayerData[playerid][pGasPump] = id;
		PlayerData[playerid][pGasStation] = PumpData[id][pumpBusiness];

		PlayerData[playerid][pRefill] = vehicleid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s começou a reabastecer seu veículo.", ReturnName(playerid, 0));
	}
	else
	{
		SendErrorMessage(playerid, "Você não está no alcance de qualquer bomba de combustível.");
	}
	return 1;
}

CMD:unmod(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Você deve ser dentro de seu veículo.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Este veículo é apreendido e você não pode usá-lo.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Você deve ser o motorista!");

		for (new i = 0; i < 14; i ++) {
		    RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);

		    CarData[carid][carMods][i] = 0;
		}
		Car_Save(carid);
		SendServerMessage(playerid, "Você removeu as modificações deste veículo.");
	}
	else SendErrorMessage(playerid, "Você não está dentro de qualquer veículo que você pode ser unmodify.");
	return 1;
}

CMD:portamalasver(playerid, params[])
{

	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{

	    if (IsVehicleImpounded(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "Este veículo é apreendido e você não pode usá-lo.");

	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

		if (!IsDoorVehicle(CarData[id][carVehicle]))
		    return SendErrorMessage(playerid, "Este veículo não tem um porta-malas.");

		if (CarData[id][carLocked])
		    return SendErrorMessage(playerid, "O porta-malas do veiculo está trancado.");

		Car_ShowTrunk(playerid, id);
	}
	

	return 1;
}

CMD:bnome(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/bnome [novo nome]");

		if (strlen(params) > 32)
		    return SendErrorMessage(playerid, "O nome da empresa não pode exceder 32 caracteres.");

		format(BusinessData[id][bizName], 32, params);

		Business_Refresh(id);
		Business_Save(id);

		SendServerMessage(playerid, "Nome da empresa definida como: \"%s\".", params);
	}
	else SendErrorMessage(playerid, "Você não está ao alcance do seu negócio.");
	return 1;
}

CMD:bmensagem(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/bmensagem [messagem] - Use \"none\" para desativar.");

		if (!strcmp(params, "none", true))
		{
		    BusinessData[id][bizMessage][0] = '\0';

			Business_Save(id);
			SendServerMessage(playerid, "Você removeu a mensagem do seu negócios.");
		}
		else
		{
			format(BusinessData[id][bizMessage], 128, params);

			Business_Save(id);
			SendServerMessage(playerid, "Mensagem do negócio definido para: \"%s\".", params);
		}
	}
	else SendErrorMessage(playerid, "Você não está ao alcance do seu negócio.");
	return 1;
}
CMD:moveis(playerid, params[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
        new
			count = 0,
			string[MAX_FURNITURE * 32];

        for (new i = 0; i != MAX_FURNITURE; i ++) if (count < MAX_HOUSE_FURNITURE && FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
    		ListedFurniture[playerid][count++] = i;

    		format(string, sizeof(string), "%s%s (%.2f metros)\n", string, FurnitureData[i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[i][furniturePos][0], FurnitureData[i][furniturePos][1], FurnitureData[i][furniturePos][2]));
		}
		if (count) {
			Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_LIST, "Lista de Movéis", string, "Selecionar", "Cancelar");
     	}
     	else SendErrorMessage(playerid, "Esta casa não tem qualquer mobiliário spawnado.");
	}
	else SendErrorMessage(playerid, "Você não está ao alcance do interior de sua casa.");
	return 1;
}

CMD:criaremprego(playerid, params[])
{
	static
	    type,
		id = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", type)){
	
		SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Caminhoneiro | 2: Mecanico | 3: Taxista | 4: Minerador | 5: Lixeiro");

	 	return 1;
	}
	
	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Tipo especificado inválido. Tipos variar desde 1 á 5.");

	id = Job_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para empregos.");

	SendServerMessage(playerid, "Você criou com sucesso o trabalho ID: %d.", id);
	return 1;
}

CMD:editaremprego(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editaremprego [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} local, tipo, ponto, entrega");
		return 1;
	}
	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "Você especificou um trabalho inválido.");

	if (!strcmp(type, "local", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPos][0] = x;
		JobData[id][jobPos][1] = y;
		JobData[id][jobPos][2] = z;

		JobData[id][jobInterior] = GetPlayerInterior(playerid);
		JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a localização do trabalho ID: %d.", ReturnName(playerid, 0), id);
	}
 	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/editaremprego [id] [tipo] [novo tipo]");

        if (typeint < 1 || typeint > 10)
	    	return SendErrorMessage(playerid, "Tipo especificado inválido. Tipos variar desde 1 á 10.");

	    JobData[id][jobType] = typeint;

	    Job_Refresh(id);
	    Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo do trabalho ID: %d para %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
	}
	else if (!strcmp(type, "ponto", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPoint][0] = x;
		JobData[id][jobPoint][1] = y;
		JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o ponto do trabalho ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "entrega", true))
	{
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Você não pode colocar o ponto de entregar dentro de interiores.");

	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobDeliver][0] = x;
		JobData[id][jobDeliver][1] = y;
		JobData[id][jobDeliver][2] = z;

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o ponto de entrega do trabalho ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:renunciar(playerid, params[])
{
	if (PlayerData[playerid][pJob] != 0)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pMinedRock])
		{
	    	PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);

			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER)
		{
			if (PlayerData[playerid][pUnloading] != -1)
			{
	   		 	PlayerData[playerid][pUnloading] = -1;
	    		PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pDeliverShipment])
			{
			    PlayerData[playerid][pShipment] = -1;
			    PlayerData[playerid][pDeliverShipment] = 0;

			    DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoading])
			{
	   	 		PlayerData[playerid][pLoading] = 0;
	    		PlayerData[playerid][pLoadType] = 0;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoadCrate])
 			{
  				PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
		}
		if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
		{
 			CoreVehicles[vehicleid][vehLoadType] = 0;
   			DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);
		}
		SendServerMessage(playerid, "Você saiu do seu trabalho como um \"%s\".", Job_GetName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = 0;
	}
	else SendErrorMessage(playerid, "Você não tem um trabalho para sair.");
	return 1;
}

CMD:trabalho(playerid, params[])
{
	static
	    id = -1;

	if ((id = Job_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pJob] == JobData[id][jobType])
	        return SendErrorMessage(playerid, "Você já tem esse trabalho.");

	    PlayerData[playerid][pJob] = JobData[id][jobType];

	    return SendServerMessage(playerid, "Você agora é um %s - use \"/tcmds\" para comandos de trabalho.", Job_GetName(JobData[id][jobType]));
	}
    SendErrorMessage(playerid, "Você não está no alcance de qualquer ponto de trabalho.");
	return 1;
}

CMD:descarregar(playerid, params[])
{
	new
		id = Business_NearestDeliver(playerid),
		vid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

    if (id == -1)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer ponto de entrega.");

 	if (!IsLoadableVehicle(vid))
  		return SendErrorMessage(playerid, "You are not inside any loadable vehicle.");

	if (!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
	    return SendErrorMessage(playerid, "Não há nada neste veículo.");

	if (PlayerData[playerid][pUnloading] != -1)
	    return SendErrorMessage(playerid, "Você já está descarregando suas caixas.");

	if (PlayerData[playerid][pShipment] != -1 && id != PlayerData[playerid][pShipment])
	    return SendErrorMessage(playerid, "Você não aceitou a carga para este negócio.");

	switch (CoreVehicles[vid][vehLoadType])
 	{
	 	case 1:
	 	{
	 	    if (BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Este negócio não pode aceitar esta carga (Tipo errado).");
		}
		case 2..4:
		{
		    if (BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
	 	        return SendErrorMessage(playerid, "Este negócio não pode aceitar esta carga (Tipo errado).");
		}
		case 5:
		{
		    if (BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Este negócio não pode aceitar esta carga (Tipo errado).");
		}
		case 6:
		{
		    if (BusinessData[id][bizType] != 7)
	 	        return SendErrorMessage(playerid, "Este negócio não pode aceitar esta carga (Tipo errado).");
		}
	}
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	DisableWaypoint(playerid);

	GetVehicleBoot(vid, fX, fY, fZ);
	RemovePlayerFromVehicle(playerid);

	PlayerData[playerid][pUnloading] = id;
	PlayerData[playerid][pUnloadVehicle] = vid;

	SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
	SendServerMessage(playerid, "Por favor, descarregar as caixas e entregá-los ao ponto.");

	return 1;
}

CMD:oficina(playerid, params[])
{
	static
 		id = -1;

	if ((id = Entrance_Nearest(playerid)) == -1)
		return SendClientMessage(playerid, COLOR_RED, "{00FF00}[Erro]: {FFFFFF}Você precisa estar na oficina.");

	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendErrorMessage(playerid, "Você não faz parte deste emprego.");

	if (strcmp(EntranceData[id][entranceName], "Mecanica") != 0)
		return SendClientMessage(playerid, COLOR_RED, "{00FF00}[Erro]: {FFFFFF}Você precisa estar na oficina.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você não está em qualquer veículo.");

	if (!IsDoorVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Você não pode ajustar este veículo.");

	if (!Inventory_HasItem(playerid, "Ferramentas"))
	    return SendErrorMessage(playerid, "Você não tem um kit de reparo com você.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "Você deve esperar %d segundos antes de tunar um veiculo novamente.", PlayerData[playerid][pRepairTime] - gettime());

	Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Tunar Veiculo", "Modificar Roda\nModificar Hidráulica\nAdicionar Nitro\nAicionar PaintJobs\nInstalar farol de Milha\nBlindar", "Selecionar", "Cancelar");
	return 1;
}

CMD:repararatm(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MECHANIC)
        return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

    if (IsPlayerInAnyVehicle(playerid))
        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

    if (!Inventory_HasItem(playerid, "Ferramentas"))
        return SendErrorMessage(playerid, "Você não tem um kit de reparo com você.");

    if (PlayerData[playerid][pRepairTime] > gettime())
        return SendErrorMessage(playerid, "Você deve esperar %d segundos antes de reparar novamente.", PlayerData[playerid][pRepairTime] - gettime());

    new atmid = ATM_Nearest(playerid);
    if (atmid == -1 || ATMData[atmid][atmDanificado] == 0)
        return SendErrorMessage(playerid, "Não há ATM danificado por perto.");

    Inventory_Remove(playerid, "Ferramentas");

    ATMData[atmid][atmDanificado] = 0;
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s começa a reparar o caixa eletrônico.", ReturnName(playerid, 0));
    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparando...~w~ Por favor aguarde", 5500, 3);

    SetTimerEx("RepairATM", 5000, false, "dd", playerid, atmid);
    return 1;
}

forward RepairATM(playerid, atmid);
public RepairATM(playerid, atmid)
{
    if (PlayerData[playerid][pJob] != JOB_MECHANIC || !IsPlayerInRangeOfPoint(playerid, 10.0, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2])) {
        return 0;
    }

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s consertou o caixa eletrônico após um trabalho cuidadoso.", ReturnName(playerid, 0));
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se sente cansado.", ReturnName(playerid, 0));
    PlayerData[playerid][pRepairTime] = gettime() + 60; // Cooldown até o próximo reparo
    SendClientMessage(playerid, COLOR_GREEN, "O governo lhe pagou 350 pelo trabalho.");
    GiveMoney(playerid, 350);
    
    ATM_Save(atmid);
    ATM_Refresh(atmid);

    return 1;
}

CMD:procurarveh(playerid, params[])
{

    new encontrados = 0;
    new string[128];



    for (new i = 1; i <= MAX_VEHICLES; i++) {
        if (IsLoadableVehicle(i) && CarData[i][carFaction] != 0) {

            // Obter a vida do veículo
            new Float:vida;
            GetVehicleHealth(CarData[i][carVehicle], vida);

            static Float:x, Float:y, Float:z;
            GetVehiclePos(CarData[i][carVehicle], x, y, z);

            if (vida <= 900) {
				SetPlayerCheckpoint(playerid, x, y, z, 4.0);  // Use apenas cinco argumentos aqui
                encontrados++;
            }
        }
    }

    if (encontrados == 0) {
        SendClientMessage(playerid, -1, "Nenhum veículo de facção com vida 900 encontrado.");
    } else {
        format(string, sizeof(string), "%d veículo(s) de facção com vida menor que 900 marcado(s) no mapa.", encontrados);
        SendClientMessage(playerid, -1, string);
    }

    return 1;
}

CMD:reparar(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	if (!Inventory_HasItem(playerid, "Ferramentas"))
	    return SendErrorMessage(playerid, "Você não tem um kit de reparo com você.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "Você deve esperar %d segundos antes de reparar novamente.", PlayerData[playerid][pRepairTime] - gettime());

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{

	    if (!IsEngineVehicle(i))
	        return SendErrorMessage(playerid, "Este veículo não pode ser reparado.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "A capo deve ser aberto antes de uma reparação.");

        if (CoreVehicles[i][vehRepairing])
            return SendErrorMessage(playerid, "Este veículo já está sendo reparado.");

        new Float:vida;
        GetVehicleHealth(CarData[i][carVehicle], vida);
        
       	if (CarData[i][carFaction] == 12 && vida >= 850 || CarData[i][carFaction] == 13 && vida >= 850 || CarData[i][carFaction] == 14 && vida >= 850){

    		SendClientMessage(playerid, -1, "Esse veiculo público, não possui necessidade de reparo, tem mais de 850 de HP.");
			return 1;
		}
            
		Inventory_Remove(playerid, "Ferramentas");
		ApplyAnimation(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);

        CoreVehicles[i][vehRepairing] = true;
        SetTimerEx("RepairCar", 5000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s começa a reparar o veículo.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparando...~w~ Por favor aguarde", 5500, 3);
		

		return 1;
	}
	SendErrorMessage(playerid, "Você não está qualquer veículo com capo.");
	return 1;
}

CMD:repararc(playerid, params[])
{
	static
 		id = -1;

	if ((id = Entrance_Nearest(playerid)) == -1)
		return SendClientMessage(playerid, COLOR_RED, "{00FF00}[Erro]: {FFFFFF}Você precisa estar na oficina.");

	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendErrorMessage(playerid, "Você não faz parte deste emprego.");

	if (strcmp(EntranceData[id][entranceName], "Mecanica") != 0)
		return SendClientMessage(playerid, COLOR_RED, "{00FF00}[Erro]: {FFFFFF}Você precisa estar na oficina.");
		
	if (!Inventory_HasItem(playerid, "Ferramentas"))
	    return SendErrorMessage(playerid, "Você não tem um kit de reparo com você.");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "Você deve esperar %d segundos antes de reparar novamente.", PlayerData[playerid][pRepairTime] - gettime());

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i))
	        return SendErrorMessage(playerid, "Este veículo não pode ser reparado.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "A capo deve ser aberto antes de uma reparação.");

        if (CoreVehicles[i][vehRepairing])
            return SendErrorMessage(playerid, "Este veículo já está sendo reparado.");

		Inventory_Remove(playerid, "Ferramentas");
		ApplyAnimation(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);

        CoreVehicles[i][vehRepairing] = true;
        SetTimerEx("RepairCarCompleto", 5000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s começa a reparar o veículo.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparando...~w~ Por favor aguarde", 5500, 3);
		return 1;
	}
	SendErrorMessage(playerid, "Você não está qualquer veículo com capo.");
	return 1;
}
CMD:nitro(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	if (!Inventory_HasItem(playerid, "Nitrogenio"))
	    return SendErrorMessage(playerid, "Você não tem um NOS canister com você.");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i) || IsABike(i) || IsABoat(i) || IsAPlane(i) || IsAHelicopter(i))
	        return SendErrorMessage(playerid, "Você não pode adicionar nitro para este veículo.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "A capo deve ser aberto antes de uma reparação.");

		Inventory_Remove(playerid, "Nitrogenio");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		AddComponent(i, 1010);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca um recipiente no motor do veículo.", ReturnName(playerid, 0));
		return 1;
	}
	SendErrorMessage(playerid, "Você não está qualquer veículo com capo.");
	return 1;
}

CMD:aceitarc(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (!PlayerData[playerid][pTaxiDuty])
	    return SendErrorMessage(playerid, "Você deve estar em serviço para aceitar chamadas.");

	Taxi_ShowCalls(playerid);
	return 1;
}
CMD:taxi(playerid, params[])
{
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (modelid != 438 && modelid != 420)
	    return SendErrorMessage(playerid, "Você deve estar dentro de um táxi.");

	if (PlayerData[playerid][pTaxiDuty])
	{
	    foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Você não está mais em serviço de táxi!");
	}
	else
	{
		SetPlayerColor(playerid, 0xF5DEB300);

	    PlayerData[playerid][pTaxiDuty] = true;
	    SendClientMessageToAllEx(COLOR_GREEN, "[TAXI]: %s está agora no dever de táxista. Use \"/ligar 1222\" para chamar um taxi!", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:telefone(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Telefone"))
	    return SendErrorMessage(playerid, "Você não tem um celular com você.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode usar este comando agora.");

	static
	    str[32];

	format(str, sizeof(str), "Telefone (#%d)", PlayerData[playerid][pPhone]);

	if (PlayerData[playerid][pPhoneOff]) {
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Discar o número\nMeus Contatos\nEnviar Mensagem de Texto\nLigar o telefone", "Selecionar", "Cancelar");
	}
	else {
	    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Discar o número\nMeus Contatos\nEnviar Mensagem de Texto\nDesligar o telefone", "Selecionar", "Cancelar");
	}
	return 1;
}
CMD:sms(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Telefone"))
	    return SendErrorMessage(playerid, "Você não tem um celular com você.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "O telefone deve estar ligado.");

	static
	    targetid,
		number,
		text[128];

	if (sscanf(params, "ds[128]", number, text))
	    return SendSyntaxMessage(playerid, "/sms [número de telefone] [messagem]");

	if (!number)
	    return SendErrorMessage(playerid, "O número de telefone especificado não está em serviço.");

	if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "Você não pode mandar sms à você mesmo!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "O destinatário tem o seu telefone desligado.");

        GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Voce foi ~r~cobrado~w~ $1 pelo sms.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[TEXTO]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TEXTO]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu telefone e envia um texto.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "O número de telefone especificado não está em serviço.");
	}
	return 1;
}

CMD:atender(playerid, params[])
{
	if (!PlayerData[playerid][pIncomingCall])
	    return SendErrorMessage(playerid, "Não há chamadas para aceitar.");

	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Você não pode usar este comando no momento.");

    if (PlayerData[playerid][pPhoneOff])
    	return SendErrorMessage(playerid, "O telefone deve estar ligado.");

	new targetid = PlayerData[playerid][pCallLine];

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	SendClientMessage(playerid, COLOR_YELLOW, "[SERVER]:{FFFFFF} Você respondeu à chamada.");
	SendClientMessage(targetid, COLOR_YELLOW, "[SERVER]:{FFFFFF}A outra linha aceitou o convite.");
	RemovePlayerAttachedObject(playerid, 9);
	SetPlayerAttachedObject(playerid, 9, 330, 6);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s atendeu uma chamada.", ReturnName(playerid, 0));
	return 1;
}

CMD:desligar(playerid, params[])
{
	new targetid = PlayerData[playerid][pCallLine];

	if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd])
	{
	    PlayerData[playerid][pEmergency] = 0;
	    PlayerData[playerid][pPlaceAd] = 0;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desligou o telefone.", ReturnName(playerid, 0));
        return 1;
	}
	if (targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Não há chamadas para desligar.");

	if (PlayerData[playerid][pIncomingCall])
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[TELEFONE]:{FFFFFF} Você recusou a chamada recebida.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[TELEFONE]:{FFFFFF} A outra linha recusou a chamada.");
     	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s recusou uma chamada.", ReturnName(playerid, 0));
	}
	else
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[TELEFONE]:{FFFFFF} Você desligou a chamada.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[TELEFONE]:{FFFFFF} A outra linha desligou a chamada.");
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
        SetPlayerSpecialAction(targetid, SPECIAL_ACTION_STOPUSECELLPHONE);
	    RemovePlayerAttachedObject(playerid, 9);
	    RemovePlayerAttachedObject(targetid, 9);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desligou seu celular.", ReturnName(playerid, 0));
	    SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "** %s desligou seu celular.", ReturnName(targetid, 0));
	}
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	return 1;
}

CMD:pintar(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MECHANIC)
    	return SendErrorMessage(playerid, "Você não tem o emprego de mecanico para personalizar o carro.");
    	
	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "Você não pode usar este comando no momento.");

	new vehicleid = GetNearestVehicle(playerid);

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Você não está perto de qualquer veículo.");

	if (!Inventory_HasItem(playerid, "Spray"))
	    return SendErrorMessage(playerid, "Você não tem nenhuma lata de tinta spray.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	static
 		colors[256];

	for (new i = 0; i < sizeof(colors); i ++) {
		colors[i] = i;
   	}
   	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors);
	return 1;
}

CMD:id(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/id [playerid/nome]");

	if (strlen(params) < 3)
		return SendErrorMessage(playerid, "Você deve especificar pelo menos 3 caracteres.");

	new count;

	foreach (new i : Player)
	{
	    if (strfind(ReturnName(i), params, true) != -1)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "** %s - ID: %d", ReturnName(i), i);
	        count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Nenhum membro corresponde aos critérios de pesquisa: \"%s\".", params);

	return 1;
}

CMD:binfo(playerid, params[])
{
    new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id)) {
     	SendServerMessage(playerid, "ID: %d | Negocio: %s | Produtos: %d | Cofre: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
	}
	else SendErrorMessage(playerid, "Você não está ao alcance do seu negócio.");
	return 1;
}

CMD:carregarcaixa(playerid, params[])
{
	new vehid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_UNLOADER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (!IsPlayerInWarehouse(playerid))
	    return SendErrorMessage(playerid, "Você deve estar dentro de um armazém para fazer isso.");

	if (GetVehicleModel(vehid) != 530)
	    return SendErrorMessage(playerid, "Voce nao esta em um forklift.");

	if (CoreVehicles[vehid][vehLoadType] == 7)
	    return SendErrorMessage(playerid, "Esta empilhadeira tem um caixote já carregado.");

	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1260.3976, -20.0215, 1001.0234))
	    return SendErrorMessage(playerid, "Você deve estar mais perto das caixas.");

	if (PlayerData[playerid][pLoading])
	    return SendErrorMessage(playerid, "Você já está carregando uma caixa no momento.");

	PlayerData[playerid][pLoading] = 1;

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Carregando caixa...", 3200, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s move a empilhadeira para o caixote.", ReturnName(playerid, 0));

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ForkliftUpdate", 3000, false, "dd", playerid, vehid);
	return 1;
}

CMD:minerar(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MINER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (PlayerData[playerid][pMining])
	{
	    PlayerData[playerid][pMining] = false;
	    PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
	    SendServerMessage(playerid, "Você terminou o seu trabalho de mineração.");
	}
	else
	{
	    PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

	    SendServerMessage(playerid, "Está agora a mineração! Use a tecla de atirar para começar a cavar.");
	    SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	return 1;
}

CMD:vendercomida(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 423)
 		return SendErrorMessage(playerid, "Você não está dentro de um caminhão de alimentos.");

	static
	    userid,
	    food[24],
	    price;

	if (sscanf(params, "us[24]d", userid, food, price))
	{
	    SendSyntaxMessage(playerid, "/vendercomida [playerid/nome] [nome da comida] [preço]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} agua, refrigerante, hamburger, pizza, frango");
	    return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 7.0))
	    return SendErrorMessage(playerid, "O jogador está desconectado ou não perto de você.");

	if (price < 1 || price > 20)
	    return SendErrorMessage(playerid, "O preço não pode ser inferior a  $1 ou acima de $20.");

	if (!strcmp(food, "agua", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 1;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s ofereceu-lhe um litro de água por $%d (use \"/aceitar comida\" para aceitar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Você ofereceu um litro de água para %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "refrigerante", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 2;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s ofereceu-lhe um litro de refrigerante por $%d (use \"/aceitar comida\" para aceitar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Você ofereceu um litro de refrigerante para %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "hamburger", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 3;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s ofereceu-lhe um hamburger por $%d (use \"/aceitar comida\" para aceitar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Você ofereceu um hamburger para %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "pizza", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 4;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s ofereceu-lhe uma pizza por $%d (use \"/aceitar comida\" para aceitar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Você ofereceu uma pizza para %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "frango", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 5;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s ofereceu-lhe um hamburger de frango por $%d (use \"/aceitar comida\" para aceitar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Você ofereceu um hamburger de frango para %s por $%d.", ReturnName(userid, 0), price);
	}
	return 1;
}

CMD:plantar(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/plantar [maconha /cocaina /heroina]");

	if (Plant_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "Você não pode plantar sementes perto de outras plantas.");

	if (!strcmp(params, "maconha", true))
	{
	    if (Inventory_Count(playerid, "Maconha Seeds") < 10)
	        return SendErrorMessage(playerid, "Você precisa de pelo menos 10 sementes de maconha.");

		Inventory_Remove(playerid, "Maconha Seeds", 10);

		Plant_Create(playerid, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s planta algumas sementes de maconha no chão.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "cocaina", true))
	{
	    if (Inventory_Count(playerid, "Cocaina Seeds") < 10)
	         return SendErrorMessage(playerid, "Você precisa de pelo menos 10 sementes de cocaina.");

		Inventory_Remove(playerid, "Cocaina Seeds", 10);

		Plant_Create(playerid, 2);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s planta algumas sementes de cocaina no chão.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "heroina", true))
	{
	    if (Inventory_Count(playerid, "Heroina Seeds") < 10)
	        return SendErrorMessage(playerid, "Você precisa de pelo menos 10 sementes de heroina.");

		Inventory_Remove(playerid, "Heroina Seeds", 10);

		Plant_Create(playerid, 3);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s planta algumas sementes de heroina no chão.", ReturnName(playerid, 0));
	}
	else {
	    SendSyntaxMessage(playerid, "/plantar [maconha /cocaina /heroina]");
	}
	return 1;
}

CMD:colher(playerid, params[])
{
	new id = Plant_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Você deve estar perto de uma fábrica de drogas.");

	if (PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
	    return SendErrorMessage(playerid, "Esta colheita ainda não está totalmente crescida.");

	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    return SendErrorMessage(playerid, "Você deve estar se agachar para colher de planta.");

	if (PlayerData[playerid][pHarvesting])
	    return SendErrorMessage(playerid, "Você já está colhendo uma planta.");

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Colhendo...", 3100, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s começa a colheita da plantação.", ReturnName(playerid, 0));

	PlayerData[playerid][pHarvesting] = 1;
	SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
	return 1;
}

CMD:criarfaccao(playerid, params[])
{
	static
	    id = -1,
		type,
		name[32];

    if (PlayerData[playerid][pAdmin] < 7 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/criarfaccao [tipo] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Governo | 2: Policial | 3: Medicos");
		SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 4: Judicial | 5: Gang");
	    
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo especificado inválido. Tipos variam de 1 a 6.");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para as facções.");

	SendServerMessage(playerid, "Você criou com sucesso a facção ID: %d.", id);
	return 1;
}

CMD:abrir(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Digite a Senha", "Digite a senha para esse portão abaixo:", "Ok", "Cancelar");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SendErrorMessage(playerid, "Você não pode abrir esta porta.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				    ShowPlayerFooter(playerid, "Voce ~r~fechou~w~ o portao!");

                case 1:
				    ShowPlayerFooter(playerid, "Voce ~r~abriu~w~ o portao!");
			}
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][0]))
	{
	    if (GetFactionType(playerid) != FACTION_PCESP)
	        return SendErrorMessage(playerid, "Você deve ser um agente da polícia para abrir esta porta.");

	    if (!PrisonData[prisonDoorOpened][0])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][0] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e abre a porta da prisão.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][0] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e fecha a porta da prisão.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][1]))
	{
	    if (GetFactionType(playerid) != FACTION_PCESP)
	        return SendErrorMessage(playerid, "Você deve ser um agente da polícia para abrir esta porta.");

	    if (!PrisonData[prisonDoorOpened][1])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][1] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e abre a porta da prisão.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 90.0);

			PrisonData[prisonDoorOpened][1] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e fecha a porta da prisão.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][2]))
	{
	    if (GetFactionType(playerid) != FACTION_PCESP)
	        return SendErrorMessage(playerid, "Você deve ser um agente da polícia para abrir esta porta.");

	    if (!PrisonData[prisonDoorOpened][2])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][2] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e abre a porta da prisão.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][2] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e fecha a porta da prisão.", ReturnName(playerid, 0));
		}
	}
	for (new i = 0; i < 24; i ++) if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonCells][i], 3.0))
	{
	    if (GetFactionType(playerid) != FACTION_PCESP)
	        return SendErrorMessage(playerid, "Você deve ser um agente da polícia para abrir esta porta.");

		if (!PrisonData[prisonCellOpened][i])
		{
			MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = true;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e abre a porta da prisão.", ReturnName(playerid, 0));
		}
		else
		{
		    MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = false;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s leva sua chave e fecha a porta da prisão.", ReturnName(playerid, 0));
		}
		break;
	}
	return 1;
}

CMD:drop(playerid, params[])
{
	new weaponid = 0;

	if ((weaponid = GetWeapon(playerid)) == 0)
	    return SendErrorMessage(playerid, "Você não pode largar uma arma a menos que você está segurando uma.");

	if (PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "Você não pode largar uma arma enquanto estiver em serviço.");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "Você não pode largar nenhuma arma agora.");


	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	x += 1.5 * floatsin(-angle, degrees);
	y += 1.5 * floatcos(-angle, degrees);

    DropItem(ReturnWeaponName(weaponid), ReturnName(playerid, 0), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	ResetWeapon(playerid, weaponid);

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s deixa um/a %s e ele cai no chão.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
 	Log_Write("logs/droppick.txt", "[%s] %s largou um/a %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}


CMD:editarfaccao(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 7 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarfaccao [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} nome, cor, tipo, modelos, armario, ranks, maxranks");
		return 1;
	}
	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "Você especificou uma facção inválida.");

    if (!strcmp(type, "nome", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarfaccao [id] [nome] [novo nome]");

	    format(FactionData[id][factionName], 32, name);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o nome da facção ID: %d para \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "maxranks", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editarfaccao [id] [maxranks] [maximo ranks]");

		if (ranks < 1 || ranks > 20)
		    return SendErrorMessage(playerid, "O rank especificado é Invalido. Somende de (1 a 20).");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o maximo de ranks da facção ID: %d para %d.", ReturnName(playerid, 0), id, ranks);
	}
	else if (!strcmp(type, "ranks", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "cor", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return SendSyntaxMessage(playerid, "/editarfaccao [id] [cor] [hex cor]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a {%06x}cor{FF6347} da facção ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editarfaccao [id] [tipo] [tipo de facção]");
	    	SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Governo | 2: Policial | 3: Medicos");
			SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 4: Judicial | 5: Gang");
            return 1;
		}
		if (typeint < 1 || typeint > 14)
		    return SendErrorMessage(playerid, "Tipo especificado inválido. Tipos variam de 1 a 13.");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo da facção ID: %d para %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "modelos", true))
	{
	    static
	        skins[8];

		for (new i = 0; i < sizeof(skins); i ++)
		    skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

	    PlayerData[playerid][pFactionEdit] = id;
		ShowModelSelectionMenu(playerid, "Facção Skins", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
	}
	else if (!strcmp(type, "armario", true))
	{
        PlayerData[playerid][pFactionEdit] = id;
		Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Armario da Facção", "Definir Localização\nArmário de Armas", "Selecionar", "Cancelar");
	}
	return 1;
}

CMD:armario(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "Você não está perto do armário de sua facção.");
	    
    if (FactionData[factionid][factionType] != FACTION_GANG)
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Armario da Facção", "Alternar Dever\nColete\nEscolher Skin\nEscolher Arma\n-----\nObjetos Policiais", "Selecionar", "Cancelar");


	else Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Armario da Facção", "Escolher Skin\nEscolher Arma", "Selecionar", "Cancelar");
	return 1;
}

CMD:setarlider(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/setarlider [playerid/nome] [facção id] (Use -1 para tirar)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "Você especificou uma facção inválida.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "Você removeu o líder de %s.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s retirou sua liderança da facção.", PlayerData[playerid][pNomeOOC]);
	}
	else
	{
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];

		SendServerMessage(playerid, "Você colocou %s como líder da facção \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s te colocou como líder da facção \"%s\".", PlayerData[playerid][pNomeOOC], FactionData[id][factionName]);
	}
    return 1;
}
CMD:asetarfaccao(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/asetarfaccao [playerid/nome] [facção id] (Use -1 para)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "Você especificou uma facção inválida.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "Você removeu a %s da sua facção.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s te retirou da sua facção.", PlayerData[playerid][pNomeOOC]);
	}
	else
	{
		SetFaction(userid, id);

		if (!PlayerData[userid][pFactionRank])
	    	PlayerData[userid][pFactionRank] = 1;

		SendServerMessage(playerid, "Você colocou a %s na facção \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s definiu sua facção para \"%s\".", PlayerData[playerid][pNomeOOC], FactionData[id][factionName]);
	}
    return 1;
}
CMD:asetarcargo(playerid, params[])
{
	static
		userid,
		rank,
		factionid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendSyntaxMessage(playerid, "/asetarfaccao [playerid/nome] [facção id] (Use -1 para)");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/asetarcargo [playerid/nome] [rank id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "Você especificou uma facção inválida.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Rank inválido. Ranks para esta facção de 1 a %d.", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendServerMessage(playerid, "Você colocou %s no rank %d da sua facção.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s definiu o seu rank para %d na sua facção.", PlayerData[playerid][pNomeOOC], rank);

    return 1;
}
//Comando Geral PMESP
CMD:contratar(playerid, params[])
{
	static
		userid,
		id;
    if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser do Comando Geral.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/contratar [playerid/nome] [facção id] (Use -1 para)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

    if (id < 0 || id > 8)
	    return SendErrorMessage(playerid, "Facção especificada inválido. Tipos variam de 0 a 8.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "Você removeu a %s da sua facção.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s te retirou da sua facção.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);

		if (!PlayerData[userid][pFactionRank])
	    	PlayerData[userid][pFactionRank] = 1;

		SendServerMessage(playerid, "Você colocou a %s na facção \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s definiu sua facção para \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}
//
CMD:setcargo(playerid, params[])
{
	static
		userid,
		rank,
		factionid;

    if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser do Comando Geral.");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/setcargo [playerid/nome] [rank id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "Você especificou uma facção inválida.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Rank inválido. Ranks para esta facção de 1 a %d.", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendServerMessage(playerid, "Você colocou %s no rank %d da sua facção.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s definiu o seu rank para %d na sua facção.", ReturnName(playerid, 0), rank);

    return 1;
}
//
CMD:membros(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	SendClientMessage(playerid, COLOR_SERVER, "Membros Online:");

	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid) {
		SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] %s - %s (%d)", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pFactionRank]);
	}
	return 1;
}

CMD:f(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(f)ac [messagem]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "Você deve habilitar primeiro o bate-papo da facção.");

	SendFactionMessage(factionid, COLOR_FACTION, "(( (%d) %s %s: %s ))", PlayerData[playerid][pFactionRank], Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:sairfaccao(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	if (GetFactionType(playerid) == FACTION_PCESP)
	{
	    SetPlayerArmour(playerid, 0);
	    ResetWeapons(playerid);
	}
	SendServerMessage(playerid, "Você saiu da facção \"%s\" (rank %d).", Faction_GetName(playerid), PlayerData[playerid][pFactionRank]);
    ResetFaction(playerid);

    return 1;
}
CMD:convidar(playerid, params[])
{
	new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	if (PlayerData[playerid][pFactionRank] < 5)
	     return SendErrorMessage(playerid, "Você deve ser, pelo menos, cargo 5.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/convidar [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");

	if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Esse jogador já faz parte da sua facção.");

    if (PlayerData[userid][pFaction] != -1)
	    return SendErrorMessage(playerid, "Aquele jogador já faz parte de outra facção.");

    //if (PlayerData[userid][pPlayingHours] < 5)
	   // return SendErrorMessage(playerid, "O Jogador deve ter 5 Horas jogadas para ser convidado.");

    SendServerMessage(userid,"Voce deve retirar seu porte de arma na Policia Federal.");
    SendServerMessage(playerid,"Novo oficial deve retirar o porte de armas na Policia Federal.");

	PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendServerMessage(playerid, "Você pediu %s para se juntar a \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s ofereceu-lhe para se juntar \"%s\" (use \"/aceitar faccao\").", ReturnName(playerid, 0), Faction_GetName(playerid));

	return 1;
}

CMD:despedir(playerid, params[])
{
    new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Você deve ser, pelo menos, rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/despedir [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Esse jogador não faz parte de sua facção.");

    SendServerMessage(playerid, "Você removeu %s da facção \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s te removeu da facção \"%s\".", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

	return 1;
}

CMD:promover(playerid, params[])
{
    new
	    userid,
		rankid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Você deve ser um membro de uma facção.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	     return SendErrorMessage(playerid, "Você deve ser, pelo menos, rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/promoverr [playerid/nome] [rank (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode definir o seu próprio cargo.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Esse jogador não faz parte de sua facção.");

	if (rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Rank inválido. Cargos variam de 1 a %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	PlayerData[userid][pFactionRank] = rankid;

    SendServerMessage(playerid, "Você promoveu a %s para %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
    SendServerMessage(userid, "%s promoveu você para %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

	return 1;
}

CMD:tazer(playerid, params[])
{

	if (!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "Você não pode pegar essa arma fora de serviço.");
        
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode usar este comando agora.");

	if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
	    GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pGuns][2], PlayerData[playerid][pAmmo][2]);

		GivePlayerWeapon(playerid, 23, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira um tazer de seu coldre.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca a sua tazer no seu coldre.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:balasborracha(playerid, params[])
{

	if (!PlayerData[playerid][pOnDuty])
        return SendErrorMessage(playerid, "Você não pode pegar essa arma fora de serviço.");
        
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode usar este comando agora.");

	if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (!PlayerData[playerid][pBeanBag])
	{
	    PlayerData[playerid][pBeanBag] = 1;
	    GetPlayerWeaponData(playerid, 3, PlayerData[playerid][pGuns][3], PlayerData[playerid][pAmmo][3]);

		GivePlayerWeapon(playerid, 25, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma espingarda não letal.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pBeanBag] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][3]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guarda uma espingarda não letal.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:algemar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "u", userid))
     return SendSyntaxMessage(playerid, "/algemar [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");


	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Você deve ficar perto do jogador.");

    if (PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendErrorMessage(playerid, "O jogador tem de estar inactivo ou atordoados.");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendErrorMessage(playerid, "O jogador deve estar a pé antes de algemá-lo.");

    if (PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "O jogador já esta algemado no momento.");

	static
	    string[64];

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	if (PlayerData[userid][pHoldWeapon] > 0)
	{
	    HoldWeapon(userid, 0);
	}
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Você não pode executar animações no momento.");

	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
	PlayerPlaySound(playerid,1188,0.0,0.0,0.0);

    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

	format(string, sizeof(string), "Voce foi ~r~algemado~w~ por %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca um par de algemas no pulso de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:desalgemar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "u", userid))
     return SendSyntaxMessage(playerid, "/desalgemar [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode desalgemar-se.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Você deve ficar perto do jogador.");
	    
    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "O jogador não está algemado no momento.");

	static
	    string[64];

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
    PlayerPlaySound(playerid,1188,0.0,0.0,0.0);

	format(string, sizeof(string), "Voce foi ~g~desalgemado~w~ por %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s solta o par de algemas do pulso de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:arrastar(playerid, params[])
{
	new
	    userid;

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/arrastar [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode arrastar-se.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Você deve ficar perto do jogador.");

    if (!PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned])
        return SendErrorMessage(playerid, "O jogador não está algemado ou atordoado.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s lança %s de suas mãos.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s agarra %s e começa a arrastá-lo.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:deter(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);

	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/deter [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Esse jogador está desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode se deter.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Você deve ficar perto do jogador.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "O jogador não está algemado no momento.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Você não está perto de qualquer veículo.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return SendErrorMessage(playerid, "Você não pode deter esse jogador neste veículo.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		TogglePlayerControllable(userid, 1);

		RemoveFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre a porta e puxa %s para fora do veículo.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return SendErrorMessage(playerid, "Não há mais assentos restantes.");

		new
		    string[64];

		format(string, sizeof(string), "Voce foi ~r~detido~w~ por %s.", ReturnName(playerid, 0));
		TogglePlayerControllable(userid, 0);

		StopDragging(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre a porta e puxa %s para dentro do veículo.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ShowPlayerFooter(userid, string);
	}
	return 1;
}

CMD:criarprisao(playerid, params[])
{
	SendServerMessage(playerid, "Preicsar atualizar o comando para criar prisao de forma automatica");
	return 1;
}

CMD:mdc(playerid, params[])
{
    if (GetFactionType(playerid) !=  FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
	return SendErrorMessage(playerid, "Você deve ser um polícial.");

	if (!Computador(playerid) && !IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Você deve estar dentro de um carro da polícia ou em um Computador da Policia Civil.");

	Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Sistema Integrado", "Procurados Ativos\nColocar Crime\nVer Crime\nDados Veiculares", "Selecionar", "Cancelar");
	//Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "Pessoa", "RG (ID do Player)", "Consultar", "Cancelar");
	//Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "Pesquisar Placa", "PROCURAR PLACA\n\nInserir informações da placa:", "Selecionar", "Voltar");
	return 1;
}

CMD:prender(playerid, params[])
{
	static
	    userid,
	    id = -1,
		time;
		
	id = Entrance_Nearest(playerid);

    if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "ud", userid, time))
	    return SendSyntaxMessage(playerid, "/prender [playerid/nome] [minutos]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "O jogador está desconectado ou não perto de você.");

	if (time < 1 || time > 180)
	    return SendErrorMessage(playerid, "O tempo especificado não pode ser inferior a 1 ou superior a 180.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "O jogador deve ser algemado antes de uma prisão ser feita.");

	if (strcmp(EntranceData[id][entranceName], "Apreensao") != 0)
		return SendErrorMessage(playerid, "Você deve estar perto de um ponto de prisão.");

	PlayerData[userid][pPrisoned] = 2;
	PlayerData[userid][pJailTime] = time * 60;

	StopDragging(userid);
	SetPlayerInPrison(userid);

	ResetWeapons(userid);
	ResetPlayer(userid);

	PlayerData[userid][pWarrants] = 0;
	PlayerData[userid][pCuffed] = 0;
	PlayerDrunk[userid] = 0; //bafometro bbebado

	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
    
    SendFactionMessageEx(FACTION_PCESP, COLOR_RADIO, "[Prisão] %s %s prendeu %s por %d minutos", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(userid, 0), time);
    //SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "[Prisão] ", ReturnName(playerid, 0), GetPlayerLocation(playerid));
    SendClientMessageToAllEx(COLOR_LIGHTRED, "[Prisão] %s foi preso por %d dias.", ReturnName(userid, 0), time);
    SendNearbyMessage(userid, 30.0, COLOR_PURPLE, "***[CARCEREIRO GRITA] %s foi preso por %d dias.", ReturnName(userid, 0), time * 60);
    return 1;
}

CMD:destruirplanta(playerid, params[])
{
	static
	    plantid;

    if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if ((plantid = Plant_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Você não está perto de qualquer planta de drogas.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s apreendeu um pé de %s que pesava %d gramas.", ReturnName(playerid, 0), Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs]);
	Plant_Delete(plantid);
	return 1;
}

CMD:embarcarferido(playerid, params[])
{
	static
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você precisa ser da GRPAE.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/embarcarferidoo [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 30.0))
	    return SendErrorMessage(playerid, "Este player está desconectado ou não está próximo de você.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode carregar você mesmo para a ambulância.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Este player não está ferido.");

	for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 497)
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendErrorMessage(playerid, "Não há espaço para o paciente.");

		ClearAnimations(userid);
		PlayerData[userid][pInjured] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre a porta do Helicoptero e carrega %s na maca.", ReturnName(playerid, 0), ReturnName(userid, 0));

		TogglePlayerControllable(userid, 0);
		SetPlayerHealth(userid, 100.0);
		Delete3DTextLabel(deathlabel[userid]);

		sInfo[userid][Misc] = 0;
		sInfo[userid][Head] = 0;
		sInfo[userid][Chest] = 0;
		sInfo[userid][Crotch] = 0;
		sInfo[userid][LArm] = 0;
		sInfo[userid][RArm] = 0;
		sInfo[userid][LLeg] = 0;
		sInfo[userid][RLeg] = 0;
		return 1;
	}
	SendErrorMessage(playerid, "Você deve estar perto do Helicoptero.");
	return 1;
}
//////////////////////////////////////////////////////////////////
CMD:subirpt(playerid, params[])
{
	static
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_MEDICOS)
	    return SendErrorMessage(playerid, "Você deve ser parte de uma facção médica.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/subirpt [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendErrorMessage(playerid, "Esse jogador está desconectado ou não está perto de você.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode carregar-se para uma ambulância.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Esse jogador não está lesionado.");

	for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
	{

		PlayerData[userid][pInjured] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre-se a ambulância e coloca %s na maca.", ReturnName(playerid, 0), ReturnName(userid, 0));

        SetPlayerPos(userid, 2003.2686, 2285.9163, 1011.9437);
	    SetPlayerFacingAngle(userid, 270.3132);
		SetPlayerInterior(userid, 0);
  		ApplyAnimation(userid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(userid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        SendServerMessage(userid, "Você esta sendo encaminhao ao hospital.");

		TogglePlayerControllable(userid, 0);
		SetPlayerHealth(userid, 100.0);
		Delete3DTextLabel(deathlabel[userid]);
		return 1;
	}
	SendErrorMessage(playerid, "Você deve estar perto de uma ambulância.");
	return 1;
}

CMD:deixarpt(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_MEDICOS)
	    return SendErrorMessage(playerid, "Você deve ser dos Bombeiros ou GRPAE.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/deixarpt [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Esse jogador está desconectado ou não está perto de você.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode entregar-se ao hospital.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Esse jogador não está lesionado.");

	for (new i = 0; i < sizeof(arrHospitalDeliver); i ++) if (IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
	{
	    ClearAnimations(userid);
	    SendServerMessage(playerid, "Você entregou %s para o hospital.", ReturnName(userid, 0));

		SetPlayerVirtualWorld(userid, i + 5000);
  		PlayerData[userid][pHospitalInt] = i;

	  	PlayerData[userid][pHospital] = -1;

    	//
	    PlayerData[userid][pHunger] = 50;
	    PlayerData[userid][pThirst] = 50;

		SetPlayerInterior(userid, 3);

		SetPlayerPos(userid, 1175.9951, -1331.0658, 2424.1016);
		SetPlayerFacingAngle(userid, 82.0000);

        ApplyAnimation(userid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(userid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

    	SendServerMessage(userid, "Você irá se recuperar no hospital mais próximo.");

		GameTextForPlayer(userid, " ", 1, 3);
  		ShowHungerTextdraw(userid, 1);

  		PlayerData[userid][pInjured] = 0;
		TextDrawHideForPlayer(userid, gServerTextdraws[2]);
		SetTimerEx("SairdoHospital",60000,true,"i",userid);
		return 1;
	}
	SendErrorMessage(playerid, "Você deve estar perto de um hospital.");
	return 1;
}

CMD:m(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) != FACTION_MEDICOS)
	    return SendErrorMessage(playerid, "Você não pode usar o megafone.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(m)egafone [messagem]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "(Megafone) %s diz: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "(Megafone) %s diz: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}
CMD:curativo(playerid, params[])
{
    static
	    userid;

	if (GetFactionType(playerid) != FACTION_MEDICOS && GetFactionType(playerid) != FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você deve ser parte de uma facção médica.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/curativo [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Esse jogador está desconectado ou não está perto de você.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode usar este comando em si mesmo.");

	if (PlayerData[userid][pFirstAid])
	    return SendErrorMessage(playerid, "Esse jogador já esta sendo socorrido.");

    if (ReturnHealth(userid) > 99)
	    return SendErrorMessage(playerid, "Esse jogador não precisa ser socorrido.");

    PlayerData[userid][pFirstAid] = true;
    PlayerData[userid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", userid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre um kit de primeiros socorros e usa um curativo no %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}
CMD:pagar(playerid, params[])
{
	static
	    userid,
	    amount;

	if (sscanf(params, "ud", userid, amount))
	    return SendSyntaxMessage(playerid, "/pagar [playerid/nome] [valor]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador está desconectado ou não está perto de você.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Você não pode dar-se o dinheiro.");

	if (amount < 1)
	    return SendErrorMessage(playerid, "Por favor, especifique um valor acima de $1.");

	if (amount > 100 && PlayerData[playerid][pPlayingHours] < 2)
	    return SendErrorMessage(playerid, "Você não pode pagar acima de $100 com menos de 2 horas de jogadas.");

	if (amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Você não tem esse valor de dinheiro.");

	static
	    string[72];

	GiveMoney(playerid, -amount);
	GiveMoney(userid, amount);

	format(string, sizeof(string), "Voce recebeu ~g~%s~w~ de %s.", FormatNumber(amount), ReturnName(playerid, 0));
	ShowPlayerFooter(userid, string);

	format(string, sizeof(string), "Voce pagou ~r~%s~w~ para %s.", FormatNumber(amount), ReturnName(userid, 0));
	ShowPlayerFooter(playerid, string);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira %s de sua carteira e entrega nas mãos de %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
	Log_Write("logs/pay_log.txt", "[%s] %s (%s) pagou %s para %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:faccoes(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");
	    
	ViewFactions(playerid);
	return 1;
}

CMD:dept(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    
	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) != FACTION_MEDICOS && GetFactionType(playerid) != FACTION_JUDICIAL)
	    return SendErrorMessage(playerid, "Você deve ser um trabalhador da função pública.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/d [rádio departamento]");
		{
		if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    	return SendErrorMessage(playerid, "Você deve estar dentro de uma viatura da policia para falar no radio.");
		    
		    {
		    SetVehicleRadio(vehicleid, "");
			//SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s liga o radio px da viatura.", ReturnName(playerid, 0));
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu Radio PX e se comunica.", ReturnName(playerid, 0));
			}
		}
	for (new i = 0; i != MAX_FACTIONS; i ++) if(FactionData[i][factionType] == FACTION_PCESP || FactionData[i][factionType] == FACTION_MEDICOS
	|| FactionData[i][factionType] == FACTION_GOV || FactionData[i][factionType] == FACTION_JUDICIAL){
	SendFactionMessage(i, COLOR_DEPARTMENT, "[%s] %s %s: %s", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	}
	Log_Write("logs/faction_chat.txt", "[%s] [/d] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:gps(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Sistema de GPS"))
	    return SendErrorMessage(playerid, "Você deve ter um sistema de GPS para utilizar este comando.");

	if (PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "Você não pode usar este comando no momento.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "GPS", "Localizar Casa\nLocalizar Negocio\nLocalizar Entrada\nLocalizar Trabalho\nLocais Personalizados", "Selecionar", "Cancelar");
	return 1;
}

CMD:usargalao(playerid, params[])
{
	new vehicleid = GetNearestVehicle(playerid);

	if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Você não está perto de qualquer veículo.");

	if (!Inventory_HasItem(playerid, "Lata de Gasolina"))
	    return SendErrorMessage(playerid, "Você não tem nenhum latas de combustível com você.");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Você deve desligar o motor primeiro.");

	if (CoreVehicles[vehicleid][vehFuel] > 95)
	    return SendErrorMessage(playerid, "Este veículo não necessita de qualquer tipo de combustível.");

	if (PlayerData[playerid][pFuelCan])
	    return SendErrorMessage(playerid, "Você já está usando uma lata de combustível.");

    PlayerData[playerid][pFuelCan] = 1;

	Inventory_Remove(playerid, "Lata de Gasolina");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Abastecendo Veiculo...", 5200, 3);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre uma lata de combustível e coloca no tanque do veículo.", ReturnName(playerid, 0));
	SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);

	return 1;
}

CMD:sos(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/sos [razão]");

    if (PlayerData[playerid][pHelpTime] >= gettime())
	    return SendErrorMessage(playerid, "Você deve esperar %d segundos antes de enviar outra solicitação.", PlayerData[playerid][pHelpTime] - gettime());

	PlayerData[playerid][pSeekHelp] = 1;
	SendTesterMessage(COLOR_CYAN, "[SOS]: %s (ID: %d) Pergunta: \"%s\"", ReturnName(playerid, 0), playerid, params);

	PlayerData[playerid][pHelpTime] = gettime() + 15;
	SendServerMessage(playerid, "Você enviou um pedido de ajuda.");
	return 1;
}

CMD:pm(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/pm [playerid/nome] [messagem]");

	if (PlayerData[playerid][pDisablePM])
		return SendErrorMessage(playerid, "Você deve habilitar o envio de mensagens privadas primeiro.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode mensagem privada a mesmo.");

	if (PlayerData[userid][pDisablePM])
	    return SendErrorMessage(playerid, "Esse jogador tem desativado as mensagens privadas.");
	    
	if(PlayerData[playerid][pAdmin] < 1 && PlayerData[userid][pAdmin] < 1)
		return SendClientMessage(playerid, COLOR_GREY, "Voce não é um admin ou o player que você digitou não é admin!");



	//GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Nova messagem!", 3000, 3);
	//PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);

	SendClientMessageEx(userid, COLOR_YELLOW, "(( PM de %s (%d): %s ))", ReturnName(playerid, 0), playerid, text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "(( PM para %s (%d): %s ))", ReturnName(userid, 0), userid, text);
	return 1;
}

CMD:tog(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/tog [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} ooc, pm, faccao, tester, noticiario, velocimetro");
	    return 1;
	}
	if (!strcmp(params, "ooc", true))
	{
	    if (!PlayerData[playerid][pDisableOOC])
	    {
	        PlayerData[playerid][pDisableOOC] = 1;
         	SendServerMessage(playerid, "Você desativou o chat OOC (/tog para ativar).");
		}
		else
		{
  			PlayerData[playerid][pDisableOOC] = 0;
  			SendServerMessage(playerid, "Você ativou o chat OOC.");
		}
	}
	else if (!strcmp(params, "pm", true))
	{
	    if (!PlayerData[playerid][pDisablePM])
	    {
			PlayerData[playerid][pDisablePM] = 1;
   			SendServerMessage(playerid, "Você desativou as menssagens privadas (/tog para ativar).");
		}
		else
		{
  			PlayerData[playerid][pDisablePM] = 0;
       		SendServerMessage(playerid, "Você ativou as menssagens privadas.");
		}
	}
	else if (!strcmp(params, "faccao", true))
	{
	    if (PlayerData[playerid][pFaction] == -1)
	        return SendErrorMessage(playerid, "Você não faz parte de qualquer facção.");

	    if (!PlayerData[playerid][pDisableFaction])
	    {
	        PlayerData[playerid][pDisableFaction] = 1;
			SendServerMessage(playerid, "Você desativou o chat da facção (/tog para ativar).");
		}
		else
		{
  			PlayerData[playerid][pDisableFaction] = 0;
     		SendServerMessage(playerid, "Você ativou o chat da facção.");
		}
	}
	else if (!strcmp(params, "tester", true))
	{
	    if (!PlayerData[playerid][pTester])
	        return SendErrorMessage(playerid, "Você não é um tester.");

	    if (!PlayerData[playerid][pDisableTester])
	    {
	        PlayerData[playerid][pDisableTester] = 1;
			SendServerMessage(playerid, "Você desativou o chat tester (/tog para ativar).");
		}
		else
		{
  			PlayerData[playerid][pDisableTester] = 0;
     		SendServerMessage(playerid, "Você ativou o chat tester.");
		}
	}
	else if (!strcmp(params, "noticiario", true))
	{
	    if (!PlayerData[playerid][pDisableBC])
	    {
	        PlayerData[playerid][pDisableBC] = 1;
			SendServerMessage(playerid, "Você desativou o noticiário (/tog para ativar).");
		}
		else
		{
  			PlayerData[playerid][pDisableBC] = 0;
     		SendServerMessage(playerid, "Você ativou o noticiário.");
		}
	}
	else if (!strcmp(params, "velocimetro", true))
	{
	    if (!PlayerData[playerid][pDisableSpeedo])
	    {
	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
	        PlayerData[playerid][pDisableSpeedo] = 1;
			SendServerMessage(playerid, "Você desativou o velocímetro (/tog para ativar).");
		}
		else
		{
		    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
  			PlayerData[playerid][pDisableSpeedo] = 0;
     		SendServerMessage(playerid, "Você ativou o velocímetro.");
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/multar [playerid/name] [preço] [infração]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador está desconectado ou não está perto de você.");

	//if (userid == playerid)
	//    return SendErrorMessage(playerid, "Você não pode se multar.");

	if (price < 150 || price > 8500)
	    return SendErrorMessage(playerid, "O preço não pode ser inferior a R$150,00 ate R$ 8500,00.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "Você deu a %s uma multa de %s, infração: %s", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s te deu uma multa de %s, infração: %s", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aplicou uma multa em %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	    Log_Write("logs/ticket_log.txt", "[%s] %s deu uma multa a %s de %s, infração: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
	}
	else {
	    SendErrorMessage(playerid, "Esse cidadão já tem %d multas não pagas, devera apresenta-lo a Delegacia.", MAX_PLAYER_TICKETS);
	}
	return 1;
}

CMD:multas(playerid, params[])
{
	static
	    string[MAX_PLAYER_TICKETS * 64];

	string[0] = 0;

	for (new i = 0; i < MAX_PLAYER_TICKETS; i ++)
	{
	    if (TicketData[playerid][i][ticketExists])
	        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

		else format(string, sizeof(string), "%sSlot Vazio\n", string);
	}
	return Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "Minhas multas", string, "Pagar", "Cancelar");
}

CMD:deletarconta(playerid, params[])
{
	static
	    query[64];

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/deletarconta [username]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Você especificou um formato de nome inválido.");

	foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params, true)) {
	    return SendErrorMessage(playerid, "Você não pode excluir a conta de um jogador online.");
	}
	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteAccount", "ds", playerid, params);

	return 1;
}

CMD:campanhia(playerid, params[])
{
	new id = House_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Você deve estar perto de uma casa.");

	foreach (new i : Player) if (House_Inside(i) == id) {
	    SendClientMessage(i, COLOR_PURPLE, "** Você pode ouvir o toque de campainha.");
	    PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toca a campainha da casa.", ReturnName(playerid, 0));
	return 1;
}
CMD:criarportao(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para os portões.");

	SendServerMessage(playerid, "Você criou com sucesso o portão ID: %d.", id);
	return 1;
}

CMD:editarportao(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarportao [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} local, velocidade, raio, tempo, modelo, pos, move, senha, linkid, faccao");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "Você especificou um portão inválido.");

    if (!strcmp(type, "local", true))
	{
		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		x += 3.0 * floatsin(-angle, degrees);
		y += 3.0 * floatcos(-angle, degrees);

		GateData[id][gatePos][0] = x;
		GateData[id][gatePos][1] = y;
		GateData[id][gatePos][2] = z;
		GateData[id][gatePos][3] = 0.0;
		GateData[id][gatePos][4] = 0.0;
		GateData[id][gatePos][5] = angle;

		SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
		SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);

		GateData[id][gateOpened] = false;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a posição do portão ID: %d.", ReturnName(playerid, 0), id);
		return 1;
	}
	else if (!strcmp(type, "velocidade", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [velocidade] [velocidade do movimento]");

		if (speed < 0.0 || speed > 20.0)
		    return SendErrorMessage(playerid, "A velocidade especificada não pode ser inferior a 0 ou acima de 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a velocidade do portão ID: %d para %.2f.", ReturnName(playerid, 0), id, speed);
		return 1;
	}
	else if (!strcmp(type, "raio", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [raio] [raio para abrir]");

		if (radius < 0.0 || radius > 20.0)
		   return SendErrorMessage(playerid, "O raio especificado não pode ser inferior a 0 ou acima de 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o raio do portão ID: %d para %.2f.", ReturnName(playerid, 0), id, radius);
		return 1;
	}
	else if (!strcmp(type, "tempo", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [tempo] [tempo para fechar] (0 para desativar)");

		if (time < 0 || time > 60000)
		    return SendErrorMessage(playerid, "O tempo especificado não pode ser menor que 0 ou acima 60,000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tempo perto do portão ID: %d para %d.", ReturnName(playerid, 0), id, time);
		return 1;
	}
	else if (!strcmp(type, "modelo", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [modelo] [modelo do portao]");

		if (!IsValidObjectModel(model))
		    return SendErrorMessage(playerid, "Modelo de objeto inválido.");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o modelo do portão ID: %d para %d.", ReturnName(playerid, 0), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 1;

		SendServerMessage(playerid, "Está agora a ajustar a posição do portão ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "move", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		SendServerMessage(playerid, "Está agora a ajustar a posição de portão em movimento ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SendErrorMessage(playerid, "Você especificou um portão inválido.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a facção do portão ID: %d para nenhum portão.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a facção do portão ID: %d para ID: %d.", ReturnName(playerid, 0), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faccao", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [faccao] [portao da faccao] (-1 pra nenhuma)");

        if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
      				return SendErrorMessage(playerid, "Você especificou uma facção inválido.");

        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
		Gate_Save(id);

		if (factionid == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o portao ID: %d para nenhuma facção.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o portao ID: %d para a facção \"%s\".", ReturnName(playerid, 0), id, FactionData[factionid][factionName]);

		return 1;
	}
	else if (!strcmp(type, "senha", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SendSyntaxMessage(playerid, "/editarportao [id] [senha] [senha do portao] (Use 'none' para desativar)");

		if (!strcmp(params, "none", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a senha do portao ID: %d para %s.", ReturnName(playerid, 0), id, pass);
		return 1;
	}
	return 1;
}
CMD:setardinheiro(playerid, params[])
{
	static
		userid,
	    amount;

	if (PlayerData[playerid][pAdmin] < 9)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/dardinheiro [playerid/nome] [valor]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	GiveMoney(userid, amount);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s deu %s para %s.", PlayerData[playerid][pNomeOOC], FormatNumber(amount), ReturnName(userid, 0));
 	Log_Write("logs/setardinheiro_log.txt", "[%s] %s deu %s para %s.", ReturnDate(), PlayerData[playerid][pNomeOOC], FormatNumber(amount), ReturnName(userid, 0));

	return 1;
}

CMD:usardroga(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/usardroga [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} maconha, cocaina, heroina, steroids");
		return 1;
	}
	if (PlayerData[playerid][pDrugTime] > 0)
	    return SendErrorMessage(playerid, "Por favor, aguarde até que os efeitos tenham passados primeiro.");

	if (!strcmp(params, "maconha", true))
	{
	    if (Inventory_Count(playerid, "Maconha") < 2)
	        return SendErrorMessage(playerid, "Você precisa de pelo menos 2 gramas de maconha.");

        PlayerData[playerid][pDrugTime] = 20;
		PlayerData[playerid][pDrugUsed] = 1;

		Inventory_Remove(playerid, "Maconha", 2);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um isqueiro e acende-se um cigarro de maconha.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "cocaina", true))
	{
	    if (Inventory_Count(playerid, "Cocaina") < 2)
	        return SendErrorMessage(playerid, "Você precisa de pelo menos 2 gramas de cocaina.");

        PlayerData[playerid][pDrugTime] = 35;
		PlayerData[playerid][pDrugUsed] = 2;

		Inventory_Remove(playerid, "Cocaina", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um pouco de cocaína e cheira.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "heroina", true))
	{
	    if (Inventory_Count(playerid, "Heroina") < 2)
	        return SendErrorMessage(playerid, "Você precisa de pelo menos 2 gramas de heroina.");

        PlayerData[playerid][pDrugTime] = 30;
		PlayerData[playerid][pDrugUsed] = 3;

		Inventory_Remove(playerid, "Heroina", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um pouco de heroína e injeta-la.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "steroids", true))
	{
	    if (!Inventory_HasItem(playerid, "Steroids"))
	        return SendErrorMessage(playerid, "Você precisa de pelo menos um comprimido de esteróide.");

		if (ReturnHealth(playerid) <= 5)
		    return SendErrorMessage(playerid, "Sua saúde é muito baixo para tomar esteróides.");

        PlayerData[playerid][pDrugTime] = 60;
		PlayerData[playerid][pDrugUsed] = 4;

		SetPlayerHealth(playerid, ReturnHealth(playerid) - 5);
		Inventory_Remove(playerid, "Steroids", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega alguns esteróides e engole.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:idg(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (PlayerData[playerid][pFingerTime] > 0)
	    return SendErrorMessage(playerid, "Você já está usando o scanner de impressão digital.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s corre o scanner de impressão digital sobre um item.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
	}
	SendErrorMessage(playerid, "Não há nenhum item nas proximidades.");
	return 1;
}

CMD:criarcarro(playerid, params[])
{
	static
		model[32],
		color1,
		color2,
		id = -1,
		type = 0;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "s[32]I(-1)I(-1)I(0)", model, color1, color2, type))
 	{
	 	SendSyntaxMessage(playerid, "/criarcarro [modelo id/nome] [cor 1] [cor 2] <facção>");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Governo | 2: Policial | 3: Medicos");
		SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 4: Judicial | 5: Gang");
	 	return 1;
	}
	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Modelo Invalido.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Car_Create(0, model[0], x, y, z, angle, color1, color2, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para veículos dinâmicos.");

	SetPlayerPosEx(playerid, x, y, z + 2, 1000);
	SendServerMessage(playerid, "Você criou com sucesso o veículo ID: %d.", CarData[id][carVehicle]);
	return 1;
}

CMD:destruircarro(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/destruircarro [veiculo id]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	Car_Delete(Car_GetID(id));
	SendServerMessage(playerid, "Você destruiu com sucesso o veículo ID: %d.", CarData[id][carVehicle]);
	return 1;
}


CMD:setaritem(playerid, params[])
{
	static
	    userid,
		item[32],
		amount;

	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "uds[32]", userid, amount, item))
	    return SendSyntaxMessage(playerid, "/setaritem [playerid/nome] [valor] [item nome]");

    if (IsFurnitureItem(item))
	{
	    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
		{
	        Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);

			SendServerMessage(playerid, "Você definiu a %s a \"%s\" para %d.", ReturnName(userid, 0), item, amount);
			return 1;
		}
	}
	else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
	{
	    if (!strcmp(item, "Telefone", true)) {
	        PlayerData[userid][pPhone] = random(90000) + 10000;
	    }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);

		return SendServerMessage(playerid, "Você definiu a %s \"%s\" para %d.", ReturnName(userid, 0), item, amount);
	}
	SendErrorMessage(playerid, "Nome do item inválido (use /listaitem para ver a lista).");
	Log_Write("logs/setaritem_log.txt", "[%s][ADMIN:] %s setou item para %s o item %s na quantidade de: %d.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), item, amount);
	return 1;
}

CMD:listaitem(playerid, params[])
{
	static
	    string[1024];

	if (!strlen(string)) {
		for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
			format(string, sizeof(string), "%s%s\n", string, g_aInventoryItems[i][e_InventoryItem]);
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Lista de Itens", string, "Selecionar", "Cancelar");
}


CMD:liberarveiculo(playerid, params[])
{
	new
	    string[32 * MAX_OWNABLE_CARS],
		count;

	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (count < MAX_OWNABLE_CARS && CarData[i][carExists] && Car_IsOwner(playerid, i) && CarData[i][carImpounded] != -1)
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, ReturnVehicleName(CarData[i][carVehicle]), FormatNumber(CarData[i][carImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	    SendErrorMessage(playerid, "Você não tem nenhum veículo apreendidos.");

	else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_LIST, "Liberar Veiculo", string, "Selecionar", "Cancelar");
	return 1;
}
CMD:rebocar(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "Você não está dirigindo um caminhão de reboque.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Você não é o motorista.");

	new vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "Não há nenhum veículo dentro do alcance.");

	if (!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid))
	    return SendErrorMessage(playerid, "Você não pode rebocar este veículo.");
    
	AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s enganchou um %s em seu caminhão de reboque.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

CMD:deixarcarro(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "Você não está dirigindo um caminhão de reboque.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	     return SendErrorMessage(playerid, "Você não é o motorista.");

	new
	    trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

    if (!trailerid)
	    return SendErrorMessage(playerid, "Não há veículo enganchado no caminhão.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tem desenganchado o %s do seu caminhão de reboque.", ReturnName(playerid, 0), ReturnVehicleName(trailerid));

	return 1;
}

CMD:apreender(playerid, params[])
{
	new
		price,
		id = Entrance_Nearest(playerid),
		vehicleid = GetPlayerVehicleID(playerid);
		
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
		return SendErrorMessage(playerid, "Você não faz parte deste emprego.");

	if (strcmp(EntranceData[id][entranceName], "PatioApreensao") != 0)
		return SendErrorMessage(playerid, "Você não esta perto de qualquer lote de apreensão.");

	if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    if (sscanf(params, "d", price))
        return SendSyntaxMessage(playerid, "/apreender [preço]");

	if (price < 1 || price > 3500)
	    return SendErrorMessage(playerid, "O preço não pode ser acima de  $3.500 ou abaixo de $1.");

	if (GetVehicleModel(vehicleid) != 525)
	    return SendErrorMessage(playerid, "Você não está dirigindo um caminhão de reboque.");

	if (!GetVehicleTrailer(vehicleid))
	    return SendErrorMessage(playerid, "Não há veículo enganchado no caminhão.");

 	vehicleid = Car_GetID(GetVehicleTrailer(vehicleid));

	if (vehicleid == -1)
	    return SendErrorMessage(playerid, "Você não pode embargar este veículo.");

	if (CarData[vehicleid][carImpounded] != -1)
	    return SendErrorMessage(playerid, "Este veículo já está apreendido.");

	CarData[vehicleid][carImpounded] = 1;
	CarData[vehicleid][carImpoundPrice] = price;

	Tax_AddMoney(price);

	GetVehiclePos(CarData[vehicleid][carVehicle], CarData[vehicleid][carPos][0], CarData[vehicleid][carPos][1], CarData[vehicleid][carPos][2]);
	Car_Save(vehicleid);

	SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s apreendeu um %s por %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[vehicleid][carModel]), FormatNumber(price));
 	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

	return 1;
}
CMD:canal(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Radio Portatil"))
	    return SendErrorMessage(playerid, "Você deve ter um rádio portátil.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/canal [radio channel] (0 para desativar)");

	 	if (PlayerData[playerid][pChannel] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[NOTE]:{FFFFFF} Seu canal de rádio atual está definido como %d.", PlayerData[playerid][pChannel]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "O canal não pode ser inferior a 0 ou acima 999,999.");

	PlayerData[playerid][pChannel] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "Você desativou o seu rádio portátil.");

	else SendServerMessage(playerid, "Você definiu o canal %d para o rádio (\"/r [texto]\" para conversar).", channel);
	return 1;
}

CMD:r(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r [Radio IC]");

    if (!Inventory_HasItem(playerid, "Radio Portatil"))
	    return SendErrorMessage(playerid, "Você deve ter um rádio portátil.");

	if (!PlayerData[playerid][pChannel])
	    return SendErrorMessage(playerid, "Seu rádio portátil está desativado (/canal).");

	static
	    string[128];
	if(PlayerData[playerid][pChannel] == 193 && GetFactionType(playerid) != FACTION_MEDICOS) return SendErrorMessage(playerid, "Esta frequencia é do Grupamento de Bombeiros.");
	if(PlayerData[playerid][pChannel] == 190 && GetFactionType(playerid) != FACTION_PCESP) return SendErrorMessage(playerid, "Esta frequencia é do departamento de polícia.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "...%s **", params[64]);
	}
	else {
		format(string, sizeof(string),"** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:tcmds(playerid, params[])
{
	switch (PlayerData[playerid][pJob])
	{
	    case 1: SendClientMessage(playerid, COLOR_CLIENT, "TRABALHO:{FFFFFF} /iniciarentrega, /pararcarregamento, /descarregar, /entregas.");
	    case 2: SendClientMessage(playerid, COLOR_CLIENT, "TRABALHO:{FFFFFF} /reparar, /nitro, repararc, /tunar.");
	    case 3: SendClientMessage(playerid, COLOR_CLIENT, "TRABALHO:{FFFFFF} /taxi, /aceitarc.");
	    case 4: SendClientMessage(playerid, COLOR_CLIENT, "TRABALHO:{FFFFFF} /minerar.");
	    case 5: SendClientMessage(playerid, COLOR_CLIENT, "TRABALHO:{FFFFFF} /pegarlixo, /despejar, /procurarlixo.");
	    default: SendErrorMessage(playerid, "Você está desempregado no momento.");
	}
	return 1;
}
CMD:criaratm(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	id = ATM_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para máquinas de Caixa Eletronico.");

	SendServerMessage(playerid, "Você criou com sucesso o Caixa Eletronico ID: %d.", id);
	return 1;
}

CMD:deletar(playerid, params[])
{
	static
		type[24],
		str[12],
	    id = 0;

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");
	    
 	if (sscanf(params, "s[24]S()[12]", type, str)){
		SendSyntaxMessage(playerid, "/deletar [opções]");
		SendClientMessage(playerid, COLOR_YELLOW, "[opções]:{FFFFFF} atm, casa, empresa, entrada, bomba, vendedor, embargo, emprego");
        return SendClientMessage(playerid, COLOR_YELLOW, "[opções]:{FFFFFF} pacote, faccao, prisao, portao, lixo, radar, graffiti, detector, letreiro");
    }

	if (!strcmp(type, "atm", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [Atm] [Atm ID]");

    	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    	return SendErrorMessage(playerid, "Você especificou um atm inválido.");
	    
    	ATM_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso o %s ID: %d.", type, id);
   	}
   	
	if (!strcmp(type, "casa", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [Casa] [Casa ID]");

		if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    	return SendErrorMessage(playerid, "Você especificou uma casa inválida.");

		House_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso a casa ID: %d.", id);
   	}

	if (!strcmp(type, "empresa", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [Empresa] [Empresa ID]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    	return SendErrorMessage(playerid, "Você especificou uma empresa inválida.");

		Business_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso a empresa ID: %d.", id);
   	}
   	
	if (!strcmp(type, "entrada", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [Entrada] [Entrada ID]");

		if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    	return SendErrorMessage(playerid, "Você especificou uma entrada inválida.");

		Entrance_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso a entrada ID: %d.", id);
   	}
   	
	if (!strcmp(type, "bomba", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [Bomba] [Bomba ID]");

		if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    	return SendErrorMessage(playerid, "Bomba ID invalida.");

		Pump_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso a bomba ID: %d.", id);
   	}
   	
	if (!strcmp(type, "vendedor", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [vendedor] [vendedor ID]");

		if ((id < 0 || id >= MAX_VENDORS) || !VendorData[id][vendorExists])
	    	return SendErrorMessage(playerid, "Você especificou um vendedor inválido.");

		Vendor_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso o vendedor ID: %d.", id);
   	}

	if (!strcmp(type, "emprego", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [emprego] [emprego ID]");

		if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    	return SendErrorMessage(playerid, "Você especificou um emrepego inválido.");

		Job_Delete(id);
		SendServerMessage(playerid, "Você destruiu com sucesso o trabalho ID: %d.", id);
   	}
   	
	if (!strcmp(type, "faccao", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [faccao] [faccao ID]");

		if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    	return SendErrorMessage(playerid, "Você especificou uma faccao inválida.");

		Faction_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso a facção ID: %d.", id);
   	}
   	
	if (!strcmp(type, "portao", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [portao] [portao ID]");

		if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    	return SendErrorMessage(playerid, "Você especificou uma portão inválido.");

		Gate_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso o portão ID: %d.", id);
   	}
   	
	if (!strcmp(type, "lixo", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [lixo] [lixo ID]");

		if ((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
	    	return SendErrorMessage(playerid, "Você especificou um lixo ID inválido.");

		Garbage_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso o lixo ID: %d.", id);
   	}
   	
	if (!strcmp(type, "graffiti", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [graffiti] [graffiti ID]");

		if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	    	return SendErrorMessage(playerid, "Você especificou um grafitti inválido ID.");

		Graffiti_Delete(id);
		return SendServerMessage(playerid, "Você destruiu com sucesso o graffiti ID: %d.", id);
   	}
   	
	if (!strcmp(type, "detector", true)){

 		if (sscanf(str, "d", id))
     		return SendSyntaxMessage(playerid, "/deletar [detector] [detector ID]");

		if ((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
	    	return SendErrorMessage(playerid, "Você especificou um Detector inválido.");

		Detector_Delete(id);
		return SendServerMessage(playerid, "Você destruiu o detector de metais ID: %d.", id);
   	}

	return 1;
}

CMD:destruirrack(playerid, params[])
{
	new
		id = -1,
		houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "Você não está ao alcance do interior de sua casa.");

	if ((id = Rack_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer rack de arma.");

	Rack_Delete(id);
	SendServerMessage(playerid, "Você excluiu o rack de arma de sua casa.");
	return 1;
}
//////////////////////////////////////////////

CMD:desativarcp(playerid, params[])
{
	new
		vehicleid = GetPlayerVehicleID(playerid);

	PlayerData[playerid][pCP] = 0;

	if (PlayerData[playerid][pSorting] != -1)
	{
	    PlayerData[playerid][pSorting] = -1;
		PlayerData[playerid][pSortCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pMinedRock])
	{
	    PlayerData[playerid][pMinedRock] = 0;
		PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pUnloading] != -1)
	{
	    PlayerData[playerid][pUnloading] = -1;
	    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	}
	if (PlayerData[playerid][pLoading])
	{
	    PlayerData[playerid][pLoading] = 0;
	    PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pLoadCrate])
 	{
  		PlayerData[playerid][pLoadCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	{
 		CoreVehicles[vehicleid][vehLoadType] = 0;
 		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;

   		DestroyObject(CoreVehicles[vehicleid][vehCrate]);
	}
    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "Você desativou quaisquer checkpoints ativos.");
    return 1;
}

CMD:gmx(playerid, params[])
{
	new time;
	if (PlayerData[playerid][pAdmin] < 9)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (g_ServerRestart)
	{
	    TextDrawHideForAll(gServerTextdraws[3]);

	    g_ServerRestart = 0;
	    g_RestartTime = 0;

	    return SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s adiou o reinício do servidor.", ReturnName(playerid, 0));
	}
	if (sscanf(params, "d", time))
	    return SendSyntaxMessage(playerid, "/gmx [segundos]");

	if (time < 0 || time > 600)
	    return SendErrorMessage(playerid, "Os segundos especificado não pode ser inferior a 0 ou acima de 600.");

    TextDrawShowForAll(gServerTextdraws[3]);

	g_ServerRestart = 1;
	g_RestartTime = time;

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s deu início a uma reinicialização do servidor em %d segundos.", ReturnName(playerid, 0), time);
	return 1;
}

CMD:propriedades(playerid, params[])
{
	new count;

	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
	    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** Casa ID: %d | Endereço: %s | Local: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    count++;
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Negocio ID: %d | Nome: %s | Local: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "Você não possui quaisquer propriedades.");

	return 1;
}

CMD:avecasa(playerid, params[])
{
	new houseid = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", houseid))
	    return SendSyntaxMessage(playerid, "/avecasa [Casa ID]");

	if ((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
	    return SendErrorMessage(playerid, "Você especificou uma casa inválida.");

	HouseData[houseid][houseOwner] = 0;

	House_Refresh(houseid);
	House_Save(houseid);

	SendServerMessage(playerid, "Você vendeu a Casa ID: %d.", houseid);
	return 1;
}

CMD:avenegocio(playerid, params[])
{
	new bizid = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	   return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/avenegocio [Negocio ID]");

	if ((bizid < 0 || bizid >= MAX_HOUSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "Você especificou um negocio inválido.");

	BusinessData[bizid][bizOwner] = 0;

	Business_Refresh(bizid);
	Business_Save(bizid);

	SendServerMessage(playerid, "Você vendeu o Negocio ID: %d.", bizid);
	return 1;
}

CMD:vlocalizar(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

    if (Inventory_HasItem(playerid, "carsystem")) SendClientMessageEx(userid, COLOR_LIGHTYELLOW, "Car System esta localizando seu veiculo");

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
		    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		    SendClientMessageEx(playerid, COLOR_YELLOW, "** Localização: %s", GetLocation(fX, fY, fZ));
		    count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Você não possui quaisquer veículos.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

CMD:vlista(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
		    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		    SendClientMessageEx(playerid, COLOR_WHITE, "** Placa: - 2%d | Modelo/Marca: %s ", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]));
		    count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Você não possui quaisquer veículos.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	else if (PlayerData[playerid][pAdmin] >= 3)
	{
		if (userid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  		SendClientMessageEx(playerid, COLOR_YELLOW, "Veículos registrados em Nome de %s (Registro: 009283-%d):", ReturnName(userid, 0), userid);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** Placa:  - 2%d | Modelo: %s | Local: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Esse jogador não possui quaisquer veículo.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	else if (GetFactionType(playerid) == FACTION_PCESP || GetFactionType(playerid) == FACTION_JUDICIAL)
		{
		if (userid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  		SendClientMessageEx(playerid, COLOR_YELLOW, "Veículos registrados para %s (ID: %d):", ReturnName(userid, 0), userid);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** Placa:  - 2%d | Modelo: %s | Local: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Esse jogador não possui quaisquer veículo.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
 	{
 	    PlayerData[playerid][pJetpack] = 1;
	 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		PlayerData[userid][pJetpack] = 1;

		SetPlayerSpecialAction(userid, SPECIAL_ACTION_USEJETPACK);
		SendServerMessage(playerid, "Você gerou um jetpack para %s.", ReturnName(userid, 0));
	}
	return 1;
}

CMD:clima(playerid, params[])
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", weatherid))
	    return SendSyntaxMessage(playerid, "/clima [clima ID]");

	SetWeather(weatherid);
	SendServerMessage(playerid, "Você mudou o clima para o ID: %d.", weatherid);
	return 1;
}

CMD:setfuel(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "dd", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "d", amount))
		        return SendSyntaxMessage(playerid, "/setfuel [quantidade]");

			if (amount < 0)
			    return SendErrorMessage(playerid, "O valor não pode ser inferior 0.");

			CoreVehicles[id][vehFuel] = amount;
			SendServerMessage(playerid, "Você definiu o combustível do veículo ID: %d para %d por cento.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setfuel [veiculo id] [quantidade]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	if (amount < 0)
 		return SendErrorMessage(playerid, "O valor não pode ser inferior 0.");

	CoreVehicles[id][vehFuel] = amount;
	SendServerMessage(playerid, "Você definiu o combustível do veículo ID: %d para %d por cento.", id, amount);
	return 1;
}

CMD:editarcarro(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarcarro [id] [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} local, faccao, cor1, cor2");
		return 1;
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

	id = Car_GetID(id);

	if (!strcmp(type, "local", true))
	{
 		GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
		GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);

		Car_Save(id);
		Car_Spawn(id);

		SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a localização do veículo ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	}
	else if (!strcmp(type, "faccao", true))
	{
		static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return SendSyntaxMessage(playerid, "/editarcarro [id] [facção] [veiculo facção] (-1 para nenhuma)");

        if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
	    	return SendErrorMessage(playerid, "Você especificou um ID e facção inválido.");

		CarData[id][carFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
		//CarData[id][carOwner] = -1;
		Car_Save(id);

		if (factionid == -1)
			SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s ajustou a facção do veiculo ID:: %d para sem facção.", ReturnName(playerid, 0), CarData[id][carVehicle]);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s ajustou o veiculo ID: %d para \"%s\".", ReturnName(playerid, 0), CarData[id][carVehicle], FactionData[factionid][factionName]);
	}
    else if (!strcmp(type, "cor1", true))
	{
	    new color1;

	    if (sscanf(string, "d", color1))
			return SendSyntaxMessage(playerid, "/editarcarro [id] [cor1] [cor 1]");

		if (color1 < 0 || color1 > 255)
		    return SendErrorMessage(playerid, "Cor especificada não pode ser inferior a 0 ou acima 255.");

		CarData[id][carColor1] = color1;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a cor 1 do veículo ID: %d para %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color1);
	}
    else if (!strcmp(type, "cor2", true))
	{
	    new color2;

	    if (sscanf(string, "d", color2))
			return SendSyntaxMessage(playerid, "/editarcarro [id] [cor2] [cor 2]");

		if (color2 < 0 || color2 > 255)
		    return SendErrorMessage(playerid, "Cor especificada não pode ser inferior a 0 ou acima 255.");

		CarData[id][carColor2] = color2;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a cor 2 do veículo ID: %d para %d..", ReturnName(playerid, 0), CarData[id][carVehicle], color2);
	}
	return 1;
}

CMD:criarlixo(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/criarlixo [tipo]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Container Grande | 2: Container Pequeno");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "O tipo especificado não pode ser inferior a 1 ou superior a 2.");

	id = Garbage_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para Container de lixo.");

	SendServerMessage(playerid, "Você criou com sucesso Container ID: %d.", id);
	return 1;
}

CMD:pegarlixo(playerid, params[])
{
	new
		id = Garbage_Nearest(playerid),
		string[64];

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Você não está no alcance de Container de lixo.");

	if (GarbageData[id][garbageCapacity] < 1)
	    return SendErrorMessage(playerid, "Este Container de lixo está vazio.");

	if (PlayerData[playerid][pCarryTrash])
	    return SendErrorMessage(playerid, "Você já está carregando um saco de lixo.");

    GarbageData[id][garbageCapacity]--;
   	Garbage_Save(id);

	PlayerData[playerid][pCarryTrash] = 1;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um saco de lixo do Container.", ReturnName(playerid, 0), string);

	format(string, sizeof(string), "[Container %d]\n{FFFFFF}Capacidade do container: %d/30", id, GarbageData[id][garbageCapacity]);
  	UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, string);

  	SetPlayerAttachedObject(playerid, 4, 1264, 6, 0.000000, 0.000000, 0.000000, 0.000000, 270.000000, 90.000000, 0.500000, 0.500000, 0.500000);
	ShowPlayerFooter(playerid, "Pressione ~y~'N'~w~ para colocar o saco de lixo no caminhao.");

	return 1;
}

CMD:despejar(playerid, params[])
{
	new
		vehicleid = GetPlayerVehicleID(playerid),
		id = Job_NearestPoint(playerid, 5.0);

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (GetVehicleModel(vehicleid) != 408)
	    return SendErrorMessage(playerid, "cê deve estar dirigindo um caminhão de lixo.");

	if (id == -1 || JobData[id][jobType] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer depósito de lixo.");

	if (CoreVehicles[vehicleid][vehTrash] < 1)
	    return SendErrorMessage(playerid, "Não há lixo colocado neste veículo.");

	GiveMoney(playerid, (CoreVehicles[vehicleid][vehTrash] * 5));
	ShowPlayerFooter(playerid, "Voce esta ~g~entregando~w~ o lixo!");

	SendServerMessage(playerid, "Você ganhou $%d por %d sacos de lixo.", (CoreVehicles[vehicleid][vehTrash] * 5), CoreVehicles[vehicleid][vehTrash]);
	CoreVehicles[vehicleid][vehTrash] = 0;

	return 1;
}

//SISTEMA: Sitema de VendingMachine
CMD:criarvendedor(playerid, params[])
{
    new
        id = -1,
        type,
        ownerid,
        ownername[MAX_PLAYER_NAME];

    if (PlayerData[playerid][pAdmin] < 8)
        return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

    if (sscanf(params, "dd", type, ownerid))
    {
        SendSyntaxMessage(playerid, "/criarvendedor [tipo] [ID do dono]");
        SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Comida | 2: Refrigerante");
        return 1;
    }

    if (type < 1 || type > 2)
        return SendErrorMessage(playerid, "O tipo especificado não pode ser inferior a 1 ou superior a 2.");

    if (!IsPlayerConnected(ownerid))
        return SendErrorMessage(playerid, "O jogador especificado não está conectado.");

    GetPlayerName(ownerid, ownername, sizeof(ownername));
    id = Vendor_Create(playerid, type, ownerid);

    if (id == -1)
        return SendErrorMessage(playerid, "O servidor atingiu o limite para fornecedores.");

    SendServerMessage(playerid, "Você criou com sucesso o Vendedor ID: %d para o dono: %s.", id, ownername);
    return 1;
}

CMD:vendsacar(playerid, params[])
{
    new vendorid = Vendor_Nearest(playerid);
    if (vendorid == -1)
        return SendErrorMessage(playerid, "Você não está perto de nenhum vendedor.");

    new ownername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, ownername, sizeof(ownername));

    if (strcmp(VendorData[vendorid][vendorOwner], ownername, true) != 0)
        return SendErrorMessage(playerid, "Você não é o dono deste vendedor.");

    if (VendorData[vendorid][vendorMoney] <= 0)
        return SendErrorMessage(playerid, "Este vendedor não tem dinheiro para sacar.");

    new amount = VendorData[vendorid][vendorMoney];
    GivePlayerMoney(playerid, amount);
    VendorData[vendorid][vendorMoney] = 0;

    SendServerMessage(playerid, "Você sacou $%d do vendedor ID: %d.", amount, vendorid);

    Vendor_Save(vendorid);

    return 1;
}

stock Vendor_Create(playerid, type, ownerid)
{
    for (new i = 0; i != MAX_VENDORS; i++) if (!VendorData[i][vendorExists])
    {
    
    	new name[24];
		GetPlayerName(ownerid, name, sizeof(name));

        VendorData[i][vendorExists] = true;
        VendorData[i][vendorType] = type;
        VendorData[i][vendorMoney] = 0;
        VendorData[i][vendorOwner] = name;
        
        GetPlayerPos(playerid, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]);
        GetPlayerFacingAngle(playerid, VendorData[i][vendorPos][3]);

        VendorData[i][vendorPos][0] = VendorData[i][vendorPos][0] + (1.5 * floatsin(-VendorData[i][vendorPos][3], degrees));
        VendorData[i][vendorPos][1] = VendorData[i][vendorPos][1] + (1.5 * floatcos(-VendorData[i][vendorPos][3], degrees));

        VendorData[i][vendorInterior] = GetPlayerInterior(playerid);
        VendorData[i][vendorWorld] = GetPlayerVirtualWorld(playerid);

        
        Vendor_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `vendors` (`vendorType`) VALUES(0)", "OnVendorCreated", "d", i);
        return i;
    }
    return -1;
}

stock Vendor_Delete(vendorid)
{
    if (vendorid != -1 && VendorData[vendorid][vendorExists])
    {
        new
            string[64];

        format(string, sizeof(string), "DELETE FROM `vendors` WHERE `vendorID` = '%d'", VendorData[vendorid][vendorID]);
        mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
            DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

        if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
            DestroyDynamicObject(VendorData[vendorid][vendorObject]);

        VendorData[vendorid][vendorExists] = false;
        VendorData[vendorid][vendorType] = 0;
        VendorData[vendorid][vendorID] = 0;
        VendorData[vendorid][vendorMoney] = 0;
    }
    return 1;
}

stock Vendor_Refresh(vendorid)
{
    if (vendorid != -1 && VendorData[vendorid][vendorExists])
    {
        if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
            DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

        if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
            DestroyDynamicObject(VendorData[vendorid][vendorObject]);

        switch (VendorData[vendorid][vendorType]) {
            case 1: VendorData[vendorid][vendorObject] = CreateDynamicObject(1340, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 0.0, 0.0, VendorData[vendorid][vendorPos][3] - 90.0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
            case 2: VendorData[vendorid][vendorObject] = CreateDynamicObject(1209, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2] - 1.0, 0.0, 0.0, VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
        }
    }
    return 1;
}

stock Vendor_Save(vendorid)
{
    new
        query[300];

    format(query, sizeof(query), "UPDATE `vendors` SET `Dinheiro` = '%d', `vendorType` = '%d', `vendorX` = '%.4f', `vendorY` = '%.4f', `vendorZ` = '%.4f', `vendorA` = '%.4f', `vendorInterior` = '%d', `vendorWorld` = '%d', `Dono` = '%s' WHERE `vendorID` = '%d'",
        VendorData[vendorid][vendorMoney],
        VendorData[vendorid][vendorType],
        VendorData[vendorid][vendorPos][0],
        VendorData[vendorid][vendorPos][1],
        VendorData[vendorid][vendorPos][2],
        VendorData[vendorid][vendorPos][3],
        VendorData[vendorid][vendorInterior],
        VendorData[vendorid][vendorWorld],
        VendorData[vendorid][vendorOwner],
        VendorData[vendorid][vendorID]
    );

    return mysql_tquery(g_iHandle, query);
}

Vendor_Nearest(playerid)
{
    for (new i = 0; i != MAX_VENDORS; i ++) if (VendorData[i][vendorExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]))
	{
		if (GetPlayerInterior(playerid) == VendorData[i][vendorInterior] && GetPlayerVirtualWorld(playerid) == VendorData[i][vendorWorld])
			return i;
	}
	return -1;
}

CMD:atunar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você não está em qualquer veículo.");

	if (!IsDoorVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Você não pode ajustar este veículo.");

	Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Tunar Veiculo", "Add Roda\nAdd Hidráulica\nAdd Nitro\nAdd Nitro\nAdd PaintJobs", "Selecionar", "Cancelar");
	return 1;
}

CMD:acorveiculo(playerid, params[])
{
	static
	    color1,
	    color2;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você não está em qualquer veículo.");

	if (sscanf(params, "dd", color1, color2))
	    return SendSyntaxMessage(playerid, "/acorveiculo [cor 1] [cor 2]");

	if (color1 < 0 || color1 > 255)
	    return SendErrorMessage(playerid, "A primeira cor não pode ser inferior a 0 ou acima de 255.");

    if (color2 < 0 || color2 > 255)
	    return SendErrorMessage(playerid, "A segunda cor não pode ser inferior a 0 ou acima de 255.");

	SetVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendServerMessage(playerid, "Você mudou as cores deste veículo para %d, %d.", color1, color2);
	return 1;
}

CMD:painel(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 8 || !IsPlayerAdmin(playerid))
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (g_ServerLocked)
		Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Destrancar Server\nDefinir Hostname\nExecute Query", "Selecionar", "Cancelar");

	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Tancar Server\nDefinir Hostname\nExecute Query", "Selecionar", "Cancelar");
	return 1;
}

CMD:destruiritem(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "Você não está perto de quaisquer itens spawnado.");

    SendServerMessage(playerid, "Você excluiu um/a \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    return 1;
}

CMD:boombox(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (!Inventory_HasItem(playerid, "Boombox"))
	    return SendErrorMessage(playerid, "Você não tem um boombox com você.");

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/boombox [nome]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMES]:{FFFFFF} colocar, pegar, url");
	    return 1;
	}
	if (!strcmp(type, "colocar", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Você já colocou um boombox.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Você já está em alcance de outra boombox.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um boombox e coloca-lo sobre o solo.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Você colocou o seu boombox (use \"/boombox\" para opções).");
	}
	else if (!strcmp(type, "pegar", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Você não tem um boombox implantado.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "Você não está ao alcance do seu boombox.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou o seu boombox.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return SendSyntaxMessage(playerid, "/boombox [url] [url música]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Você não tem um boombox implantado.");

		if (!IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2])) //AQUI
		    return SendErrorMessage(playerid, "Você não está ao alcance do seu boombox.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s liga seu boombox.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:adestruirbox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	   return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		SendServerMessage(playerid, "Você destruiu o boombox de %s.", ReturnName(i, 0));
		return SendServerMessage(i, "%s destruiu o seu boombox.", ReturnName(playerid, 0));
	}
	SendErrorMessage(playerid, "Você não está no alcance de qualquer boombox.");
	return 1;
}

CMD:procurarlixo(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	new id = GetClosestGarbage(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Não há lixeiras disponíveis.");

	PlayerData[playerid][pCP] = 1;

	SetPlayerCheckpoint(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2], 2.5);
	SendServerMessage(playerid, "Marcador definido para o Container mais próximo.");
	return 1;
}

CMD:procurar(playerid, params[])
{
	new userid;

	if (sscanf(params, "u", userid))
	{
		SendSyntaxMessage(playerid, "/procurar [playerid/nome]");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");
	    
	if (PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendErrorMessage(playerid, "O jogador tem de estar inactivo ou atordoados.");

	if (Inventory_HasItem(userid, "Maconha Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Sementes de Maconha (%d)", Inventory_Count(userid, "Maconha Seeds"));

    if (Inventory_HasItem(userid, "Cocaina Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Sementes de Cocaina (%d)", Inventory_Count(userid, "Cocaina Seeds"));

    if (Inventory_HasItem(userid, "Heroina Opium Seeds"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroina Opium Sementes (%d)", Inventory_Count(userid, "Heroina Opium Seeds"));

	if (Inventory_HasItem(userid, "Steroids"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Steroids (%d)", Inventory_Count(userid, "Steroids"));

    if (Inventory_HasItem(userid, "Maconha"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Maconha (%d)", Inventory_Count(userid, "Maconha"));

    if (Inventory_HasItem(userid, "Cocaina"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaina (%d)", Inventory_Count(userid, "Cocaina"));

    if (Inventory_HasItem(userid, "Heroina"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroina (%d)", Inventory_Count(userid, "Heroina"));

	for (new i = 0; i < 12; i ++) if (PlayerData[userid][pGuns][i] && PlayerData[userid][pAmmo][i] > 0) {
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** %s", ReturnWeaponName(PlayerData[userid][pGuns][i]));
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s procura itens ilegais com %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:puxarplaca(playerid, params[])
{
    new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		carid,
		count;

	if (sscanf(params, "u", userid))
        return SendSyntaxMessage(playerid, "/puxarplaca [ID do Responsavel]");

    if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Você deve estar dentro de um carro da polícia.");
    {
		if (GetFactionType(playerid) == FACTION_PCESP || GetFactionType(playerid) == FACTION_JUDICIAL)
			{
			if (userid == INVALID_PLAYER_ID)
	    		return SendErrorMessage(playerid, "Você especificou um registro invalido.");

			SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  			SendClientMessageEx(playerid, COLOR_YELLOW, "Veículos registrados em Nome de: %s |(Renavan: 009283%d)", ReturnName(userid, 0), PlayerData[userid][pPhone]);

			for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i))
			{
  				GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

				SendClientMessageEx(playerid, COLOR_WHITE, "** Placa:  - 2%d | Modelo: %s | Multas: %d", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), CarData[carid][carImpoundPrice]);
				count++;
			}
			if (!count)
				SendClientMessage(playerid, COLOR_WHITE, "Esse jogador não possui quaisquer veículo.");
				SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
			}
	}
	return 1;
}
CMD:darporte(playerid, params[])
{
	new userid;

	if (GetFactionType(playerid) != FACTION_JUDICIAL && GetFactionType(playerid) != FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você deve ser um funcionario do Governo para dar o porte.");

	 if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Você deve ser, pelo menos, rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/darporte [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Você não pode conceder-se um porte de armas.");

	if (Inventory_HasItem(userid, "Porte de Armas"))
	    return SendErrorMessage(playerid, "Esse jogador já tem um porte de armas.");

	Inventory_Add(userid, "Porte de Armas", 1581);

	SendServerMessage(playerid, "Você entregou uma licença de arma para %s com Numeração de 25%d.", ReturnName(userid, 0), PlayerData[userid][pPhone]);
	SendServerMessage(userid, " %s libeirou o porte de armas para voce com a Numeração de 25%d.", ReturnName(playerid, 0), PlayerData[userid][pPhone]);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s concedeu a %s uma licença de arma de Numero 25%d.", ReturnName(playerid, 0), ReturnName(userid, 0), PlayerData[userid][pPhone]);
	return 1;
}

CMD:rpa(playerid, params[])
{
	new userid;

	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Você deve ser um funcionário ou um membro do governo.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2)
	    return SendErrorMessage(playerid, "Você deve ser, pelo menos, rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 2);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/rpa [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode revogar seu porte de armas.");

	if (!Inventory_HasItem(userid, "Porte de Armas"))
	    return SendErrorMessage(playerid, "Esse jogador não tem uma licença de arma.");

	Inventory_Remove(userid, "Porte de Armas");

	SendServerMessage(playerid, "Você revogou a licença de arma para %s.", ReturnName(userid, 0));
	SendServerMessage(userid, " %s revogou a sua licença de arma.", ReturnName(playerid, 0));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s revogou a licença de arma de %s .", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:confiscar(playerid, params[])
{
	new
	    userid,
		string[128];

    if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/confiscar [playerid/nome]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");

	if (GetWeaponCount(userid) > 0)
		strcat(string, "Confiscar Armas\n");

	if (Inventory_HasItem(userid, "Maconha Seeds") || Inventory_HasItem(userid, "Cocaina Seeds") || Inventory_HasItem(userid, "Heroina Opium Seeds"))
	    strcat(string, "Confiscar Sementes\n");

	if (Inventory_HasItem(userid, "Maconha") || Inventory_HasItem(userid, "Cocaina") || Inventory_HasItem(userid, "Heroina") || Inventory_HasItem(userid, "Steroids"))
	    strcat(string, "Confiscar Drogs\n");

    if (Inventory_HasItem(userid, "Radio Portatil"))
	    strcat(string, "Confiscar Radio\n");

    if (Inventory_HasItem(userid, "Porte de Armas"))
	    strcat(string, "Confiscar Porte de Armas\n");

   	if (Inventory_HasItem(userid, "Carta de Conducao"))
	    strcat(string, "Confiscar Carta de Conducao\n");

	if (!strlen(string))
	    return SendErrorMessage(playerid, "Este jogador não tem itens ilegais para confiscar.");

	PlayerData[playerid][pTakeItems] = userid;
	Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Confiscar Itens", string, "Confiscar", "Cancelar");
	return 1;
}

CMD:derrubarporta(playerid, params[])
{
	static
	    id = -1;

	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
	    return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

    if (!Inventory_HasItem(playerid, "Mandato"))
	    return SendErrorMessage(playerid, "Você não tem mandato para invadir esse local.");

	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (!HouseData[id][houseLocked])
	        return SendErrorMessage(playerid, "Esta casa já está destrancada.");

	    ShowPlayerFooter(playerid, "Tentando ~r~derrubar~w~ a porta...");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tenta chutar porta da casa para baixo.", ReturnName(playerid, 0));
	    SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
		if (!BusinessData[id][bizLocked])
		    return SendErrorMessage(playerid, "Este negocio já está destrancado.");

		ShowPlayerFooter(playerid, "Tentando ~r~derrubar~w~ a porta...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tenta chutar porta do negocio para baixo.", ReturnName(playerid, 0));
	    SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
	}
	else {
		SendErrorMessage(playerid, "Você deve estar perto de uma casa ou de negócios.");
	}
	return 1;
}

CMD:comprarrack(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "Você não está ao alcance do interior de sua casa.");

	if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
		return SendSyntaxMessage(playerid, "/comprarrack [confirmar] (Taxa de $1,000)");

	if (Rack_Count(playerid) >= 4)
	    return SendErrorMessage(playerid, "Sua casa só pode ter até 4 racks de arma.");

	if (Rack_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "Você não pode usar este comando perto de outro rack.");

	if (GetMoney(playerid) < 1000)
	    return SendErrorMessage(playerid, "Você tem fundos suficientes para a compra.");

	new id = Rack_Create(playerid, houseid);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para racks de arma.");

    ResetEditing(playerid);

	PlayerData[playerid][pEditRack] = id;
	EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GiveMoney(playerid, -1000);
	SendServerMessage(playerid, "Você adquiriu um rack de arma por $1,000.");
	return 1;
}

CMD:estante(playerid, params[])
{
	new id = Rack_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer rack de arma.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:criarrack(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para racks de arma.");

    ResetEditing(playerid);
    PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "Você criou com sucesso o Rack ID: %d.", id);
	return 1;
}

CMD:editarrack(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editarrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "Você especificou um rack inválido.");

	ResetEditing(playerid);
	PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "Você agora está editando rack de arma ID: %d.", id);
	return 1;
}

CMD:adestruirrack(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destruirrack [rack id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "Você especificou um rack inválido.");

	Rack_Delete(id);
	SendServerMessage(playerid, "Você destruiu com sucesso o Rack ID: %d.", id);
	return 1;
}

CMD:rastrearnumero(playerid, params[])
{
	new number;

	if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/rastrearnumero [número de telefone]");

	if (number == 0)
	    return SendErrorMessage(playerid, "Você especificou um número inválido.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
	    return SendServerMessage(playerid, "O número de telefone %d é propriedade de %s.", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "Não há jogador online com esse número de telefone.");
	return 1;
}

CMD:flipcar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (vehicleid > 0 && isnull(params))
	{
		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Você capotou seu veículo atual.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/flipcar [veiculo ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "Você especificou um veículo inválido.");

		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Você capotou o veículo ID: %d.", vehicleid);
	}
	return 1;
}

CMD:admins(playerid, params[])
{
    new count = 0;

    SendClientMessage(playerid, COLOR_GREEN, "|___________ Lista de Admins ___________|");

    foreach (new i : Player) if (PlayerData[i][pAdmin] > 0 && PlayerData[i][pAdminHide] < 1)
    {
        if (PlayerData[i][pAdminDuty])
            SendClientMessageEx(playerid, COLOR_GREEN, "(%s) %s(%s) (ID: %d) | {4BB74C}Modo Trabalho", cargoAdm(i), ReturnName(i, 0), PlayerData[playerid][pNomeOOC], i);

        else
        	SendClientMessageEx(playerid, COLOR_GREY, "(%s) %s(%s) (ID: %d) | {FF0000}Jogando", cargoAdm(i), ReturnName(i, 0), PlayerData[playerid][pNomeOOC], i);

        count++;
    }
    if (!count){
        SendClientMessage(playerid, COLOR_WHITE, "* Não há administradores online no momento.");
    }
    return 1;
}
stock cargoAdm(playerid)
{
    new admtext[64];
	if(PlayerData[playerid][pAdmin] == 9) { admtext = "Desenvolvedor"; }
	else if(PlayerData[playerid][pAdmin] == 8) { admtext = "Chefe da Administracao"; }
	else if(PlayerData[playerid][pAdmin] == 7) { admtext = "SubChefe da Administracao"; }
	else if(PlayerData[playerid][pAdmin] == 6) { admtext = "Head Admin"; }
	else if(PlayerData[playerid][pAdmin] == 5) { admtext = "Game Admin 5"; }
	else if(PlayerData[playerid][pAdmin] == 4) { admtext = "Game Admin 4"; }
    else if(PlayerData[playerid][pAdmin] == 3) { admtext = "Game Admin 3"; }
    else if(PlayerData[playerid][pAdmin] == 2) { admtext = "Game Admin 2"; }
    else if(PlayerData[playerid][pAdmin] == 1) { admtext = "Game Admin 1"; }
    else if(PlayerData[playerid][pAdmin] == 10) { admtext = "Dono da GM"; }
    else { admtext = "Dono da GM"; }
	return admtext;
}

CMD:testers(playerid, params[])
{
	new count = 0;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pAdmin] == 1)
	{
        if (PlayerData[i][pTesterDuty])
			SendClientMessageEx(playerid, COLOR_WHITE, "* %s {33CC33}(On Duty)", ReturnName(i, 0));

		else SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FF6347}(Off Duty)", ReturnName(i, 0));

        count++;
	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_WHITE, "* Não há supporters on-line.");
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}
	
CMD:mostrarlicenca(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/mostrarlicenca [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	if (Inventory_HasItem(playerid, "Carta de Conducao")) SendClientMessageEx(userid, COLOR_WHITE, "* CNH-AB Carro/Moto {33CC33}(Este cidadão esta Habilitado)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* CNH-AB Carro/Moto {AA3333}(Não Habilitado)");

	if (Inventory_HasItem(playerid, "Porte de Armas")) SendClientMessageEx(userid, COLOR_WHITE, "* Licença de arma {33CC33}(Autorizado pela Policia Com Numeração: 25%d)", PlayerData[userid][pPhone]);
	else SendClientMessageEx(userid, COLOR_WHITE, "* Licença de arma {AA3333}(Sem autorização)");

    if (Inventory_HasItem(playerid, "porteilegal")) SendClientMessageEx(userid, COLOR_WHITE, "* Licença de arma {AA3333}(Este Porte de Arma e Falsificado)");

	if (Inventory_HasItem(playerid, "Escritura")) SendClientMessageEx(userid, COLOR_WHITE, "* Escritura da Casa {33CC33}(Possui)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Escritura da Casa {AA3333}(Não Possui)");

	if (Inventory_HasItem(playerid, "CRLV")) SendClientMessageEx(userid, COLOR_WHITE, "* Certificado de Licençiamento Veicular {33CC33}(Portando o CRLV)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Certificado de Licençiamento Veicular {AA3333}(Não Portando o CRLV)");

	if (Inventory_HasItem(playerid, "Docempresa")) SendClientMessageEx(userid, COLOR_WHITE, "* Documento da Empresa {33CC33}(Possui)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Documento da Empresa {AA3333}(Não Possui)");
	
	if (Inventory_HasItem(playerid, "Reservista")) SendClientMessageEx(userid, COLOR_WHITE, "* Estado de Reservista {33CC33}(Alistamento em Dia)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Estado de Reservista {AA3333}(Nunca se alistou)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega as suas licenças e mostra a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:entregarrg(playerid, params[])
{
	new userid;

	if (GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você dever ser um membro do Governo ou Policial Civil para libeirar.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/rg [playerid/name]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Este player não esta conectado.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode dar RG a si mesmo.");

	if (Inventory_HasItem(userid, "RG"))
	    return SendErrorMessage(playerid, "Este cidadão ja possui o tem o RG.");

	Inventory_Add(userid, "RG", 1581);

	SendServerMessage(playerid, "Você entregou os documento para %s.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s entregou seu documento em suas mãos.", ReturnName(playerid, 0));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s entregou para %s o RG).", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:deletarpersonagem(playerid, params[])
{
	static
	    query[128];

    if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/deletarpersonagem [nome do personagem]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Você especificou um formato de nome inválido.");

	format(query, sizeof(query), "SELECT `ID`, `Admin` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteCharacter", "ds", playerid, params);

	return 1;
}

CMD:pararcarregamento(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
	    return SendErrorMessage(playerid, "Você não está carregando nenhuma caixa agora.");

	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	SendServerMessage(playerid, "Você há engradados de carga mais longos.");

	return 1;
}

CMD:iniciarentrega(playerid, params[])
{
 	new id = Job_NearestPoint(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (id == -1 || JobData[id][jobType] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer ponto de carregamento.");

	if (PlayerData[playerid][pLoadType] > 0)
	    return SendErrorMessage(playerid, "Você já começaram uma entrega.");

    if (IsPlayerInAnyVehicle(playerid))
    	return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Selecione o Tipo", "24/7\nLoja de Armas\nLoja de Roupa\nFast Food\nPosto de Gasolina\nLoja de Moveis", "Selecionar", "Cancelar");
	return 1;
}

CMD:bprodutos(playerid, params[])
{
    new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));

    if (id == -1 || !Business_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "Você não está ao alcance do seu negócio.");

	if (BusinessData[id][bizType] == 5)
	    return SendErrorMessage(playerid, "Você não pode pedir produtos para este tipo de negócio.");

	if (BusinessData[id][bizShipment])
	{
	    foreach (new i : Player) if (PlayerData[i][pShipment] == id)
		{
	        CancelShipment(i);
	        SendServerMessage(i, "O pedido de produtos foi cancelado.");
	    }
	    BusinessData[id][bizShipment] = 0;
	    Business_Save(id);

	    SendServerMessage(playerid, "Sua empresa deixou de solicitar uma remessa de produtos.");
	    SendJobMessage(1, COLOR_YELLOW, "** %s não está a pedir uma produtos para %s. **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	else
	{
	    if (BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
	        return SendErrorMessage(playerid, "O ponto de entrega para o seu negócio não está definido.");

	    BusinessData[id][bizShipment] = 1;
	    Business_Save(id);

	    SendServerMessage(playerid, "Você solicitou produtos para seu negocio.");
		SendJobMessage(1, COLOR_YELLOW, "** %s está solicitando uma uma remessa de produtos para %s (/entregas para aceitar). **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	return 1;
}

CMD:cancelarentrega(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (PlayerData[playerid][pShipment] == -1)
	    return SendErrorMessage(playerid, "Você não aceitou uma entrega ainda.");

	CancelShipment(playerid);
	SendServerMessage(playerid, "Você cancelou a entrega aceita.");
	return 1;
}

CMD:entregas(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "Você não tem o trabalho apropriado.");

	if (PlayerData[playerid][pShipment] != -1)
	    return SendErrorMessage(playerid, "Você já aceitou uma entrega (use /cancelarentrega para cancelar).");

	ShowShipments(playerid);
	return 1;
}
CMD:limparinventario(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/limparinventario [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	Inventory_Clear(userid);

	SendAdminAction(playerid, "Você limpou o inventario de %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s limpou todo o seu inventario.", PlayerData[playerid][pNomeOOC]);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s limpou o inventario de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}


CMD:advertencia(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Advertências (%d/3)", PlayerData[playerid][pWarnings]);

    if (PlayerData[playerid][pWarnings] >= 1 && strlen(PlayerData[playerid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1st Advertência: \"%s\"", PlayerData[playerid][pWarn1]);

    if (PlayerData[playerid][pWarnings] >= 2 && strlen(PlayerData[playerid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2nd Advertência: \"%s\"", PlayerData[playerid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:listaavisados(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/listaavisados [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s Advertências (%d/3)", ReturnName(userid, 0), PlayerData[userid][pWarnings]);

    if (PlayerData[userid][pWarnings] >= 1 && strlen(PlayerData[userid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1st Advertência: \"%s\"", PlayerData[userid][pWarn1]);

    if (PlayerData[userid][pWarnings] >= 2 && strlen(PlayerData[userid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2nd Advertência: \"%s\"", PlayerData[userid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:avisar(playerid, params[])
{
	static
	    userid,
		reason[32];

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[32]", userid, reason))
	    return SendSyntaxMessage(playerid, "/avisar [playerid/nome] [razão]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "O jogador especificado tem autoridade superior.");

	switch (++ PlayerData[userid][pWarnings])
	{
	    case 1:
	    {
	        format(PlayerData[userid][pWarn1], 32, reason);

	        SendAdminAction(userid, "%s alertou para por \"%s\" (primeiro aviso).", PlayerData[playerid][pNomeOOC], reason);
	        SendAdminAction(playerid, "Você alertou %s por \"%s\" (primeiro aviso).", ReturnName(userid, 0), reason);
		}
		case 2:
	    {
	        format(PlayerData[userid][pWarn2], 32, reason);

	        SendAdminAction(userid, "%s alertou para por \"%s\" (segundo aviso).", PlayerData[playerid][pNomeOOC], reason);
	        SendAdminAction(playerid, "Você alertou %s por \"%s\" (segundo aviso).", ReturnName(userid, 0), reason);
		}
		default:
	    {
	        ResetWarnings(userid);

	        SendAdminAction(userid, "Você foi banido por exceder as suas advertências (\"%s\").", reason);
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s foi banido por três advertências por %s, razão: %s", ReturnName(userid, 0), ReturnName(playerid, 0), reason);

			Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
			KickEx(userid);
		}
	}
	Log_Write("logs/warn_log.txt", "[%s] %s alertou %s por %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

CMD:limparavisos(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/limparavisos [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	ResetWarnings(userid);

	SendAdminAction(playerid, "Você limpou as Advertências de %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s limpou as suas Advertências.", PlayerData[playerid][pNomeOOC]);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s limpou as Advertências de %s.", PlayerData[playerid][pNomeOOC], ReturnName(userid, 0));
	return 1;
}

CMD:entregararma(playerid, params[])
{
	new
	    weaponid = GetWeapon(playerid),
	    ammo = GetPlayerAmmo(playerid),
		userid;

	if (!weaponid)
	    return SendErrorMessage(playerid, "Você não está segurando nenhuma arma para passar.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/entregararma [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Você não pode dar-se uma arma.");

	if (PlayerData[userid][pGuns][g_aWeaponSlots[weaponid]] != 0)
	    return SendErrorMessage(playerid, "Esse jogador tem uma arma no mesmo slot já.");
	    
    if (PlayerData[playerid][pPlayingHours] < 5)
		return SendErrorMessage(playerid, "Você deve ter jogado pelo menos cinco horas.");

	ResetWeapon(playerid, weaponid);
	GiveWeaponToPlayer(userid, weaponid, ammo);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s passou sua %s para %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ReturnName(userid, 0));
	Log_Write("logs/give_log.txt", "[%s] %s (%s) passou sua %s com %d munição para %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:vw(playerid, params[]) {
	SendClientMessageEx(playerid, COLOR_CLIENT, "Atual Virtual World: %d", GetPlayerVirtualWorld(playerid));

	return 1;
}

CMD:toghud(playerid, params[])
{
	switch (PlayerData[playerid][pHUD])
	{
	    case 0:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 0;
	        PlayerData[playerid][pHUD] = 1;

	        ShowHungerTextdraw(playerid, 1);
	        SendServerMessage(playerid, "Você ativou o HUD.");

			TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
			TextDrawShowForPlayer(playerid, gServerTextdraws[1]);

	        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
		}
	    case 1:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 1;
	        PlayerData[playerid][pHUD] = 0;

	        ShowHungerTextdraw(playerid, 0);
	        SendServerMessage(playerid, "Você desativou o HUD.");

	        TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
			TextDrawHideForPlayer(playerid, gServerTextdraws[1]);

	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		}
	}
	return 1;
}

CMD:ah(playerid, params[])
{
	new userid;

	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Você não é um tester.");

	if (!PlayerData[playerid][pTesterDuty])
	    return SendErrorMessage(playerid, "Você deve estar on-duty para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/ah [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pSeekHelp])
	    return SendErrorMessage(playerid, "Esse jogador não solicitou qualquer ajuda.");

	PlayerData[userid][pSeekHelp] = 0;

	SendServerMessage(userid, "%s aceitou o seu pedido de ajuda.", ReturnName(playerid, 0));
	SendTesterMessage(COLOR_LIGHTRED, "[TESTER]: %s aceitou o pedido de ajuda de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:dh(playerid, params[])
{
	new userid;

	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "Você não é um tester.");

	if (!PlayerData[playerid][pTesterDuty])
	     return SendErrorMessage(playerid, "Você deve estar on-duty para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/dh [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!PlayerData[userid][pSeekHelp])
	    return SendErrorMessage(playerid, "Esse jogador não solicitou qualquer ajuda.");

	PlayerData[userid][pSeekHelp] = 0;

	SendServerMessage(userid, "%s recusou o seu pedido de ajuda.", ReturnName(playerid, 0));
	SendTesterMessage(COLOR_LIGHTRED, "[TESTER]: %s recusou o pedido de ajuda de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:hora(playerid, params[])
{
	static
	    string[128],
		month[12],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch (date[1]) {
	    case 1: month = "Janeiro";
	    case 2: month = "Fevereiro";
	    case 3: month = "Marco";
	    case 4: month = "Abril";
	    case 5: month = "Maio";
	    case 6: month = "Junho";
	    case 7: month = "Julho";
	    case 8: month = "Agosto";
	    case 9: month = "Setembro";
	    case 10: month = "Outubro";
	    case 11: month = "Novembro";
	    case 12: month = "Dezembro";
	}
	format(string, sizeof(string), "%d/60 minutos até você receber seu pagamento.",PlayerData[playerid][pMinutes]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "~g~%s %02d %d~n~~b~%02d:%02d:%02d", month, date[0], date[2], date[3], date[4], date[5]);
	GameTextForPlayer(playerid, string, 6000, 1);

	return 1;
}

CMD:vidatodos(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	foreach (new i : Player) {
	    SetPlayerHealth(i, 100.0);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s curou todos os jogadores on-line.", ReturnName(playerid, 0));
	return 1;
}

CMD:salvarcontas(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 7)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	foreach (new i : Player) {
		SQL_SaveCharacter(i);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s salvou todas as contas de jogadores.", PlayerData[playerid][pNomeOOC]);
	return 1;
}

CMD:s(playerid, params[])
{
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/(s)ussurro [playerid/nome] [texto]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta desconectado ou não perto de você.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "Você não pode sussurrar-se.");

    if (strlen(text) > 64) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Sussurro de %s (%d): %.64s", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Sussurro para %s (%d): %.64s", ReturnName(userid, 0), userid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Sussurro de %s (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Sussurro para %s (%d): %s **", ReturnName(userid, 0), userid, text);
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s sussura algo com %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:mascara(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Mascara"))
		return SendErrorMessage(playerid, "Você não tem uma máscara.");

	switch (PlayerData[playerid][pMaskOn])
	{
		case 0:
		{
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma máscara e coloca-lo no rosto.", ReturnName(playerid, 0));
		    PlayerData[playerid][pMaskOn] = 1;
		}
		case 1:
		{
		    PlayerData[playerid][pMaskOn] = 0;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega sua máscara e retira do rosto.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

/////////////////////////////////////// SISTEMA RG //////////////////////////////
CMD:mostrarrg(playerid, params[])
{
	new	userid,
		extraid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/mrg [playerid/nome]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Esse jogador esta longe de você.");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (!Inventory_HasItem(playerid, "RG"))
		return SendErrorMessage(playerid, "Você não retirou seu RG.");

    SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

    if (!IsPlayerConnected(extraid))
    
        PlayerData[extraid][pID] = cache_insert_id(g_iHandle);
        PlayerData[extraid][pLogged] = 1;

        if (Inventory_HasItem(playerid, "RG")) SendClientMessageEx(userid, COLOR_WHITE, "* Numero do RG: {33CC33}430934%d", PlayerData[extraid][pID]);
 		else SendClientMessageEx(userid, COLOR_WHITE, "* Numero do RG: {AA3333}(Sem RG)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seus documentos e mostra para %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
/////////////////////////////////////////////////////////////////////////////////////


CMD:sirene(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL && GetFactionType(playerid) != FACTION_MEDICOS)
		return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Você deve estar dentro de um veículo.");

	new Float:sirenpos[3];
	GetVehiclePos(vehicleid, sirenpos[0], sirenpos[1], sirenpos[2]);

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
		case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);
	        //25800
			SoundInRange(25800, 100.0, sirenpos[0], sirenpos[1], sirenpos[2]);
		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s atribui uma sirene portátil para o veículo.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s destaca uma sirene portátil do veículo.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:quebraralgema(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/quebraralgema [playerid/nome]");

	if (!Inventory_HasItem(playerid, "Pe de Cabra"))
	    return SendErrorMessage(playerid, "Você não tem um pé de cabra.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "O jogador especificado está desconectado ou não perto de você.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "O jogador especificado não está algemado.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode quebrar suas próprias algemas.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tenta quebrar as algemas com um pé de cabra.", ReturnName(playerid, 0));
	return 1;
}

CMD:dados(playerid, params[])
{
	new
		number = random(6) + 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s rola um dado e cai sobre o número %d.", ReturnName(playerid, 0), number);
	return 1;
}

CMD:moeda(playerid, params[])
{
    new
        choice = random(2),
        result[MAX_PLAYER_NAME];

    if (choice == 0)
        format(result, sizeof(result), "cara");
    else
        format(result, sizeof(result), "coroa");

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s Joga uma moeda pra cima... E ela cai %s.", ReturnName(playerid, 0), result);
    return 1;
}

CMD:cumprimentar(playerid, params[])
{
	static
	    userid,
	    type;

	if (sscanf(params, "ud", userid, type))
	    return SendSyntaxMessage(playerid, "/cumprimentar [playerid/nome] [tipo]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "O jogador especificado está desconectado ou não perto de você.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "Você não pode se cumprimentar.");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Você deve especificar um tipo de 1 a 6.");

	PlayerData[userid][pShakeOffer] = playerid;
	PlayerData[userid][pShakeType] = type;

	SendServerMessage(userid, "%s ofereceu-se para apertar sua mão (use \"/aceitar cumprimento\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Você ofereceu-se para apertar a mão de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:revistar(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/revistar [playerid/name]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "O jogador especificado está desconectado ou não perto de você.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "Você não pode revistar-se.");

    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Você não pode executar animações no momento.");
	    
    ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 0, 0, 0, 0, 0, 1);
    PlayerData[userid][pFriskOffer] = playerid;

	SendServerMessage(userid, "%s está revistando você digite (type \"/aceitar revista\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Você se ofereceu para revistar %s.", ReturnName(userid, 0));
	return 1;
}

CMD:criargraffiti(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "Você só pode criar de graffiti fora de interiores .");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para os graffiti.");

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendServerMessage(playerid, "Você criou com sucesso o graffiti ID: %d.", id);
	return 1;
}

CMD:fspray(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Você está perto de um graffiti.");

	Dialog_Show(playerid, GraffitiColor, DIALOG_STYLE_LIST, "Seleione a Cor", "{FFFFFF}Branco\n{FF0000}Vermelho\n{FFFF00}Armarelo\n{33CC33}Verde\n{33CCFF}Azul Claro\n{FFA500}Laranja\n{1394BF}Azul Escuro", "Selecione", "Cancelar");
	return 1;
}

CMD:esconder(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	switch (PlayerData[playerid][pAdminHide])
	{
	    case 0:
	    {
	        PlayerData[playerid][pAdminHide] = 1;
	        SendServerMessage(playerid, "Você agora está oculto na lista de administrador.");
		}
		case 1:
	    {
	        PlayerData[playerid][pAdminHide] = 0;
	        SendServerMessage(playerid, "Você agora está visível na lista de administrador.");
		}
	}
	Log_Write("logs/admEscondido_log.txt", "[%s][ADMIN:] %s esta no modo escondido.", ReturnDate(), ReturnName(playerid, 0));
	return 1;
}

CMD:criardetector(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 8)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	static
	    query[255];

	for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (!MetalDetectors[i][detectorExists])
	{
	    MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
	    MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
	    GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

		format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
		mysql_tquery(g_iHandle, query, "OnDetectorCreated", "d", i);

	    Detector_Refresh(i);
	    SendServerMessage(playerid, "Você criou o detector de metais ID: %d.", i);
	    return 1;
	}
	SendErrorMessage(playerid, "O servidor atingiu um limite para detectores de metal.");
	return 1;
}

CMD:quebrartrava(playerid, params[])
{
	new id = Car_Nearest(playerid);

	if (!Inventory_HasItem(playerid, "Pe de Cabra"))
	    return SendErrorMessage(playerid, "Você não tem um pé de cabra.");

	if (id == -1)
	    return SendErrorMessage(playerid, "Você não está no alcance de qualquer veículo.");

	if (!CarData[id][carLocked])
	    return SendErrorMessage(playerid, "Este veículo não está travado.");

	PlayerData[playerid][pPicking] = 1;
	PlayerData[playerid][pPickCar] = id;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira um pé de cabra e começa a quebrar a trava do veiculo.", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Por favor, aguarde 60 segundos, enquanto o bloqueio é retirado.");
	return 1;
}

CMD:adestruirplanta(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 9)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/adestruirplanta [planta id]");

	if ((id < 0 || id >= MAX_DRUG_PLANTS) || !PlantData[id][plantExists])
	    return SendErrorMessage(playerid, "Você especificou uma planta inválida.");

	Plant_Delete(id);
	SendServerMessage(playerid, "Você destruiu a planta ID: %d.", id);
	return 1;
}

CMD:darcarro(playerid, params[])
{
	static
		userid,
	    model[32];

    if (PlayerData[playerid][pAdmin] < 9)
	   return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "us[32]", userid, model))
	    return SendSyntaxMessage(playerid, "/darcarro [playerid/nome] [modelid/nome]");

	if (Car_GetCount(userid) >= MAX_OWNABLE_CARS)
	    return SendErrorMessage(playerid, "Este jogador já possui a quantidade máxima de carros.");

    if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "Modelo Invalido.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

    GetPlayerPos(userid, x, y, z);
	GetPlayerFacingAngle(userid, angle);

	id = Car_Create(PlayerData[userid][pID], model[0], x, y + 2, z + 1, angle, random(127), random(127), 0);
    if (!Inventory_HasItem(userid, "CRLV"))
	{
    	Inventory_Add(userid, "CRLV", 1581);
	}
	
	if (id == -1)
	    return SendErrorMessage(playerid, "O servidor atingiu o limite para veículos dinâmicos.");

	SendServerMessage(playerid, "Você criou o veículo ID: %d para %s.", CarData[id][carVehicle], ReturnName(userid, 0));
	Log_Write("logs/darcarro_log.txt", "[%s][ADMIN:] %s deu um carro para %s modelo: %d.", ReturnDate(), PlayerData[playerid][pNomeOOC], ReturnName(userid, 0), CarData[id][carVehicle]);
	return 1;
}

CMD:resetvw(playerid, params[])
{
	if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendServerMessage(playerid, "Você corrigiu o seu mundo virtual (Virtual Word).");
	}
	else SendErrorMessage(playerid, "Seu mundo virtual não está grampeado agora.");
	return 1;
}

CMD:stopanim2(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "Você não precisa usar este comando agora.");

	ClearAnimations(playerid, 1);
    HidePlayerFooter(playerid);

	PlayerData[playerid][pLoopAnim] = 0;
	SendServerMessage(playerid, "Você parou todas as animações.");
	return 1;
}


CMD:ligar(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Telefone"))
	    return SendErrorMessage(playerid, "Você não tem um celular com você.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "O telefone deve estar ligado.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "Você não pode usar este comando agora.");

	static
	    targetid,
		number;

	if (sscanf(params, "d", number))
 	   return SendSyntaxMessage(playerid, "/ligar [número de telefone] (1222 para taxi ou mototaxi, 190 para emergencia, 222 para news, 223 para Alugar um Letreiro)");

	if (!number)
	    return SendErrorMessage(playerid, "O número de telefone especificado não está em serviço.");

	if (number == 190)
	{
		PlayerData[playerid][pEmergency] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu telefone móvel e faz uma chamada.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[MARE]:{FFFFFF} Qual serviço você precisa: \"Policia\" ou \"Bombeiros\"?");
	}
	else if (number == 1222)
	{
	    PlayerData[playerid][pTaxiCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	    RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu telefone móvel e faz uma chamada.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_YELLOW, "[OPERADOR]:{FFFFFF} O departamento de táxi foi notificado da sua chamada.");

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desligou seu celular.", ReturnName(playerid, 0));
		SendJobMessage(3, COLOR_YELLOW, "** %s está solicitando um táxi em %s (use /aceitarc para aceitar).", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 222)
	{
	    PlayerData[playerid][pPlaceAd] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	    RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu telefone móvel e faz uma chamada.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[OPERADOR]:{FFFFFF} Desculpe, você precisa jogar 4 horas para colocar um anúncio.");
		    cmd_desligar(playerid, "\1");
		}
		else if (PlayerData[playerid][pAdTime] < 1) {
			SendClientMessage(playerid, COLOR_CYAN, "[OPERADOR]:{FFFFFF} Por favor diga \"sim\" se você deseja anunciar por $500.");
		}
		else {
		    SendClientMessage(playerid, COLOR_CYAN, "[OPERADOR]:{FFFFFF} Você já anunciou nos últimos 2 minutos. Por favor, tente novamente mais tarde.");
		    cmd_desligar(playerid, "\1");
		}
	}

	else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "Você não pode chamar-se!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "O destinatário tem o seu telefone móvel desligado.");

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[playerid][pIncomingCall] = 1;

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;

		SendClientMessageEx(playerid, COLOR_YELLOW, "[TELEFONE]:{FFFFFF} Tentando uma discagem para #%d, aguarde uma resposta...", number);
		SendClientMessageEx(targetid, COLOR_YELLOW, "[TELEFONE]:{FFFFFF} Recebendo chamada de #%d (usee \"/atender\" para atender o telefone).", PlayerData[playerid][pPhone]);

        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);
        RemovePlayerAttachedObject(playerid, 9);
		SetPlayerAttachedObject(playerid, 4, 330, 9);
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu telefone móvel e faz uma chamada.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "O número de telefone especificado não está em serviço.");
	}
	return 1;
}


CMD:prancheta(playerid, params[])
{
    if (GetFactionType(playerid) !=  FACTION_PCESP)
		return SendErrorMessage(playerid, "Você não é um policial.");

    if (Inventory_HasItem(playerid, "Prancheta"))
	    	return SendErrorMessage(playerid, "Você ja está com a prancheta em mãos.");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearTrunk(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "Voce não pode tirar uma prancheta deste veiculo.");
	    if (!GetTrunkStatus(i))
		{
	        Inventory_Add(playerid, "Prancheta", 19894);
			ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega dentro da viatura um talão de ocorrencia.", ReturnName(playerid, 0));
	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	    return 1;
	}
	SendErrorMessage(playerid, "Você não está proximo a uma viatura, para pegar o talão!.");
    return 1;
}
CMD:guardaprancheta(playerid, prams[])
{
    if (GetFactionType(playerid) !=  FACTION_PCESP)
		return SendErrorMessage(playerid, "Você não é um policial.");

    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearTrunk(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "Voce não pode tirar uma prancheta deste veiculo.");
	    if (!GetTrunkStatus(i))
		{
	        Inventory_Remove(playerid, "Prancheta");
			ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guarda o talão de ocorrencia dentro da viatura.", ReturnName(playerid, 0));
		}
	    return 1;
	}
	SendErrorMessage(playerid, "Você não está proximo a uma viatura, para guarda o talão!.");
	return 1;
}
CMD:escreverpran(playerid, params[])
	{
		new joca[255];

		if (GetFactionType(playerid) !=  FACTION_PCESP)
			return SendErrorMessage(playerid, "Você não é um policial.");

		if (!Inventory_HasItem(playerid, "Prancheta"))
	    	return SendErrorMessage(playerid, "Você não esta com a prancheta em mãos, vá ate a viatura para pegar-la.");

		if(sscanf(params, "s[255]", params[0]))
		return SendClientMessage(playerid, COLOR_SERVER, "USE: /escreverpran <Numero do Talão e Ocorrido, Horario, VTR, Nome do Oficial>");

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega o talão de ocorrencia e começa a preencher.", ReturnName(playerid, 0));
		for(new i=0;i<30;i++)
		{
		if(Pranchetas[i][PTipo] != 1)
		{
		strmid(Pranchetas[i][PContenido], params[0], 0, strlen(params[0]), 1000);
		Pranchetas[i][PTipo] = 1;
		UpdatePranchetas();
		format(joca, sizeof(joca), "%s registrou uma ocorrencia de N° %d, /verprancheta.", ReturnName(playerid, 0), i+1);
		return SendFactionMessageEx(FACTION_PCESP, COLOR_DEPARTMENT, joca);
		}
	}
	return 1;
}
CMD:verprancheta(playerid, params[])
{
		new joca[255], numero;

		if (GetFactionType(playerid) !=  FACTION_PCESP)
			return SendErrorMessage(playerid, "Você não é um policial.");

        if (!Inventory_HasItem(playerid, "Prancheta"))
	    	return SendErrorMessage(playerid, "Você não esta com a prancheta em mãos, para ler o talão de ocorrencia, pegue dentro da viatura.");
	    	
		if(sscanf(params, "i", params[0]))
			return SendClientMessageEx(playerid, COLOR_SERVER, "Utilize: /verprancheta Nº do Talão de Ocorrencia <1-60>");
			
		numero = params[0]-1;
		if(Pranchetas[numero][PTipo] != 1)
		{
		SendClientMessageEx(playerid, COLOR_SERVER, "Este Numero de Talão não esta escrito");
		}
		else
		{
		format(joca, sizeof(joca), "Talão de  Nº: %d: %s",params[0], Pranchetas[numero][PContenido]);
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Talão de {FFFFFF}- Ocorrencia", joca, "Aceitar", "");
		//SendClientMessageEx(playerid,COLOR_CYAN, joca);
		}
		return 1;
	}
//Boletim
CMD:bo(playerid, params[])
  	{
		new joca[255];
		if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não esta conectado");
		

		if(sscanf(params, "s[255]", params[0])) return SendClientMessage(playerid, COLOR_SERVER, "Utilize: /bo <OCORRIDO, LEMBRE-SE DE COLOCAR UM CONTATO>");
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s está fazendo um boletim de ocorrencia.", ReturnName(playerid, 0));
		for(new i=0;i<30;i++)
		{
		if(Leys[i][lTipo] != 1)
		{
		strmid(Boletim[i][BContenido], params[0], 0, strlen(params[0]), 1000);
		Boletim[i][BTipo] = 1;
		UpdateBoletim();
		format(joca, sizeof(joca), "%s registrou um Boletim de Ocorrencia N° %d, /lerbo.", ReturnName(playerid, 0), i+1);
		return SendFactionMessageEx(FACTION_PCESP, COLOR_DEPARTMENT, joca);
		}
		}
		return 1;
	}
CMD:lerbo(playerid, params[])
  	{
		new joca[255], numero;
		if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não esta conectado");
		//
		if (GetFactionType(playerid) != FACTION_PCESP)
	        return SendErrorMessage(playerid, "Você deve ser um agente da polícia civil.");
		//

		if(sscanf(params, "i", params[0])) return SendClientMessageEx(playerid, COLOR_SERVER, "Utilize: /lerbo <1-60>");
		numero = params[0]-1;
		if(Boletim[numero][BTipo] != 1)
		{
		SendClientMessageEx(playerid, COLOR_SERVER, "Este Boletim de Ocorrencia não esta escrito");
		}
		else
		{
		format(joca, sizeof(joca), "BO Nº%d: %s",params[0], Boletim[numero][BContenido]);
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Boletim de {FFFFFF}- Ocorrencia", joca, "Aceitar", "");
		//SendClientMessageEx(playerid,COLOR_CYAN, joca);
		}
		return 1;
	}
CMD:retirarbo(playerid, params[])
  	{
		new joca[255], numero;
		if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não esta conectado");

		if (GetFactionType(playerid) != FACTION_PCESP)
	        return SendErrorMessage(playerid, "Você deve ser um agente da polícia civil.");


		if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3)
	     	return SendErrorMessage(playerid, "Você deve ser, pelo menos, rank %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 3);

		if(sscanf(params, "i", params[0])) return SendClientMessageEx(playerid, COLOR_SERVER, "Utilize: /retirarbo <1-60>");
		numero = params[0]-1;
		if(Boletim[numero][BTipo] != 1)
		{
		SendClientMessageEx(playerid, COLOR_SERVER, "Esta lei não esta escrita");
		}
		else
		{
		strmid(Boletim[numero][BContenido], "None", 0, strlen("None"), 255);
		Boletim[numero][BTipo] = 0;
		UpdateBoletim();
		format(joca, sizeof(joca), "%s retirou o Boletim de Ocorrencia N°%d.",ReturnName(playerid, 0), numero+1);
		return SendFactionMessageEx(FACTION_PCESP, COLOR_DEPARTMENT, joca);
		}
		return 1;
	}
CMD:mandato(playerid, params[])
  	{
		new joca[255];

   		if(GetFactionType(playerid) !=  FACTION_JUDICIAL)
	    return SendErrorMessage(playerid, "Você não é faz parte do Tribunal de Justiça Federal.");
	    
	    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 464.1481, -1288.2587, 18.9974))
			return SendErrorMessage(playerid, "Você não esta na mesa para expedir um mandato.");

        if (PlayerData[playerid][pFactionRank] < 14)
	     return SendErrorMessage(playerid, "Você deve ser, pelo menos, cargo 14.");

		if(sscanf(params, "s[255]", params[0])) return SendClientMessage(playerid, COLOR_SERVER, "Utilize: /mandatofederal <Artigo>");
		for(new i=0;i<30;i++)
		{
		if(Mandatos[i][MTipo] != 1)
		{
		strmid(Mandatos[i][MContenido], params[0], 0, strlen(params[0]), 255);
		Mandatos[i][MTipo] = 1;
		UpdateMandato();
		Inventory_Add(playerid, "Mandato", 1581);
		format(joca, sizeof(joca), "Juiz %s liberou o mandato N°%d, /vermandatos.",ReturnName(playerid, 0), i+1);
		Log_Write("logs/mandato.txt", "[%s] %s liberou o mandato N°%d, (%s).", ReturnDate(), ReturnName(playerid, 0), i+1, params[0]);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s está digitando um mandato.", ReturnName(playerid, 0));
		return SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, joca);
		}
		}
		return 1;
	}
CMD:rmandato(playerid, params[])
  	{
		new joca[255], numero;

		if(GetFactionType(playerid) != FACTION_JUDICIAL)
	    return SendErrorMessage(playerid, "Você não faz parte do Tribunal de Justiça Federal.");
	    
	    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 454.5761, -1285.5024, 18.9974))
			return SendErrorMessage(playerid, "Você não na mesa para retirar os mandatos.");

        if (PlayerData[playerid][pFactionRank] < 14)
	     return SendErrorMessage(playerid, "Você deve ser, pelo menos, cargo 14.");

		if(sscanf(params, "i", params[0])) return SendClientMessageEx(playerid, COLOR_SERVER, "Utilize: /rmandatofederal <1-100>");
		numero = params[0]-1;
		if(Mandatos[numero][MTipo] != 1)
		{
		SendErrorMessage(playerid, "Este mandato não esta escrita");
		}
		else
		{
		strmid(Mandatos[numero][MContenido], "None", 0, strlen("None"), 255);
		Mandatos[numero][MTipo] = 0;
		UpdateMandato();
		Inventory_Remove(playerid, "Mandato");
		format(joca, sizeof(joca), "Juiz %s retirou o mandato N°%d.",ReturnName(playerid, 0), numero+1);
		Log_Write("logs/mandato.txt", "[%s] %s o mandato N°%d.", ReturnDate(), ReturnName(playerid, 0), numero+1);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, joca);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s arquivou um mandato.", ReturnName(playerid, 0));
		}
		return 1;
	}
CMD:vermandatos(playerid, params[])
  	{
		new joca[255], numero;

		if(GetFactionType(playerid) !=  FACTION_PCESP)
	    	return SendErrorMessage(playerid, "Você não é um do Tribunal de Justiça Federal.");
	    	
        if(!IsPlayerInRangeOfPoint(playerid, 15.0, 451.3891, -1287.8939, 18.9974))
			return SendErrorMessage(playerid, "Você não na mesa para ver os mandatos.");

        if (PlayerData[playerid][pFactionRank] < 14)
	     return SendErrorMessage(playerid, "Você deve ser, pelo menos, cargo 14.");

		if(sscanf(params, "i", params[0])) return SendClientMessageEx(playerid, COLOR_SERVER, "Utilize: /vermandatosfederal <1-100>");
		numero = params[0]-1;
		if(Mandatos[numero][MTipo] != 1)
		{
		SendErrorMessage(playerid, "Este Mandato não esta escrito");
		}
		else
		{
		format(joca, sizeof(joca), "Mandato Nº%d: %s",params[0], Mandatos[numero][MContenido]);
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Mandato {FFFFFF}- Poder Judiciario", joca, "Confirmar", "");
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s está verificado os mandatos ativos.", ReturnName(playerid, 0));
		}
		return 1;
	}
CMD:entregarmandato(playerid, params[])
{
	static
	    userid,
	    joca[255],
		time;

    if(GetFactionType(playerid) !=  FACTION_PCESP)
	    	return SendErrorMessage(playerid, "Você não é um Oficial de Justiça para entregar este mandato.");

	if (sscanf(params, "ud", userid, time))
	    return SendSyntaxMessage(playerid, "/entregarmandatofederal [playerid/nome] [N° do Mandato]");

	//time = params[1]-1;
	if(Mandatos[time-1][MTipo] != 1)
	{
	SendErrorMessage(playerid, "Este Mandato não esta escrito");
	}
	else
	{
	Inventory_Remove(playerid, "Mandato");
	format(joca, sizeof(joca), "Mandato Nº%d: %s",params[0], Mandatos[time-1][MContenido]);
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Mandato {FFFFFF}- Poder Judiciario", joca, "Confirmar", "");
	SendNearbyMessage(userid, 30.0, COLOR_PURPLE, "** %s está lhe entregando um mandato.", ReturnName(playerid, 0));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** Você entregou o mandato para %s .", ReturnName(userid, 0));
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s entregou %s um mandato de busca e apreensão.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
  }

CMD:gov(playerid, params[]){
    if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Você não é um funcionário do governo.");
	    
	if(PlayerData[playerid][pFaction] == -1) return 1;
	if(PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1) return SendErrorMessage(playerid, "Você não tem acesso a este comando.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/gov [texto]");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) if (PlayerData[i][pCreated]) {
			SendClientMessageEx(i, COLOR_WHITE, "|___________ Governo - Noticias ___________|");
		    SendClientMessageEx(i, 0x2641FEAA, "%.64s", params);
		    SendClientMessageEx(i, 0x2641FEAA, "...%s ", params[64]);
		}
	}
	else{
	        foreach (new i : Player) if (PlayerData[i][pCreated]) {
			SendClientMessageEx(i, COLOR_WHITE, "|___________ Governo - Noticias ___________|");
		    SendClientMessageEx(i, 0x2641FEAA, "%.64s ",  params);
		}
	}
	return 1;
}

CMD:portamalas(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearTrunk(playerid, i))
	{


	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "Esse veículo não tem porta-malas.");

	    if (!GetTrunkStatus(i))
  {
	        SetTrunkStatus(i, true);
	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre o porta-malas do veiculo.", ReturnName(playerid, 0));
		}
		else
		{
			SetTrunkStatus(i, false);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s fecha o porta-malas do veiculo.", ReturnName(playerid, 0));
		}
	    return 1;
	}
	SendErrorMessage(playerid, "Você não está perto de nenhum veículo.");
	return 1;
}

CMD:abrirjanela(playerid,params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

    if (!IsWindowedVehicle(vehicleid))
		return SendErrorMessage(playerid, "Este veículo não possui janelas.");

	if(sscanf(params, "d", params[0]))
	{
		SendClientMessage(playerid, -1, "/abrirjanela [1/2/3/4]");
		SendClientMessage(playerid, -1, "1 - Condutor | 2 - passageiro (dianteiro) | 3 - atrás(esquerdo) | 4 - atrás(direito)");
		return 1;
	}
	if(params[0] > 4 || params[0] < 1) return SendClientMessage(playerid, -1, "1 - Condutor | 2 - passageiro (dianteiro) | 3 - atrás(esquerdo) | 4 - atrás(direito)");
	new driver, passenger, backleft, backright;
	GetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
	switch(params[0])
	{
	    case 1: driver = !driver ? (1) : (0);
	    case 2: passenger = !passenger ? (1) : (0);
	    case 3: backleft = !backleft ? (1) : (0);
	    case 4: backright = !backright ? (1) : (0);
	}
	SetVehicleParamsCarWindows(GetPlayerVehicleID(playerid), driver, passenger, backleft, backright);
	return 1;
}


CMD:vendar(playerid, params[])
{
	new giveid;
    if(sscanf(params, "u", giveid))
       	return SendClientMessage(playerid, 0xFF0000FF, "[Uso]: {FFFFFF}/vendar <id/nick>");
	if(IsPlayerConnected(giveid))
	{
		if(giveid == playerid)
			return SendClientMessage(playerid, 0xFF0000FF, " [Erro]: {FFFFFF}Você não pode vendar si mesmo");

     	if(BlindFold[giveid] == 0)
	    {
	           	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveid))
       				return SendClientMessage(playerid, 0xFF0000FF, "[Erro]: {FFFFFF}A vítima precisa estar no seu veículo.");

				SetPlayerDrunkLevel(giveid, 50000);
   				SetPlayerCameraPos(giveid, -678.3082,-4514.4253,-92.2059);
				SetPlayerCameraLookAt(giveid, -678.3082,-4514.4253,-92.2059);
            	BlindFold[giveid] = 1;
            	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s colocou uma venda nos olhos de %s.", ReturnName(playerid, 0), ReturnName(giveid));
		}
		else
		{
		    new Float:x, Float:y, Float:z;
		    GetPlayerPos(giveid,x,y,z);
		    if(PlayerToPoint(5, playerid, x, y, z))
		    {
		        SetCameraBehindPlayer(giveid);
		        SetPlayerDrunkLevel (giveid, 0);
		    	BlindFold[giveid] = 0;
	           	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s tirou uma venda dos olhos de %s.", ReturnName(playerid, 0), ReturnName(giveid));
			}
			else
			    return SendClientMessage(playerid, 0xFF0000FF, "[Erro]: {FFFFFF}O jogador não está perto de você.");
		}
    }
	else
		SendClientMessage(playerid, 0xFF0000FF, "[Erro]: {FFFFFF}Jogador não encontrado.");

    return true;
}

CMD:escudo(playerid, params[])
{
    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearTrunk(playerid, i))
        return SendErrorMessage(playerid, "Você não esta proxima a uma viatura.");

	if (GetFactionType(playerid) !=  FACTION_PCESP)
		return SendErrorMessage(playerid, "Você não é um policial.");
	{
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega um escudo CDC dentro do porta malas da viatura.", ReturnName(playerid, 0));
	}

    SetPlayerAttachedObject(playerid,1,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);

    return 1;
}

CMD:rescudo(playerid, params[])
{
    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearTrunk(playerid, i))
        return SendErrorMessage(playerid, "Você não esta proxima a uma viatura.");

    RemovePlayerAttachedObject(playerid,1);
    
   	{
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca um escudo CDC no porta malas da viatura.", ReturnName(playerid, 0));
	}
    
    return 1;
}

CMD:amarrar(playerid, params[])
{
    new
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/amarrar [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "O player está desconectado ou não está proximo a você.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não usar este comando em si mesmo.");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendErrorMessage(playerid, "O jogador deve está em pé.");

    if (PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "O player já está amarrado.");


	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	if (PlayerData[userid][pHoldWeapon] > 0)
	{
	    HoldWeapon(userid, 0);
	}
    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega uma corda e amarra o(a) %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:desamarrar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_GANG)
		return SendErrorMessage(playerid, "Você não é membro da facção.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/desamarrar [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "O player está desconectado ou não está proximo a você.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não usar este comando em si mesmo.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "O Player não está amarrado.");

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);


    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desamarra o(a) %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:rasteira(playerid, params[])
{

	new
		userid,
        string[64];

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/rasteira [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Este jogador está desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "Você não pode dar uma rasteira em você mesmo.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Você não está perto deste jogador.");

	{
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s da uma rasteira em %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ShowPlayerFooter(userid, string);

	 	ApplyAnimation(userid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
  	}
	return 1;
}

///////////////////////////////////////////////////

CMD:armac(playerid, params[])
{
        if(GetPlayerWeapon(playerid) == -1)
                return SendClientMessage(playerid, 0xFF6347FF, "Você não possui nenhuma arma na mão.");

        new gunname[128], string[128];

        if(!pWeaponHold[playerid])
        {
                if(GetPlayerWeapon(playerid) == 25 || GetPlayerWeapon(playerid) == 27 || GetPlayerWeapon(playerid) == 29 || GetPlayerWeapon(playerid) == 30 || GetPlayerWeapon(playerid) == 31 || GetPlayerWeapon(playerid) == 33 || GetPlayerWeapon(playerid) == 34)
                {
                        if(!pWeaponHold[playerid])
                        {
                        pWeaponHold[playerid] = GetPlayerWeapon(playerid);
                        GetWeaponName(GetPlayerWeapon(playerid), gunname, sizeof(gunname));
                        format(string, sizeof(string),"SERVIDOR: A sua %s foi acoplada ao seu corpo!",gunname);
                        SendClientMessage(playerid, 0xFFFF00FF, string);
                                return 1;
                        }
                        else
                        {
                        GetWeaponName(pWeaponHold[playerid], gunname, sizeof(gunname));
                        RemovePlayerAttachedObject(playerid, 4);
                        format(string, sizeof(string),"SERVIDOR: A sua %s foi desacoplada do seu corpo!",gunname);
                                SendClientMessage(playerid, 0xFFFF00FF, string);
                                pWeaponHold[playerid] = 0;
                        }
                }
                else
                {
                SendClientMessage(playerid, 0xFF6347FF, "Esta arma não pode ser acoplada a seu corpo.");
                }
        }
        else
        {
            RemovePlayerAttachedObject(playerid, 4);
            format(string, sizeof(string),"SERVIDOR: A arma em seu corpo foi desacoplada!");
                SendClientMessage(playerid, 0xFFFF00FF, string);
                pWeaponHold[playerid] = 0;
        }
        return 1;
}

stock RemoveWeaponHold(playerid, weaponid)
{
    if(weaponid == pWeaponHold[playerid])
        {
                RemovePlayerAttachedObject(playerid, 4);
                pWeaponHold[playerid] = 0;
        }
        return 1;
}
stock AddInfoPickup(pickupID, Float:posX, Float:posY, Float:posZ, string[], color, VW = 0)
{
	Create3DTextLabel(string, color, posX, posY, posZ + 0.5, 20.0, VW, true);
	AddStaticPickup(pickupID, 1, posX, posY, posZ, VW);
	return 1;
}

CMD:alugarcarro(playerid, params[]) {
    if(PlayerData[playerid][pRentedCar] != -1) {
        SendClientMessage(playerid, -1, "Você já está alugando um carro.");
        return 1;
    }

    new vehicleid = GetPlayerVehicleID(playerid);
    if(vehicleid == 0) {
        SendClientMessage(playerid, -1, "Você precisa estar em um carro para alugá-lo.");
        return 1;
    }

    new Float:pos[3];
    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if(GetVehicleModel(vehicleid) != 408 || PlayerData[playerid][pJob] != JOB_GARBAGE) {
        SendClientMessage(playerid, -1, "Você não pode alugar este veículo.");
        return 1;
    }

    if(PlayerData[playerid][pMoney] < 100) {
        SendClientMessage(playerid, -1, "Você não tem dinheiro suficiente para alugar este veículo.");
        return 1;
    }

    PlayerData[playerid][pMoney] -= 100;
    PlayerData[playerid][pRentedCar] = vehicleid;
    PlayerData[playerid][pRentalTime] = 3600; // 1 hora em segundos

    SetTimer("RemoveRental", 3600000, 0); // Timer para remover o aluguel após 1 hora

    SendClientMessage(playerid, -1, "Você alugou o carro por 1 hora por $100.");
    return 1;
}

forward RemoveRental(playerid);
public RemoveRental(playerid) {
    PlayerData[playerid][pRentedCar] = -1;
    PlayerData[playerid][pRentalTime] = 0;
    SendClientMessage(playerid, -1, "Seu período de aluguel expirou.");
}

CMD:motor(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = Car_GetID(vehicleid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Você não está em um veiculo.");
		

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Você não pode fazer isso porque não está de motorista.");

	if (CoreVehicles[vehicleid][vehFuel] < 1)
	    return SendErrorMessage(playerid, "Este veiculo está sem combustível.");

	if (ReturnVehicleHealth(vehicleid) <= 300)
	    return SendErrorMessage(playerid, "Este veiculo está quebrado e não pode ser ligado.");

 	if (PlayerData[playerid][pRentedCar] != 1 && PlayerData[playerid][pRentedCar] != vehicleid && GetVehicleModel(vehicleid) == 408)
    	return SendErrorMessage(playerid, "Você não alugou este veículo.");

    if (id != -1 && CarData[id][carOwner] > 0 && !Car_IsOwner(playerid, id))
    	return SendErrorMessage(playerid, "Você não tem as chave desse veículo.");
    	
    	
   	if (id != -1 && GetVehicleModel(vehicleid) != 408 && CarData[vehicleid][carFaction] != FACTION_GOV){

		if (id != -1 && CarData[id][carFaction] != 0 && PlayerData[playerid][pFaction] != GetFactionByID(CarData[id][carFaction]))
	    	return SendErrorMessage(playerid, "Você não tem a chave desse veículo.");

	}
	
	if(bateria[vehicleid] == 1)
		return SendErrorMessage(playerid, "Você não está conseguindo ligar o motor, pode ser a bateria.");

	if(SemBateria[vehicleid] == 1)
		return SendErrorMessage(playerid, "Você não consegue ligar o motor, pois o veículo está sem bateria.");
	    
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	switch (GetEngineStatus(vehicleid))
	{
	    case false:
	    {
	        SetEngineStatus(vehicleid, true);
	        //ShowPlayerFooter(playerid, "Voce ~g~ligou~w~ o motor!");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca a chave na ignição, e liga o motor.", ReturnName(playerid, 0));
		}
		case true:
		{
		    //KillTimer(FlashTime[vehicleid]);
		    SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
		    SetEngineStatus(vehicleid, false);
		    //ShowPlayerFooter(playerid, "Voce ~r~desligou~w~ o motor!");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s gira a chave na ignição e desliga o motor.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:ligacaodireta(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new id = Car_GetID(vehicleid);
	//new str[32];

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "Você não esta dentro de um carro.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Você não pode usar esse comando.");

	if (CoreVehicles[vehicleid][vehFuel] < 1)
	    return SendErrorMessage(playerid, "Carro com tanque de combustivel vazio.");

	if (ReturnVehicleHealth(vehicleid) <= 300)
        return SendErrorMessage(playerid, "Veiculo quebrado.");

    if (!Inventory_HasItem(playerid, "Mixa"))
		return SendErrorMessage(playerid, "Você não tem nenhuma chave mixa para ligar este carro.");

    if (id != -1 && CarData[id][carFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(CarData[id][carFaction]))
	    return SendErrorMessage(playerid, "Este carro tem sistema de bloqueio Ant-Furto.");

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s esta fazendo a ligação direta no carro.", ReturnName(playerid, 0));
    if(bateria[vehicleid] == 0 && SemBateria[vehicleid] == 0)
    {
	    new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s o alarme do %s está disparando.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
    }
    SendErrorMessage(playerid, "Aguarde 1 minuto para ate que termine de fazer a ligação direta.");
    SetTimerEx("LigacaoDireta", 60000, false, "d", playerid); //vou colocar 2 so pa teste
	return 1;
}
forward LigacaoDireta(playerid);
public LigacaoDireta(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bateria[vehicleid] == 1)
	    return SendErrorMessage(playerid, "Você não está conseguindo ligar o carro, pode ser a bateria.");
    if(SemBateria[vehicleid] == 1)
	    return SendErrorMessage(playerid, "Você não pode ligar este carro, pois o veículo está sem a bateria.");
	switch (GetEngineStatus(vehicleid))
	{
		case false:
		{
			SetEngineStatus(vehicleid, true);
			SetLightStatus(vehicleid, true);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ligou o carro com uma chave mixa.", ReturnName(playerid, 0));
		}
		case true:
		{
		    SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
			SetEngineStatus(vehicleid, false);
			SetLightStatus(vehicleid, false);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desliga o carro com sua mixa.", ReturnName(playerid, 0));
		}
	}
	return 1;
}



CMD:limparmeuchat(playerid, params[])
{
	for(new a = 0; a < 100; a++)
	SendClientMessage(playerid, -1, " ");
	return 1;
}

CMD:prego(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/prego [opção]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPÇÕES]:{FFFFFF} colocar, retirar, retirartudo");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "colocar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 1;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou um tapete de prego sobe o solo.", ReturnName(playerid, 0));
			SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s colocou um tapete de prego em %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "O servidor atingiu o limite para tapetes de pregos.");
	}
	else if (!strcmp(params, "retirar", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s retirou um tapete de prego que estava no solo..", ReturnName(playerid, 0));
			SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s retirou um tapete de prego em %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Você não está no alcance de qualquer tapete de prego.");
	}
	else if (!strcmp(params, "retirartudo", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s retirou todos os tapetes de pregos.", ReturnName(playerid, 0));
	}
	return 1;
}


CMD:mercadonegro(playerid)
{
	ShowPlayerDialog(playerid, 01, DIALOG_STYLE_LIST, "{FF0000}Mercado Negro", "Semente de Maconha\nSemente de Cocaina\nFaca\nColt-45\nDesert Eagle\nTec-9\nAk-47\nShotgun", "Comprar", "Fechar");
   		return 1;
}

CMD:caixa(playerid, params[])
{
    if (isnull(params))
    {
        SendSyntaxMessage(playerid, "/caixa [opção]");
        SendClientMessage(playerid, COLOR_YELLOW, "[OPÇÕES]:{FFFFFF} pegar, colocar, abrir, carregar");
        return 1;
    }

    static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

    if (!strcmp(params, "colocar", true))
    {
        if (PlayerData[playerid][pCaixa] == 0)
            return SendErrorMessage(playerid, "Você não está segurando nenhuma caixa.");

        for (new i = 0; i != MAX_CAIXAS; i++) if (!CaixaData[i][caixaExists])
        {
            CaixaData[i][caixaExists] = true;
            CaixaData[i][caixaType] = PlayerData[playerid][pCaixa]; // Tipo da caixa
            
           	fX += 1.5 * floatsin(-fA, degrees);
			fY += 1.5 * floatcos(-fA, degrees);
			
   			CaixaData[i][caixaPos][0] = fX;
            CaixaData[i][caixaPos][1] = fY;
            CaixaData[i][caixaPos][2] = fZ -1;
            
            ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

            CaixaData[i][caixaObject] = CreateDynamicObject(964, fX, fY, fZ -1, 0.0, 0.0, fA); // Troque ModelID_for_Caixa pelo ID do modelo da caixa
            PlayerData[playerid][pCaixa] = 0; // O jogador não está mais segurando a caixa
            RemovePlayerAttachedObject(playerid, 4); // Se você estiver usando objetos anexados
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou uma caixa sobre o solo.", ReturnName(playerid, 0));

            return 1;
        }
        SendErrorMessage(playerid, "O servidor atingiu o limite de caixas.");
    }
    else if (!strcmp(params, "pegar", true))
    {
        if (PlayerData[playerid][pCaixa] != 0)
            return SendErrorMessage(playerid, "Você já está segurando uma caixa.");

        for (new i = 0; i != MAX_CAIXAS; i++) if (CaixaData[i][caixaExists] && IsPlayerInRangeOfPoint(playerid, 2.0, CaixaData[i][caixaPos][0], CaixaData[i][caixaPos][1], CaixaData[i][caixaPos][2]))
        {
            PlayerData[playerid][pCaixa] = CaixaData[i][caixaType]; // O jogador agora está segurando a caixa
            ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.0, 0.0, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000); // Ajuste os valores conforme necessário
    		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    		
            CaixaData[i][caixaExists] = false;
            DestroyDynamicObject(CaixaData[i][caixaObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou uma caixa do solo.", ReturnName(playerid, 0));
            return 1;
        }
        SendErrorMessage(playerid, "Você não está no alcance de qualquer caixa.");
    }
    else if (!strcmp(params, "abrir", true))
    {
        for (new i = 0; i != MAX_CAIXAS; i++) if (CaixaData[i][caixaExists] && IsPlayerInRangeOfPoint(playerid, 2.0, CaixaData[i][caixaPos][0], CaixaData[i][caixaPos][1], CaixaData[i][caixaPos][2]))
        {
        
            CaixaData[i][caixaExists] = false;
            DestroyDynamicObject(CaixaData[i][caixaObject]);
            
            if (CaixaData[i][caixaType] == 1) {
		  		DropItem("Maconha Seeds", "None", 1578, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com sementes de maconha.");
		        return 1;
		    }

		    if (CaixaData[i][caixaType] == 2) {
		  		DropItem("Cocaina Seeds", "None", 1575, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com sementes de cocaina.");
		        return 1;
		    }

		    if (CaixaData[i][caixaType] == 3) {
		  		DropItem("Faca", "None", 335, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 4, 1);
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com facas.");
		        return 1;
		    }

		    if (CaixaData[i][caixaType] == 4) {
		  		DropItem("Colt 45", "None", 346, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 22, 100);
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com Colt-45");
		        return 1;
		    }

		    if (CaixaData[i][caixaType] == 5) {
		  		DropItem("Desert Eagle", "None", 348, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 24, 100);
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com Deser-Eagle");
		        return 1;
		    }

		    if (CaixaData[i][caixaType] == 6) {
		  		DropItem("Tec-9", "None", 372, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 32, 150);
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com Tec-9");
		        return 1;
		    }

		    if (CaixaData[i][caixaType] == 7) {
		  		DropItem("AK-47", "None", 355, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 30, 150);
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com Ak-47");
		        return 1;
		    }
		    if (CaixaData[i][caixaType] == 8) {
		  		DropItem("Shotgun", "None", 349, 1, fX, fY, fZ-0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), 25, 100);
		  		SendClientMessage(playerid, COLOR_GREEN, "Você abriu um caixa com Shotgun");
		        return 1;
 			}

            return 1;
        }
        SendErrorMessage(playerid, "Você não está no alcance de qualquer caixa para abrir.");
    }
    else if (!strcmp(params, "carregar", true)) {
	    if (PlayerData[playerid][pCaixa] == 0)
	        return SendErrorMessage(playerid, "Você não está segurando nenhuma caixa.");

		for (new vehicleid = 1; vehicleid != MAX_VEHICLES; vehicleid ++) if (IsLoadableVehicle(vehicleid) && IsPlayerNearBoot(playerid, vehicleid))
		{
		    if (vehicleid == INVALID_VEHICLE_ID || !IsPlayerNearBoot(playerid, vehicleid)) // Verifica se o jogador está perto do porta-malas do veículo
		        return SendErrorMessage(playerid, "Você precisa estar perto do porta-malas de um veículo para carregar a caixa.");

		    // Verificar se o veículo já tem muitas caixas
		    if (CaixaVeiculoData[vehicleid][veiculoID] >= MAX_CAIXAS_VEH)
		        return SendErrorMessage(playerid, "Este veículo já possui muitas caixas (limite: %d).", MAX_CAIXAS_VEH);

		    // Obter o ID da caixa que o jogador está segurando
		    new caixaID = PlayerData[playerid][pCaixa];

		    // Adicionar a caixa ao veículo
		    for (new i = 0; i < MAX_CAIXAS_VEH; i++) {
		        if (CaixaVeiculoData[vehicleid][caixasCarregadas][i] == 0) { // Encontra um espaço vazio para a caixa
		            CaixaVeiculoData[vehicleid][caixasCarregadas][i] = caixaID; // Carrega a caixa no veículo
		            PlayerData[playerid][pCaixa] = 0; // O jogador não está mais segurando a caixa
		            ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
		            RemovePlayerAttachedObject(playerid, 4); // Remove o objeto anexado (caixa)
		            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou uma caixa dentro do caminhão.", ReturnName(playerid, 0));
		            return 1;
		        }
		    }
   		}
	}
    return 1;
}

CMD:caixas(playerid, params[]) {
    new string[512];
    string[0] = '\0';
    new found = false;

    for (new vehicleid = 1; vehicleid < MAX_VEHICLES; vehicleid++) {
        if (IsLoadableVehicle(vehicleid) && IsPlayerNearBoot(playerid, vehicleid)) {
            for (new i = 0; i < MAX_CAIXAS_VEH; i++) {
                if (CaixaVeiculoData[vehicleid][caixasCarregadas][i] != 0) {
                    new caixaID = CaixaVeiculoData[vehicleid][caixasCarregadas][i];
                    // Usando Caixa_GetType diretamente na função format
                    format(string, sizeof(string), "%sCaixa #%d: Tipo: %s\n", string, caixaID, Caixa_GetType(1));
                    found = true;
                }
            }
        }
    }

    if (!found) {
        return SendErrorMessage(playerid, "Não há caixas neste veículo.");
    }

    // Mostrar as informações das caixas para o jogador
    return Dialog_Show(playerid, Caixa, DIALOG_STYLE_LIST, "Caixas no Veículo", string, "OK", "Cancelar");
}

CMD:creditos(playerid)
{
	new StrCr[700];
	strcat(StrCr, "{32CD32}×{1E90FF}Fundador: {F8F8FF}Bay\n");
	strcat(StrCr, "{32CD32}×{1E90FF}Scripts: {F8F8FF}Shandai Gawa Digao\n");
	strcat(StrCr, "{32CD32}×{1E90FF}Scripts: {F8F8FF}MaFhal\n");
	strcat(StrCr, "        {FFF000}Obrigado");
	ShowPlayerDialog(playerid, 12, DIALOG_STYLE_MSGBOX, "[MC:RP] - Servidor", StrCr, "Fechar", "");
	return 1;
}

CMD:dmala(playerid, params[])
{
	static
	    userid;
    new vehicleid = GetPlayerVehicleID(playerid);
	if (sscanf(params, "ud", userid))
	    return SendSyntaxMessage(playerid, "/dmala [playerid/nome]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "O suspeito não esta perto de voce.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "O suspeito deve estar algemado/amarrado.");
	    
    if (!GetTrunkStatus(vehicleid))
		return SendErrorMessage(playerid, "Você precisa abrir o porta-malas.");

    if(!IsPlayerInAnyVehicle(userid)) return SendErrorMessage(playerid, "O suspeito precisa está dentro do veículo para colocar dentro porta malas.");
    SetPlayerPos(userid, 2264.8218, -1213.3932, 1048.9272);
    SetPlayerInterior(userid, 1);
    Tanoportamalas[userid] = 1;
	SetPlayerVirtualWorld(userid, (playerid + 100));
 	SetPlayerFacingAngle(userid, 0.0);


    if (GetPlayerState(userid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(userid, PlayerData[userid][pPos][0], PlayerData[userid][pPos][1], PlayerData[userid][pPos][2]);
		GetPlayerFacingAngle(userid, PlayerData[userid][pPos][3]);

		PlayerData[userid][pInterior] = GetPlayerInterior(userid);
		PlayerData[userid][pWorld] = GetPlayerVirtualWorld(userid);
	}
	SetPlayerInterior(userid, GetPlayerInterior(vehicleid));
	SetPlayerVirtualWorld(userid, GetPlayerVirtualWorld(vehicleid));
    TogglePlayerSpectating(userid, 1);
	if (IsPlayerInAnyVehicle(playerid))
	PlayerSpectateVehicle(userid, GetPlayerVehicleID(playerid));
	else
	PlayerSpectatePlayer(userid, vehicleid);
	PlayerData[userid][pSpectator] = vehicleid;

	ApplyAnimationEx(userid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);

	SendServerMessage(userid, "Você está dentro do porta-malas.");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou %s no porta mala da viatura.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}
CMD:rmala(playerid, params[])
{
	static
	    userid;
    new vehicleid = GetPlayerVehicleID(playerid);
    if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/rmala [playerid/nome]");
    if(!IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "Você precisa está dentro da  viatura.");
	if (userid == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "Você especificou um jogador inválido.");
    if (!GetTrunkStatus(vehicleid))
		return SendErrorMessage(playerid, "Você precisa abrir o porta-malas.");

	if (Tanoportamalas[userid] == 1)
	{
	    TogglePlayerSpectating(userid, false);
	    Tanoportamalas[userid] = 0;
	    SendPlayerToPlayer(userid, playerid);
	    SetPlayerVirtualWorld(userid, playerid);
		PlayerData[userid][pWorld] = playerid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s retirou %s do porta malas.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else SendErrorMessage(playerid, "Este suspeito não está no porta-malas");
	return 1;
}

CMD:sh(playerid, params[]) // sair do H dentro do veiculo
{
	ApplyAnimation(playerid, "ped", "CAR_sit", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:vercasa(playerid, params[]) // ver o que tem na casa dos players no armazenamento
{
	static
	    houseid = 1;

		if (PlayerData[playerid][pAdmin] < 6)
			return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");
		{
	    House_OpenStorage(playerid, houseid);
		}
	return 1;
}
CMD:armas(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar esse comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/armas [playerid/nome]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "O player está desconectado.");

	new
	    weaponid,
	    ammo;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Armas de %s:", ReturnName(userid, 0));

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(userid, i, weaponid, ammo);

		if (weaponid > 0)
		    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d munições)", ReturnWeaponName(weaponid), ammo);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}
AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}
//armas bandoleira
forward atualizarArmaC(playerid);
public atualizarArmaC(playerid){
	if(!IsPlayerConnected(playerid)) return 1;
	new weaponid[MAX_PLAYERS], ammo[MAX_PLAYERS];
	for(new i = 0; i<13; i++){
	    GetPlayerWeaponData(playerid, i, weaponid[playerid], ammo[playerid]);
	    if(GetPlayerWeapon(playerid) != 31 && weaponid[playerid] == 31 && ArmaAttached[playerid] == 0)
		{
            SetPlayerAttachedObject(playerid,3,356,1,0.11,0.26,-0.18,11.0,-327.0,174.0,1.00,1.00,1.00); //M4
	        ArmaAttached[playerid] = 1;

	    }

	    if(GetPlayerWeapon(playerid) != 30 && weaponid[playerid] == 30 && ArmaAttached[playerid] == 0)
		{
	        SetPlayerAttachedObject(playerid,3,355,1,0.11,0.26,-0.18,11.0,-327.0,174.0,1.00,1.00,1.00); //AK
	        ArmaAttached[playerid] = 1;
	    }

     	if(GetPlayerWeapon(playerid) == 30 && ArmaAttached[playerid] == 1)
		{
	        RemovePlayerAttachedObject(playerid, 3);
	        ArmaAttached[playerid] = 0;
	    }

	    if(GetPlayerWeapon(playerid) == 31 && ArmaAttached[playerid] == 1)
		{
	        RemovePlayerAttachedObject(playerid, 3);
	        ArmaAttached[playerid] = 0;
	    }
	}
	//checar fuzil
	new existe[MAX_PLAYERS] = 0;
	for(new i=0; i< 13; i++){
	    GetPlayerWeaponData(playerid, i, weaponid[playerid], ammo[playerid]);
	    if(weaponid[playerid] == 31 || weaponid[playerid] == 30){
	        existe[playerid] = 1;
	    }
	}
	if(existe[playerid] == 0){
	    RemovePlayerAttachedObject(playerid, 3);
	}else{
	    existe[playerid] = 0;
	}
	return 1;
}



new ColdreArmaAtt[MAX_PLAYERS] = 0;
new Municoldre[MAX_PLAYERS] = 0;

CMD:coldre(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(ColdreArmaAtt[playerid] > 0)
        {
            if(ColdreArmaAtt[playerid] == 1)
            {
                RemovePlayerAttachedObject(playerid, 3);
                SetPlayerAmmo(playerid, 24, Municoldre[playerid]);
                ColdreArmaAtt[playerid] = 0;
                Municoldre[playerid] = 0;
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca sua PT.40 do coldre, logo destravando.", ReturnName(playerid, 0));
            }
        }
        else
        {
            if(GetPlayerWeapon(playerid) == 24)
            {
                SetPlayerAttachedObject(playerid, 3, 348, 8, -0.08, -0.03, 0.08, -82.0, 0.0, -1.0, 1.00, 1.00, 1.00); //Deagle
                ColdreArmaAtt[playerid] = 1;
                Municoldre[playerid] = GetPlayerAmmo(playerid);
                SetPlayerAmmo(playerid, 24, 0);
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s trava sua PT.40, logo colocando em seu coldre.", ReturnName(playerid, 0));
                SendClientMessage(playerid, COLOR_RED, "Para pegar, digite /coldre.");
            }
            else
            {
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem a arma necessária.");
            }
        }
    }
    return 1;
}

CMD:setaradmin(playerid, params[])
{
	static
		userid,
	    level;

	if (PlayerData[playerid][pAdmin] < 10)
	    return SendErrorMessage(playerid, "Você não tem permissão para usar este comando.");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/setaradmin [playerid/name] [level]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Você especificou um jogador inválido.");

	if (level < 0 || level > 9)
	    return SendErrorMessage(playerid, "Nível administrador inválido. Os níveis variam entre 0 e 9.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Você não pode rebaixar um admin maior que o seu.");

	if (level > PlayerData[userid][pAdmin])
	{
	    SendAdminAction(playerid, "Você promoveu %s para admin level (%d).", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s provomeu você a admin level (%d).", PlayerData[playerid][pNomeOOC], level);
	}
	else
	{
	    SendAdminAction(playerid, "Você rebaixou %s a admin level (%d).", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s te rebaixou a admin level (%d).", PlayerData[playerid][pNomeOOC], level);
	}
	PlayerData[userid][pAdmin] = level;
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s setou admin para %s com nivel de Adm: %d.", ReturnName(playerid, 0), ReturnName(userid, 0), level);
 	Log_Write("logs/admin_log.txt", "[%s] %s setou a %s admin level %d.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), level);
	return 1;
}

forward CongelarPlayer(playerid);
public CongelarPlayer(playerid)
{
      TogglePlayerControllable(playerid,1);
      return 1;
}


CMD:concessionaria(playerid, params[]) {
    ShowPlayerDialog(playerid, DIALOG_MAIN, DIALOG_STYLE_LIST, "Concessionária", "Motos e bikes\nCarros\nBarcos", "Selecionar", "Fechar");
    return 1;
}

public IsNeonActive2(vehicleid) {
    return NeonObject[vehicleid] || NeonTimer[vehicleid];
}

public SetNeon(vehicleid, color, type) {

    RemoveNeon(vehicleid);
    new objectModel = color;

    if (type == TYPE_SOLID) {
        SolidNeon2[vehicleid] = 1;
        NeonObject[vehicleid] = CreateDynamicObject(objectModel, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        AttachDynamicObjectToVehicle(NeonObject[vehicleid], vehicleid, 0.0, 0.0, -0.55, 0.0, 0.0, 0.0);
    } else if (type == TYPE_BLINK) {
        SolidNeon2[vehicleid] = 0;
        NeonTimer[vehicleid] = SetTimerEx("ToggleNeonBlink", 1000, true, "ii", vehicleid, objectModel);

    }
    return 1;
}

forward ToggleNeonBlink(timerid, vehicleid, objectModel);
public ToggleNeonBlink(timerid, vehicleid, objectModel) {
    if (NeonObject[vehicleid]) {
        DestroyDynamicObject(NeonObject[vehicleid]);
        NeonObject[vehicleid] = 0;
    } else {
        NeonObject[vehicleid] = CreateDynamicObject(objectModel, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
        AttachDynamicObjectToVehicle(NeonObject[vehicleid], vehicleid, 0.0, 0.0, -0.55, 0.0, 0.0, 0.0);
    }
}

public RemoveNeon(vehicleid) {
    if (NeonObject[vehicleid]) {
        DestroyDynamicObject(NeonObject[vehicleid]);
        NeonObject[vehicleid] = 0;
    }
    if (NeonTimer[vehicleid]) {
        KillTimer(NeonTimer[vehicleid]);
        NeonTimer[vehicleid] = 0;
    }
    SolidNeon2[vehicleid] = 0;
    return 1;
}

CMD:neon(playerid, params[]) {
    if (!IsPlayerInAnyVehicle(playerid)) {
        SendClientMessage(playerid, -1, "Você precisa estar em um veículo para instalar o neon.");
        return 1;
    }

    new vehicleid = GetPlayerVehicleID(playerid);
    if (IsNeonActive2(vehicleid)) {
        SendClientMessage(playerid, -1, "Este veículo já possui neon. Use /removerneon para removê-lo primeiro.");
        return 1;
    }


    new colorParam[10], typeParam[10], color, type;
    if(sscanf(params, "s[10] s[10]", colorParam, typeParam)) {
        SendClientMessage(playerid, -1, "Uso: /neon2 [cor] [tipo] (ex: /neon2 azul solido)");
        return 1;
    }

    // Convertendo o parâmetro da cor em ID de objeto do neon
    if (!strcmp(colorParam, "azul", true)) {
        color = 18648; // ID do objeto do neon azul
    } else if (!strcmp(colorParam, "verde", true)) {
        color = 18649; // ID do objeto do neon verde
    } // ... outros else if para as outras cores
    else {
        SendClientMessage(playerid, -1, "Cor inválida. Cores disponíveis: azul, verde, rosa, vermelho, branco, amarelo.");
        return 1;
    }

    // Convertendo o parâmetro do tipo em tipo do neon
    if (!strcmp(typeParam, "solido", true)) {
        type = TYPE_SOLID;
    } else if (!strcmp(typeParam, "piscante", true)) {
        type = TYPE_BLINK;
    } else {
        SendClientMessage(playerid, -1, "Tipo inválido. Tipos disponíveis: solido, piscante.");
        return 1;
    }

    SetNeon(vehicleid, color, type);
    GivePlayerMoney(playerid, -3000);
    SendClientMessage(playerid, -1, "Neon instalado com sucesso!");

    return 1;
}

// Sistema Policial

CMD:prefixo(playerid, params[])
{
    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
	new string[32];

	if(!IsPlayerInAnyVehicle(playerid))
		return SendErrorMessage(playerid, "Você não está em um veículo.");

	if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) ==  FACTION_JUDICIAL && GetFactionType(playerid) ==  FACTION_MEDICOS)
		return SendErrorMessage(playerid, "Você deve ser um Policial.");

	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Você deve estar em uma viatura.");

	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Prefixo removido.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string))
		return SendErrorMessage(playerid, "Você deve colocar um prefixo.");

	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 10.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -2.8, 0.0);
		vehiclecallsign[vehicleid] = 1;
	}
	return 1;
}

CMD:verpresos(playerid, params[])
{
	new joca[255], numero;

	if (GetFactionType(playerid) != FACTION_PCESP)
		return SendErrorMessage(playerid, "Você não tem autorização para ver os presos.");

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 279.3820, 1852.3685, 9.2817))
		return SendErrorMessage(playerid, "Você não esta proximo ao quadro de presos.");

	if(sscanf(params, "i", params[0]))
		return SendClientMessageEx(playerid, COLOR_SERVER, "Utilize: /verpresos <Numero do Penitenciario>, use /penapaga para retirar");

	numero = params[0]-1;

	if(Leys[numero][lTipo] != 1)
		{
			SendClientMessageEx(playerid, COLOR_SERVER, "Este registro penintenciario nao esta cadastrado.");
		}
		else
		{
			format(joca, sizeof(joca), "Protocolo de Penitenciario Nº 9384%d: %s",params[0], Leys[numero][lContenido]);
			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "{23A9D6}Presos {FFFFFF}- Penitenciaria", joca, "Aceitar", "");
			//SendClientMessageEx(playerid,COLOR_CYAN, joca);
		}
	return 1;
}

CMD:bafometro(playerid, params[])
{
  	new giveid, thestring[256];
    if (GetFactionType(playerid) != FACTION_PCESP && GetFactionType(playerid) !=  FACTION_MEDICOS)
		return SendErrorMessage(playerid, "Você não é um oficial.");

	if(sscanf(params, "u", giveid))
	{
		SendClientMessage(playerid, 0xFF0000FF, "[Uso]: {FFFFFF}/bafometro <Id/Nick>");
    	return true;
	}
	if(IsPlayerConnected(playerid))
	{
		if(ProxDetectorS(5.0, playerid, giveid))
		{
		  	if(PlayerDrunk[giveid] >= 0)
		  	{
		    	format(thestring, sizeof(thestring), "O bafômetro mostra: (%d ml) de álcool no sangue", PlayerDrunk[giveid]);
			   	SendClientMessage(playerid, COLOR_YELLOW, thestring);
		       	SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "* %s fez teste do bafômetro em %s.",ReturnName(playerid, 0), ReturnName(giveid));
		       	return true;
		  	}
  		}
  		else
  		{
  		SendClientMessage(playerid, COLOR_WHITE,"{FF0000}[Erro]: {FFFFFF}Aproxime-se mais da vitima.");
  		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE,"{FF0000}[Erro]: {FFFFFF}ID não encontrado.");
	return true;
}


CMD:bloqueio(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você deve ser um agente da polícia.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/bloqueio [opção]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPÇÕES]:{FFFFFF} colocar, retirar, retirartudo");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "colocar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(981, fX, fY, fZ, 0.0, 0.0, fA);
            SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou um bloqueio sobe o solo.", ReturnName(playerid, 0));
			SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s colocou um bloqueio em %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "O servidor atingiu o limite para bloqueio de estrada.");
	}
	else if (!strcmp(params, "retirar", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s retirou um bloqueio que estava no solo.", ReturnName(playerid, 0));
			SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s retirou um bloqueio em %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Você não está no alcance de qualquer bloqueio.");
	}
	else if (!strcmp(params, "retirartudo", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_RADIO, "RADIO: %s retirou todos os boqueios.", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:pino(playerid, params[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP)
	    return SendErrorMessage(playerid, "Você não é um policial.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/pino [opção]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPÇÕES]:{FFFFFF} dropar, destruir, destruirtodas");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "dropar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(1237, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou um pino no chão.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s %s colocou um pino em %s.**", Faction_GetRank(playerid), ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "O servidor já atingiu o limite de pino dropados.");
	}
	else if (!strcmp(params, "destruir", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou seu pino do chão.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s pegou seu pino em %s.**", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Você não está perto de sua pino.");
	}
	else if (!strcmp(params, "destruirtodas", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s destruiu todos os pino.**", ReturnName(playerid, 0));
	}
	return 1;
}
CMD:interditar(playerid, params[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP && GetFactionType(playerid) !=  FACTION_JUDICIAL)
	    return SendErrorMessage(playerid, "Você não é um policial.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/interditar [opção]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPÇÕES]:{FFFFFF} dropar, destruir, destruirtodas");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "dropar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(19834, fX, fY, fZ - 0.15, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou uma faixa de interditado.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s %s colocou uma faixa interditada em %s.**", Faction_GetRank(playerid), ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "O servidor já atingiu o limite de faixas dropados.");
	}
	else if (!strcmp(params, "destruir", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s enroulou a faixa de interdição.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s enrolou a faixa em %s.**", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Você não está perto da faixa.");
	}
	else if (!strcmp(params, "destruirtodas", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s destruiu todas as faixas.**", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:cone(playerid, params[])
{
	if (GetFactionType(playerid) !=  FACTION_PCESP && GetFactionType(playerid) !=  FACTION_MEDICOS)
	    return SendErrorMessage(playerid, "Você não é um oficial ou membro do governo.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/cone [opção]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPÇÕES]:{FFFFFF} dropar, destruir, destruirtodas");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "dropar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Você deve sair do veículo primeiro.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(1238, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colocou um cone no chão.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s %s colocou um cone em %s.**", Faction_GetRank(playerid), ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "O servidor já atingiu o limite de cones dropados.");
	}
	else if (!strcmp(params, "destruir", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pegou seu cone do chão.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s pegou seu cone em %s.**", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "Você não está perto de sua cone.");
	}
	else if (!strcmp(params, "destruirtodas", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "**HQ: %s destruiu todos os cones.**", ReturnName(playerid, 0));
	}
	return 1;
}


//Animações

CMD:maocoldre(playerid, params[])
{
    ClearAnimations(playerid);
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.1,0,0,1,1,1);
	return true;
}

CMD:rcarro(playerid, params[])
{
	ApplyAnimation(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}


//Importação de sistemas
#include "systems/animation.pwn"
